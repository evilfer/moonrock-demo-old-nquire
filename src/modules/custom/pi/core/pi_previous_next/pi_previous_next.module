<?php
// $Id: pi_previous_next.module,v 1.2 2009/06/24 09:17:48 ou_pm Exp $

/**
 * This implements the theme hook for pi_previous_next which defines the available theme
 * functions within this module
 * @return array of theme names and arguments
 */
function pi_previous_next_theme() {
	return array(
		'pi_previous_next_text' => array(
			'arguments' => array('previous_html', 'next_html'),
		),
		'pi_previous_next_buttons' => array(
			'arguments' => array('previous_url', 'next_url'),
		),
	);
}

function pi_previous_next_block($op = 'list', $delta = 0, $edit = array()) {
    switch($op)
    {
    	case 'list':
    		$blocks[0]['info'] = t('nQuire Previous - Next page links');
    	return $blocks;
    	case 'view':
    		global $user;
    		$details = get_inquiry_details_from_current_path();

    		$path = drupal_get_path('module', 'pi_header');
    		$image_path = $path . '/images';
    		drupal_add_css( $path .'/pi_header.css' );
    		
    		// Set different $previous_link and $next_link on phase or activity view
    		// Activity level navigation
    		if(arg(0) == 'activity' && (arg(2) == 'view' || !arg(2)))
    		{
    			$prev_next = previous_next_buttons($details->inquiry_id, $details->stage_id, $details->phase_id, $details->activity_id, $user->uid);
    			$previous_activity = $prev_next['previous'];
    			$next_activity = $prev_next['next'];
    			if(strlen($previous_activity['url'])>0)
    			{
    				$previous_link = $previous_activity;
    			}
    			else
    			{
    				$phase_links = pi_previous_next_phase_links($details->phase_id, $details->stage_id, $user->uid);
    				$previous_link = $phase_links['previous'];
    			}
    			//$previous_link = set above
    			$next_link = $next_activity;
    		}
    		
    		// Phase level navigation
    		if(arg(0) == 'phase' && is_numeric(arg(1)))
    		{
    			$links = pi_previous_next_phase_links(arg(1), $details->stage_id, $user->uid);
    			$previous_link = $links['previous'];
    			$next_link = $links['next'];
    		}
    		$block = array();
    		//$block['content'] = theme('pi_previous_next_text', $previous_link, $next_link);
    		$block['content'] .= theme('pi_previous_next_buttons', $previous_link['url'], $next_link['url']);
    	return $block;
    }
}


/**
 * Works out the links for previous and next buttons at the activity level
 * @param uint $inquiry_id the inquiry for the links to apply to 
 * @param uint $stage_id the current stage
 * @param uint $phase_id the current phase
 * @param uint $activity_id the current activity 
 * @param uint $uid User id for the links to apply to 
 * @return array['previous'] and ['next'] with array ['url'] and ['title'] for the links
 */
function previous_next_buttons($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) {
	$output = array('previous'=> '', 'next' => '');
	
	$hidden_activity_types = array('pi_measure_filter');
	
	//Get activities for stage, phase and user in order of position
	$activities = pi_activity_get_activities_of_stage_phase_user($inquiry_id, $stage_id, $phase_id, $uid);

	//Find the position of current activity 
	$current_position = FALSE;
	foreach($activities as $activity)
	{
		if($activity->activity_id == $activity_id)
		{
			$current_position = array_search($activity, $activities);
		}
	}

	//If the current activity is in this stage then generate links
	if (!($current_position===FALSE))
	{
		$previous_position = $current_position - 1;
		$next_position = $current_position + 1;
		
		//if position < 0 then the current activity is the first in the list, so link to the phase instead
		if($previous_position<0)
		{
			$current_phase = node_load($phase_id);
			$output['previous']['title'] = check_plain($current_phase->title);
			$output['previous']['url'] = url("phase/$current_phase->nid");
		}
		else
		{
			$previous_activity = $activities[$previous_position];
			$prev_link = pi_activity_get_link($inquiry_id, $stage_id, $phase_id, $previous_activity->activity_id, $uid);
			$output['previous'] = $prev_link;
		}
		
		//if position >= count of activities in phase then point to next phase
		if($next_position>=count($activities))
		{
			$output['next']= pi_previous_next_next_phase_link($inquiry_id, $phase_id, $uid);
		}
		else
		{
			$next_activity = $activities[$next_position];
			$next_link = pi_activity_get_link($inquiry_id, $stage_id, $phase_id, $next_activity->activity_id, $uid);
			$output['next'] = $next_link;
		}
	}
	else
	{
		//drupal_set_message("Couldn't find activity position!");
		//If the acticity is not found,  both links will go to the phase as fallback
		$output['previous']['title'] = check_plain($current_phase->title);
		$output['previous']['url'] = url("phase/$current_phase->nid");
		$output['next']['title'] = check_plain($current_phase->title);
		$output['next']['url'] = url("phase/$current_phase->nid");
	}
	return $output;
}

function next_button() {
	global $user;
	$details = get_inquiry_details_from_current_path();
	$activities = get_viewable_activity_ids($details->inquiry_id, $user->uid);
	$next_activity = $activities[0];

    foreach($activities as $activity) {
		if ($prev_activity == $details->activity_id) {
			$next_activity = $activity;
		}
		$prev_activity = $activity;
	};
	
	$loaded_activity = load_activity($next_activity);
	$loaded_activity_status = load_activity_status($details->inquiry_id, $next_activity, $user->uid);
	
	switch ($loaded_activity->destination) {
		case "self":
			$destination = "";
		break;
	    case "phase":
	    	$destination = "destination=" . "phase/" . $phase->nid;
		break;
		default:
			$destination = "destination=" . "inquiry/" . $phase->inquiry_nid;
	};
    
	// so that (by default) always open an existing node in view
	// if node_function for link is edit or view then set node function to view
    $link_node_function = $loaded_activity_status->node_function;
    
	if (($link_node_function == 'edit') OR ($link_node_function == 'view')) {
		$link_node_function = 'view';
	};
    
	$activity_path = "activity/" . $next_activity . "/" . $link_node_function;
	if ($loaded_activity_status->visible_status == 'unavailable') {
		$activity_link = t($loaded_activity->name);
	}
	else {
		$image_path = drupal_get_path( 'module', 'pi' ) . '/images/';
		if (in_array($activity->activity_id, new_activity_list($details->inquiry_id, $details->phase_id, $user->uid))) {
			$new_icon = "<img width='12' src='" . $image_path . "new_activity.png'/>";
		}
		else {
			$new_icon = "";
		};
		
    // $activity_link = l(t('Next'), $activity_path, array('html' => TRUE, 'query' => $destination));
		$activity_link = '<strong>' .t(Next) . ':&nbsp;</strong>' . l(check_plain($loaded_activity->name) . ' ' . add_activity_icon($loaded_activity_status->visible_status) . ' ' . $new_icon, $activity_path, array('html' => TRUE, 'query' => $destination));
	};
				
	$output = '';
	
	if ($next_activity) 
	{
		$output .= theme('pi_previous_next_text', NULL, $activity_link);
	};
	return $output;
}


/**
 * Generate the previous and next links for the phase level view based on user and current stage
 * @param uint $current_phase_nid the phase nid for the links to apply to 
 * @param uint $current_stage_nid the stage nid for the stage the links apply to  
 * @param uint $uid the uid for the user 
 * @return array ['previous'], ['next'] containing string for HTML links 
 */
function pi_previous_next_phase_links($current_phase_nid, $current_stage_nid, $uid)
{
	$links = array('previous'=> '', 'next' => '');
	
	$phase_node = node_load($current_phase_nid);

	if($phase_node->type == 'pi_phase')
	{
		// get data about inquiry and phases and activities in weight order
		$inquiry_phases = pi_phase_load_nids_for_user($phase_node->inquiry_nid, $uid);
		$inquiry = node_load($phase_node->inquiry_nid);
		//get the item with position+1 and position-1
		$current_phase_index = array_search($phase_node->nid, $inquiry_phases);
		$next_phase_index = $current_phase_index+1;
		$previous_phase_index = $current_phase_index-1;

		/* 
		// Use this section to make the phase/next link point to the first activity in a phase
		// Get the first activity of the phase, if one exists...
		// otherwise don't bother and make next point to next phase
		$activities_in_order = pi_activity_get_activities_of_stage_phase_user($phase_node->inquiry_nid, $current_stage_nid, $phase_node->nid, $uid);
		if(count($activities_in_order)>0)
		{
			$first_activity_in_phase = $activities_in_order[0];
			$next_activity_link = build_activity_link($inquiry->nid, $current_stage_nid, $phase_node->nid, $first_activity_in_phase->activity_id, $uid);
			$next_link = $next_activity_link['data'];
		}
		else
		{
			// if there are no activities, then work out next phase
			$next_link = pi_previous_next_next_phase_link($inquiry->nid, $current_phase_nid, $uid);
		}
		*/	

		// Use this seciton to make the phase/next link point to the next phase
		// if there are no activities, then work out next phase
		$next_link = pi_previous_next_next_phase_link($inquiry->nid, $current_phase_nid, $uid);
		
		
		// do previous link pointing to previous phase, or inquiry view if not
		if($previous_phase_index < 0)
		{
			// It doesn't exist so create a link back to the inquiry view
			$previous_phase_link['title'] = check_plain($inquiry->title);
			$previous_phase_link['url'] = url("inquiry/$phase_node->inquiry_nid");
		}
		else
		{
			// it should exist, so load it and create link
			$previous_phase = node_load($inquiry_phases[$previous_phase_index]);
			$previous_phase_link['title'] = check_plain($previous_phase->title);
			$previous_phase_link['url'] = url("phase/$previous_phase->nid");
		}
			
		$links['previous']= $previous_phase_link;
		$links['next'] = $next_link;
	}
	
	return $links;
}


/**
 * Generate html link for next phase in the inquiry or link to inquiry view if last phase
 * @param $inquiry_nid
 * @param $phase_nid
 * @param $uid
 */
function pi_previous_next_next_phase_link($inquiry_nid, $phase_nid, $uid)
{
	$phase_link = array('url'=>'', 'title'=>'');
	
	$inquiry_phases = pi_phase_load_nids_for_user($inquiry_nid, $uid);
	$inquiry = node_load($inquiry_nid);
	//get the item with position+1 and position-1
	$current_phase_index = array_search($phase_nid, $inquiry_phases);
	$next_phase_index = $current_phase_index+1;
	
	// check that next item will exist or link to inquiry view if not
	if($next_phase_index >= count($inquiry_phases))
	{
		// It doesn't exist so create a link back to the inquiry view
		$phase_link['title'] = check_plain($inquiry->title);
		$phase_link['url'] = url("inquiry/$inquiry_nid");
	}
	else
	{
		// it should exist, so load it and create link
		$next_phase = node_load($inquiry_phases[$next_phase_index]);
		$phase_link['title'] = check_plain($next_phase->title);
		$phase_link['url'] = url("phase/$next_phase->nid");
	}
	return $phase_link;	
}

	
/**
 * Theme function for the pi_previous_next block if an empty string (or null) is passed, then the link will not be displayed at all
 *  This version renders the links as text with "Previous" and "Next" prefixes and you should pass the 
 *  actual HTML to make the link. See build_activity_link().
 * @param string $previous HTML for the link to the previous item  
 * @param array $next HTML for the link to the next item
 */
function theme_pi_previous_next_text($previous_html, $next_html)
{
	$image_dir = drupal_get_path('module', 'pi_previous_next') . '/images';
	$output = '';
    $output .= '<div>';
    if(strlen($previous_html['title'])>0)
    {
    	$output .= "\t<div style='float:left'><strong>" . t("Previous") . ":&nbsp;</strong><a href='" . $previous_html['url'] . "'>" . $previous_html['title'] . "</a></div>";
    }
    if(strlen($next_html['title'])>0)
    {
	    $output .= "\t<div style='float:right'><strong>" . t("Next") . ":&nbsp;</strong><a href='" . $next_html['url'] . "'>" . $next_html['title'] . "</a></div>";
    }
    $output .= "</div>\n<div style='clear:both;'></div>";
    return $output;
}

/**
 * Theme function for the pi_previous_next block if an empty string (or null) is passed, then the link will not be displayed at all
 *  This version renders the links as image buttons and you should pass the 
 *  just the URL of the link.  See pi_activity_get_url()
 * @param string $previous URL for the link to the previous item  
 * @param array $next URL for the link to the next item
 */
function theme_pi_previous_next_buttons($previous_url, $next_url)
{
	$image_path = drupal_get_path('module', 'pi_previous_next') . '/images';
	$output = '';
    $output .= '<div>';
    if(strlen($previous_url)>0)
    {
    	$output .= "\t<div style='float:left'><a href='$previous_url'><img src='$image_path/previous.png'></a></div>";
    }
    if(strlen($next_url)>0)
    {
    	$output .= "\t<div style='float:right'><a href='$next_url'><img src='$image_path/next.png'></a></div>";
	}
    $output .= "</div>\n<div style='clear:both;'></div>";
    return $output;
}

