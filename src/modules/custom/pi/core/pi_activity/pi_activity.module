<?php
// $Id: pi_activity.info,  2010/05/21  MCP $


module_load_include('inc', 'pi_activity', 'pi_activity.workflow' );

/**
 *
 * This functions returns the information for the activity node
 * Function used by the drupal system
 */
function pi_activity_node_info()
{
	$type=array(
		'pi_activity' => array(
		    'name' => t('Activity'), // Required.
		    'module' => 'pi_activity',  // Required.
		    'description' => t('A generic activity'), // Required.
		    'has_title' => TRUE,
		    'title_label' => t('Activity'),
		    'has_body' => TRUE,
			'body_label' => t('A generic activity'),
		    'locked' => TRUE )
	);

	return $type;
}

function pi_activity_perm()
{
}

function pi_activity_access($op, $node, $account)
{
	return true;
}

/**
 * Access callback for pi_activities under the url activity/%
 * @param uint $activity_id the id of the activity being accessed
 * @param uint $op the function to perform on the activity (view/add/edit)
 * @return TRUE or FALSE to indicate whether access is allowed for that function
 */
function pi_activity_item_access($activity, $op) {
 
	$return_value = false;
	if(isset($activity->activity_id))
	{
		global $user;
		$details = get_inquiry_details_from_current_path();
		$return_value = check_node_function_of_activity($details->inquiry_id, $activity->activity_id, $user->uid, $op);
		if(($return_value===false) && ($op=='view'))
		{
			$return_value = check_node_function_of_activity($details->inquiry_id, $activity->activity_id, $user->uid, 'edit');
		}
		if(($return_value===false) && ($op=='add'))
		{
			$possible_add_nid = pi_activity_get_add_activity_for_sort_activity($details->inquiry_id, $activity->activity_id, $user->uid);
			if( $possible_add_nid !== NULL)
			{
				$return_value = true;
			}
		}
	}
	return $return_value;
}

/**
 * hook_menu() for pi_activity defining all the activity/% menu callbacks, etc
 * @return array of menu items as per drupal 6 api
 */
function pi_activity_menu() {
	$items = array();
	$items['activity/%pi_activity'] = array(
		'title' => 'View',
		'file' => 'pi_activity.activity.inc',
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 'view'),
		'access callback' => 'pi_activity_item_access',
		'access arguments' => array(1, 'view'),
		'type' => MENU_CALLBACK
	);

	$items['activity/%pi_activity/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0
	);

	$items['activity/%pi_activity/edit'] = array(
		'title' => 'Edit',
		'file' => 'pi_activity.activity.inc', 
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 'edit'),
		'access callback' => 'pi_activity_item_access',
		'access arguments' => array(1, 'edit'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1
	);

	$items['activity/%pi_activity/add'] = array(
		'title' => 'Add',
		'file' => 'pi_activity.activity.inc', 
		'page callback' => 'pi_activity_view',
		'page arguments' => array(1, 'add'),
		'access callback' => 'pi_activity_item_access',
		'access arguments' => array(1, 'add'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2
	);

	$items['activity/%pi_activity/admin'] = array(
		'title' => 'Admin',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_content',
		'page arguments' => array(1),
		'access_callback' => 'user_access',
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 3
	);

	$items['activity/%pi_activity/admin/content'] = array(
		'title' => 'View Activity Content',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 0
	);

	$items['activity/%pi_activity/admin/edit'] = array(
		'title' => 'Edit Activity',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_edit',
		'page arguments' => array(1),
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 1
	);

	$items['activity/%pi_activity/admin/view/%node'] = array(
		'title' => 'Edit Activity',
		'file' => 'pi_activity.admin.inc', 
		'page callback' => 'pi_activity_admin_view_node',
		'page arguments' => array(1, 4),
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_CALLBACK,
		'weight' => 1
	);

	// NOTE: If you change the url below also change pi_activity_form_pi_activity_form_alter()
	$items['admin/nquire/activity'] = array(
		'title' => 'Add an Activity to an Inquiry',
		'description' => 'This allows you to directly add an activity to an inquiry, selecting the phase and stages it belongs to.',
		'page callback' => 'pi_activity_add',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('administer site configuration'),
		'weight' => 4,
	);
	
	return $items;
}

/**
 * This page is the standard activity authoring page that is currently linked to from admin/nquire
 * It calls pi_activity_form which will be rewritten in pi_activity_pi_activity_form_alter where it will 
 * be redirected to it's calling location where necessary 
 */
function pi_activity_add()
{
	$output = '';

	$output = t("<p>Use this page to add an activity to an inquiry - select the activity, then the phase and then the phases that it will be incuded in." .	
			 	" For each stage you wil have to chouse how it will be made available: as either <i>unavailable</i>, " . 
				"<i>startable</i>, <i>editable</i> or <i>viewable</i>.");	
	$new_activity = new stdClass();
	$output .= drupal_get_form('pi_activity_form', $new_activity);
	
	return $output;	
}

/**
 * General form form for activity editing using drupal forms API. 
 * @param $form_state
 */
function pi_activity_form($form_state) {	
	$form = array();
	/* construct form to edit the details of an activity
	 * inc. pi_activity, pi_activity_status, pi_activity_actor & pi_stage_phase_activity tables
	 */
	
	
	$inquiry_data = array();
	$inquiry_nids = pi_inquiry_load_nids();
	$inquiry_data = pi_util_get_names_from_nids($inquiry_nids);
	
	$inquiry_options = array('none'=>t('Select an inquiry for this activity'));
	foreach($inquiry_data as $inquiry_nid => $inquiry_name)
	{
		$inquiry_options[$inquiry_nid] = $inquiry_name;
	}
	
	pi_util_get_names_from_nids($inquiry_nids);
	if(count($inquiry_data)==0)
	{
		drupal_set_message('There are no inquiries defined, please create an inquiry before defining phases.', 'error');		
	}
	
	//This section allows a dynamic list of stages to appear on the form to allow 
	// pi_stage_phase links to be created at the same time as a stage.
	// This uses the ahah_helper module
	ahah_helper_register($form, $form_state); 
	
	// If there's no value in storage and the node has one set, then use that
	if(isset($node->inquiry_nid) && !isset($form_state['storage']['inquiry_nid']))
	{
		$inquiry_nid_default_value = $node->inquiry_nid;
	}
	else
	{
		//If there's a value in storage use that
		if(isset($form_state['storage']['inquiry_nid']))
		{
			$inquiry_nid_default_value =  $form_state['storage']['inquiry_nid'];
		}
		else
		{
			//Otherwise, use 'none'
			$inquiry_nid_default_value = 'none';
		}
	}
	
	$form['inquiry_nid'] = array(
		'#type' => 'select',
		'#title' => t('Inquiry for stage'),
		'#required' => TRUE,
		'#weight' => 1,
		'#options' => $inquiry_options,
		'#allowed_inquiry_nids' => $inquiry_nids,
		'#default_value' => $inquiry_nid_default_value,
		'#element_validate' => array('pi_util_inquiry_nid_validate'),
		'#ahah' => array(
			'path'    => ahah_helper_path(array('activity_phases')),
			'wrapper' => 'activity-phase-wrapper',
		),
		 //this fixes some layout issues with the ahah throbber
		//'#attributes' => array('style'=>'overflow:auto;border: thin solid black;'),
		'#prefix' => "<div style='min-height:40px;'>",
		'#suffix' => '</div>'
	);	
	
	//This uses the generic submit callback provided by the ahah_helper module here
	// Is sets $form_state['rebuild'] = TRUE.
	// 'no-js' class is set so that the submit button will be shown if JS is disabled.
	$form['inquiry_nid']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Update phase list'),
	    '#weight' => 1,
		'#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'no-js'),
	);
		
	$form['phase_nid'] = pi_activity_form_generate_phase_select($inquiry_nid_default_value, $phase_nid_default_value);
	
	$form['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Activity Name'),
		'#weight' => 3,
		'#description' => t('This is the title of the activity that will appear as the activity link in the phase view.'),
		'#default_value' => $result->name,
	);
	
	$form['description'] = array(
		'#type' => 'textarea',
		'#weight' => 4,
		'#cols' => 80,
		'#rows' => 5,
		'#description' => t('For some activity types the description will be shown at the top of the page (for example in the Hypothesis activity). Enter it here.'),
		'#title' => t('Activity Description'),
		'#default_value' => $result->description,
	);
	
	//activity and node type query
	
	$node_types = node_get_types('names');
	if(is_array($node_types))
	{
		$node_type_options = array('none'=>t('Select activity type...'));
		foreach($node_types as $type => $name)
		{
			$node_type_options[$type] = $name;
			$allowed_activity_types = array_keys($node_types);
		}
	}
	else
	{
		$node_type_options = array('none' => t('No activity types available, please check nQuire is correctly installed'));
		$allowed_activity_types = array();
	}

	$form['activity_type'] = array(
		'#type' => 'select',
		'#title' => t('Activity Type'),
		'#description' => t('Choose the type of activity you want to place into the inquiry from this list.'),
		'#weight' => 5,
		'#options' => $node_type_options,
		'#default_value' => $result->activity_type,
		'#allowed_activity_types' => $allowed_activity_types,
	);
	
	$form['node_type'] = array(
		'#type' => 'select',
		'#title' => t('Node Type'),
		'#weight' => 6,
		'#options' => $node_type_options,
		'#default_value' => $result->node_type,
	);
	
	$form['parameters'] = array(
		'#type' => 'textfield',
		'#title' => t('Parameters'),
		'#weight' => 7,
		'#default_value' => $result->parameters,
	);
	
	$destination_option = array('phase'=>'phase','self'=>'self',);
	
	$form['destination'] = array(
		'#type' => 'select',
		'#title' => t('Destination After Completing the Activity (self or phase)'),
		'#weight' => 8,
		'#options' => $destination_option,
		'#default_value' => $result->destination,
	);
	
	$group_options = array('individual'=>'individual',
						'group'=>'group',
						'class'=>'class',
						'multiclass'=>'multiclass');
	
	$form['audience'] = array(
		'#type' => 'select',
		'#title' => t('Activity Audience'),
		'#weight' => 9,
		'#options' => $group_options,
		'#default_value' => $result->audience,
	);
	
	//pi_activity_status table
	$query2 = "SELECT * FROM pi_activity_status WHERE activity_id = '" . $activity_id . "'";
	$result2 = db_fetch_object(db_query($query2));
	
	$og_query = "SELECT * FROM og";
	$og_groups_query = db_query($og_query);
	$og_groups_options = array();
	while($og = db_fetch_object($og_groups_query)){
		$og_groups_options[$og->nid] = $og->og_description . ' (' . $og->nid . ')';
	}

	$form['gid'] = array(
		'#type' => 'select',
		'#title' => t('Activity Group'),
		'#weight' => 10,
		'#options' => $og_groups_options,
		'#default_value' => $result2->gid,
	);
	
	$node_function_options = array('add'=>'add','edit'=>'edit','view'=>'view',);
	
	$form['node_function'] = array(
		'#type' => 'select',
		'#title' => t('Node Function'),
		'#weight' => 11,	
		'#options' => $node_function_options,
		'#default_value' => $result2->node_function,
	);
	
	$visible_status_options = array('start'=>'start','in_progress'=>'in_progress',
									'view'=>'view', 'unavailable'=>'unavailable');
	
	$form['visible_status'] = array(
		'#type' => 'select',
		'#title' => t('Visible Status'),
		'#options' => $visible_status_options,
		'#weight' => 12,
		'#default_value' => $result2->visible_status,
	);
	
	//nid options
	$query3 = "SELECT * FROM node";
	$result3 = db_query($query3);
	$node_options = array();
	//first is none -> is 0 as no nid is 0 they always start at 1
	$node_options[] = array(0=>'none');
	while($object3 = db_fetch_object($result3)){
		$node_options[$object3->nid] = $object3->title . "(" . $object3->type . ")";
	}
	
	$query4 = "SELECT * FROM pi_activity_node WHERE activity_id = '" . $activity_id . "'";
	$object4 = db_fetch_object(db_query($query4));
	
	$form['existing_nid'] = array(
		'#type' => 'select',
		'#title' => t('Does The Activity Refer To An Existing Node? I.e. if you have selected view in view_type then to which node do you want to view?'),
		'#weight' => 13,
		'#options' => $node_options,
		'#default_value' => $object4->nid,
	);
	
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#weight' => 14,	
	);
	
	return $form;
}


/**
 * Generate the ['activity_phases']['phases'] select list for a given inquiry nid.
 * this is used in this module and also called by pi_authoring using hook_form_FORM-ID_alter()
 * as it can't run the ahah call do do this
 * @param uint $inquiry_nid nid of the inquiry to show generate boxes for or 'none' for blank
 * @return array describing the checkboxes form element
 */
function pi_activity_form_generate_phase_select($inquiry_nid, $default_value)
{
	// Based on the selection above generate the select boxes for phases
	$phase_select_options = array('none' => t('Select the phase for this activity...'));
	if($inquiry_nid != 'none')
	{
		$inquiry_phase_nids = pi_phase_load_nids($inquiry_nid);
		$phase_names = pi_util_get_names_from_nids($inquiry_phase_nids);
		foreach($phase_names as $phase_nid => $name)
		{
			$phase_select_options[$phase_nid] = $name;
		} 
	}
	else
	{
		$inquiry_phase_nids = array();
	}

	$form_element =  array(
		'#type' => 'select',
	    '#weight' => 2,
		'#options' => $phase_select_options,
		'#allowed_phase_nids' => $inquiry_phase_nids,
		'#default_value' => $default_value,
		'#element_validate' => array('pi_util_phase_nid_validate'),
		'#prefix' => "<div id='activity-phase-wrapper'>",
		'#suffix' => '</div>'
	);
	return $form_element;
}




/**
 * Returns the activity_object from pi_activity table - used in the activity menu
 * @param int $activity_id the activity ID
 * @return object from db_fetch_object() for pi_activity table
 */
function pi_activity_load($activity_id)
{
	$activity = load_activity($activity_id);
	return $activity;
}

function pi_activity_insert($node)
{
}

function pi_activity_update($node)
{
	/*
	 $activity_array = $node->activity_data;

	 $query = "UPDATE {pi_activity} SET " . $set . " WHERE activity_id = %d";

	 db_query($query, 	$activity_array["name"], $activity_array["description"],
	 $activity_array["activity_type"], $activity_array["node_type"],
	 $activity_array["parameters"], $activity_array["destination"],
	 $activity_array["audience"], $node->nid );

	 */

	//save_activity($node->activity_data);
}

function pi_activity_delete(&$node)
{
	delete_activity($node->nid);
}


/**
 * hook_theme() for pi_activity content
 */
function pi_activity_theme()
{
	return array(
		'pi_activity_admin_view_node' => array(
			'arguments' => array('activity', 'node_view_page'),
			'file' => 'pi_activity.admin.inc')
	);
}



/*
 *activity teaser
 */
function pi_activity_teaser($node, $activity, $link_node_function) {
	if($link_node_function == 'view')
	{
		//Add activity ID to node, needed for the PI chart module
		$node->activity_id = $activity->activity_id;
		$output = node_view($node, TRUE, TRUE);
	}
	else
	{
		$output = $activity->description;
	}
	return $output;
}



/**
 * Returns a list of nids of activity nodes generated for the given pi_activity
 * @param uint $inquiry_id the id of a pi_inquiry to get all related nodes for the activity (n.b. this is probably not needed)
 * @param uint $activity_id the id of a pi_activity to get all related nodes for
 * @return array(uint) an array of all the activity content nids for the given activity_is
 */
function pi_activity_get_activity_content_nids($activity_id, $inquiry_id)
{
	$activity_content_nids = array();
	$query = "SELECT nid FROM {pi_activity_node} WHERE activity_id = %d AND inquiry_id = %d";
	$result = db_query($query, $activity_id, $inquiry_id);
	while($row = db_fetch_array($result))
	{
		$activity_content_nids[] = $row['nid'];
	}
	return $activity_content_nids;
}

/**
 * Return and object with a nid property which is the phase activity resides is in in a
 * particular inquiry for a given user.
 * @param uint $inquiry_id The inquiry id of the activity
 * @param uint $activity_id The activity id
 * @param uint $uid The uid of the user that activity belongs to
 */
function get_phase_of_inquiry_and_activity($inquiry_id, $activity_id, $uid) {
	$query = "SELECT {pi_phase}.nid as nid FROM {pi_phase} "
	. "LEFT JOIN {pi_phase_actor} ON {pi_phase_actor}.phase_id = {pi_phase}.nid "
	. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_phase_actor}.gid "
	. "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.phase_id = {pi_phase}.nid "
	. "LEFT JOIN {pi_stage_phase_activity} ON {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id "
	. "WHERE {pi_phase}.inquiry_nid = %d "
	. "AND ( {pi_phase_actor}.uid = %d OR {og_uid}.uid = %d ) "
	. "AND {pi_stage_phase_activity}.activity_id = %d";
	$result = db_fetch_object(db_query($query, $inquiry_id, $uid, $uid, $activity_id));
	return $result;
}


function get_nid_for_inquiry_activity_and_any_user($inquiry_id, $activity_id) {
 $query1 = "SELECT {pi_activity_node}.nid FROM {pi_activity_node} "
	. "LEFT JOIN {node} ON {node}.nid = {pi_activity_node}.nid "
	. "WHERE {pi_activity_node}.inquiry_id = %d "
	. "AND {pi_activity_node}.activity_id = %d "
	. "ORDER BY {pi_activity_node}.pan_id DESC"; 
 
 	$result = db_fetch_object(db_query($query1, $inquiry_id, $activity_id, $uid));
	if (isset($result))
	{
		if(isset($result->nid))
		{
			return $result->nid;
		}
	}
}
/**
 * get_nid_for_inquiry_activity_and_user
 **/
function get_nid_for_inquiry_activity_and_user($inquiry_id, $activity_id, $uid) {
	//find if uid is author of the node
	$query1 = "SELECT {pi_activity_node}.nid FROM {pi_activity_node} "
	. "LEFT JOIN {node} ON {node}.nid = {pi_activity_node}.nid "
	. "WHERE {pi_activity_node}.inquiry_id = %d "
	. "AND {pi_activity_node}.activity_id = %d AND {node}.uid = %d "
	. "ORDER BY {pi_activity_node}.pan_id DESC";

	/*	$query1 = "SELECT pi_activity_node.nid FROM pi_activity_node, node";
	 $query1 .= " WHERE  pi_activity_node.inquiry_id = " . $inquiry_id;
	 $query1 .= " AND pi_activity_node.activity_id = " . $activity_id;
	 $query1 .= " AND node.nid = pi_activity_node.nid";
	 $query1 .= " AND node.uid = '" . $uid . "' ";
	 $query1 .= " ORDER BY pan_id DESC";*/


	$result = db_fetch_object(db_query($query1, $inquiry_id, $activity_id, $uid));
	if (isset($result))
	{
		if(isset($result->nid))
		{
			return $result->nid;
		}
	}

	//find if uid is member of a group for the node
	$query2 = "SELECT {pi_activity_node}.nid FROM {pi_activity_node}, {node_access}, {og_uid} "
	. "WHERE  {pi_activity_node}.inquiry_id = %d "
	. "AND {pi_activity_node}.activity_id = %d "
	. "AND {node_access}.nid = {pi_activity_node}.nid "
	. "AND ( ( {node_access}.gid = gid AND {node_access}.gid = og_uid.nid AND {og_uid}.uid = %d ) "
	. "OR {node_access}.realm = 'all')";

	$result = db_fetch_object(db_query($query2, $inquiry_id, $activity_id, $uid));
	return $result->nid;
}


/**
 * Returns the phase id.
 * Assumes 1-1 mapping of phases to activities
 * If more than one returns the one with the highest unique key in pi_stage_phase
 */
function get_phase_id_for_activity_id($activity_id) {
	$sql = "SELECT {pi_stage_phase}.phase_id FROM {pi_stage_phase}, {pi_stage_phase_activity} "
	. "WHERE {pi_stage_phase_activity}.activity_id = %d "
	. "AND {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id "
	. "ORDER BY {pi_stage_phase}.psp_id DESC LIMIT 1";
	$result = db_fetch_object(db_query($sql, $activity_id));
	return $result->phase_id;
}

/**
 * Returns the inquiry id.
 * Assumes 1-1 mapping of activities to phases
 */
function get_inquiry_id_for_activity_id($activity_id) {
	$phase_id = get_phase_id_for_activity_id($activity_id);
	$inquiry_id = get_inquiry_id_for_phase_id ($phase_id);
	return $inquiry_id;
}

/**
 * Returns an array of activity_ids of the specified activity_type
 * that are visible to that user according to pi_activity_actor.
 * This uses pi_activity_actor and pi_activity tables.
 */
function get_activity_ids_for_activity_type($inquiry_id, $activity_type, $uid) {
	$query = "SELECT {pi_activity}.activity_id FROM {pi_activity} "
	. "LEFT JOIN {pi_activity_actor} ON {pi_activity_actor}.activity_id = {pi_activity}.activity_id "
	. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
	. "WHERE {pi_activity_actor}.inquiry_id = %d "
	. "AND {pi_activity}.activity_type =  '%s' "
	. "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid = %d)";

	$result = db_result(db_query($query, $inquiry_id, $activity_type, $uid, $uid));
	return $result;

}

/**
 * Returns an array of node_ids of the specified activity_type
 * that are visible to that user according to pi_activity_actor.
 * This uses pi_activity_actor and pi_activity tables.
 */
function get_node_ids_for_activity_type ($inquiry_id, $activity_type, $uid) {
	$query = "SELECT {pi_activity_node}.nid FROM {pi_activity_node} "
	. "LEFT JOIN {pi_activity} ON {pi_activity_node}.activity_id = {pi_activity}.activity_id "
	. "LEFT JOIN {pi_activity_actor} ON (( {pi_activity_node}.inquiry_id = {pi_activity_actor}.inquiry_id ) AND ( {pi_activity_actor}.activity_id = {pi_activity}.activity_id )) "
	. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
	. "WHERE {pi_activity_node}.inquiry_id = %d "
	. "AND {pi_activity}.activity_type =  '%s' "
	. "AND ({pi_activity_actor}.uid = %d OR {og_uid}.uid = %d)";

	// print $query;
	$result = db_query($query, $inquiry_id, $activity_type, $uid, $uid);
	return $result;

}

function get_activity_id_for_nid($nid) {
	$query = "SELECT activity_id FROM {pi_activity_node} WHERE nid = %d";
	$result = db_fetch_object(db_query($query, $nid));
	return $result->activity_id;
}

/**
 * Uses arguments from the path and the pi_activity_table to return the activity type.
 */
function get_activity_type_of_node_path($path) {
	$inquiry_details = get_inquiry_details_of_node_path ($path);

	$query = "SELECT activity_type FROM {pi_activity} WHERE activity_id = %d";
	$result = db_result(db_query($query, $inquiry_details->inquiry_id));

	return $result ;
}

/**
 * Returns FALSE if this is not the activity_type for the activity type
 * associated with the node path, otherwise returns TRUE.
 */
function check_activity_type_of_node_path ($path, $activity_type) {
	$temp = get_activity_type_of_node_path ($path);

	if ($temp == NULL) {
		$result = NULL;
	}
	elseif ($temp == $activity_type) {
		$result = TRUE;
	}
	else {
		$result = FALSE;
	};

	return $result;

}

/**
 * Adds the specified data to the pi_activity_node table.
 * This tracks that a node has been created for that particular activity.
 */
function add_pi_activity_node($inquiry_id, $activity_id, $nid) {
	$query = "INSERT INTO {pi_activity_node} SET inquiry_id = %d, activity_id = %d, nid_id = %d";

	db_query($query, $inquiry_id, $activity_id, $nid_id);
}

// ------------------------------------------------------------------------------------

/**
 * Functions in this block are for visible_status and node_function.
 * Primarily they refer to values of pi_activity_status.
 */

/**
 * Returns visible_status from pi_activity_status (can be start, in_progress, view or unavailable).
 */
function get_visible_status_of_activity($inquiry_id, $activity_id, $uid) {
	$activity_status = load_activity_status($inquiry_id, $activity_id, $uid);
	$result = $activity_status->visible_status;
	return $result ;
}

/**
 * $status can be either start, in_progress, view or unavailable.
 * Returns FALSE if that user does not have that permission for the
 * specified activity, otherwise it returns TRUE.
 */
function check_visible_status_of_activity ($inquiry_id, $activity_id, $uid, $status) {


	$visible_status = get_visible_status_of_activity($inquiry_id, $activity_id, $uid);

	if ($visible_status == $status) {
		$result = TRUE;
	}
	else {
		$result = FALSE;
	};

	return $result;

}

/**
 * $status can be either start, in_progress, view or unavailable.
 * Updates the existing visible_status to value $status.
 * This will set dependent on the audience in pi_activity.
 */
function set_visible_status_of_activity($inquiry_id, $activity_id, $uid, $status) {
	$activity_status = load_activity_status($inquiry_id, $activity_id, $uid);

	$activity_status->visible_status = $status;

	save_activity_status($activity_status);
	/*
	 $query = "SELECT pi_activity_status.pas_id ";
	 $query .= "FROM pi_activity_status ";
	 $query .= "LEFT JOIN pi_activity_actor ";
	 $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
	 $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
	 $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	 $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	 $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
	 $query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	 $pas_id = db_result(db_query($query));

	 $query = "UPDATE pi_activity_status ";
	 $query .= "SET visible_status = '" . $status . "' ";
	 $query .= "WHERE pas_id = '" . $pas_id . "'";

	 db_query($query);*/

}

/**
 * Updates the visible status for all of the activities visible to that user of the specified type.
 * This will be set dependent on the audience in pi_activity.
 */
function set_visible_status_of_activity_type($inquiry_id, $activity_type, $uid, $status) {
	$query = "SELECT {pi_activity_status}.pas_id FROM {pi_activity_status} "
	. "LEFT JOIN {pi_activity} ON {pi_activity_status}.activity_id = {pi_activity}.activity_id "
	. "LEFT JOIN {pi_activity_actor} ON {pi_activity_actor}.inquiry_id = {pi_activity_status}.inquiry_id "
	. "AND {pi_activity_actor}.activity_id = {pi_activity_status}.activity_id "
	. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
	. "WHERE {pi_activity_status}.inquiry_id = %d "
	. "AND {pi_activity_status}.activity_id = %d "
	. "AND {pi_activity}.activity_type = '%s' "
	. "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid =  %d )";

	$items = db_query($query, $inquiry_id, $activity_id, $activity_type, $uid, $uid);

	while ($item = db_fetch_object($items))
	{
		$query = "UPDATE {pi_activity_status} SET visible_status = '%s' WHERE pas_id = %d";
		db_query($query, $status, $item->pas_id);
	}
}

/**
 * Returns node_function from pi_activity_status (can be add, edit or view).
 * @param $inquiry_id
 * @param $activity_id
 * @param $uid
 * @return unknown_type
 */
function get_node_function_of_activity($inquiry_id, $activity_id, $uid) {
	$activity_status = load_activity_status($inquiry_id, $activity_id, $uid);
	$result = $activity_status->node_function;
	return $result ;
	/*
	 $query = "SELECT pi_activity_status.node_function ";
	 $query .= "FROM pi_activity_status ";
	 $query .= "LEFT JOIN pi_activity_actor ";
	 $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
	 $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
	 $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	 $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	 $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
	 $query .= "AND (pi_activity_actor.uid =  '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	 $result = db_fetch_object(db_query($query));

	 return $result->node_function;*/

}

/**
 * Returns FALSE if that node function for that activity and user is not the specified
 * function, otherwise it returns TRUE.
 * @param $inquiry_id
 * @param uint $activity_id ID of pi_acitvity to check node function with
 * @param uint $uid ID of user to check node function with
 * @param string $function can Either 'add', 'edit' or 'view'.
 * @return unknown_type
 */
function check_node_function_of_activity($inquiry_id, $activity_id, $uid, $function) {
	$node_function = get_node_function_of_activity($inquiry_id, $activity_id, $uid);
	if ($node_function == $function)
	{
		$result = TRUE;
	}
	else
	{
		$result = FALSE;
	}
	return $result;
}

/**
 * $function can be either add, edit or view.
 * Updates the exisitng node_function to the value of $function.
 * This will be set dependent on the audience in pi_activity.
 * @param $inquiry_id
 * @param $activity_id
 * @param $uid
 * @param $function
 * @return unknown_type
 */
function set_node_function_of_activity($inquiry_id, $activity_id, $uid, $function) {
	$activity_status = load_activity_status ($inquiry_id, $activity_id, $uid);
	$activity_status->node_function = $function;
	save_activity_status($activity_status);
	/*
	 $query = "SELECT pi_activity_status.pas_id ";
	 $query .= "FROM pi_activity_status ";
	 $query .= "LEFT JOIN pi_activity_actor ";
	 $query .= "ON pi_activity_actor.inquiry_id = pi_activity_status.inquiry_id ";
	 $query .= "AND pi_activity_actor.activity_id = pi_activity_status.activity_id ";
	 $query .= "LEFT JOIN og_uid ON og_uid.nid = pi_activity_actor.gid ";
	 $query .= "WHERE pi_activity_status.inquiry_id = '" . $inquiry_id . "' ";
	 $query .= "AND pi_activity_status.activity_id = '" . $activity_id . "' ";
	 $query .= "AND (pi_activity_actor.uid = '" . $uid. "' OR og_uid.uid =  '" . $uid . "')";

	 $pas_id = db_result(db_query($query));

	 $query = "UPDATE pi_activity_status ";
	 $query .= "SET node_function = '" . $function . "' ";
	 $query .= "WHERE pas_id = '" . $pas_id . "'";

	 db_query($query);*/

}

/**
 * Updates the node function for all of the activities visible to that user of the specified type.
 * This will be set dependent on the audience in pi_activity.
 * @param $inquiry_id
 * @param $activity_type
 * @param $uid
 * @param $function
 * @return unknown_type
 */
function set_node_function_of_activity_type($inquiry_id, $activity_type, $uid, $function) {

	$query = "SELECT {pi_activity_status}.pas_id FROM {pi_activity_status} "
	. "LEFT JOIN {pi_activity} ON {pi_activity_status}.activity_id = {pi_activity}.activity_id "
	. "LEFT JOIN {pi_activity_actor} ON {pi_activity_actor}.inquiry_id = {pi_activity_status}.inquiry_id "
	. "AND {pi_activity_actor}.activity_id = {pi_activity_status}.activity_id "
	. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
	. "WHERE {pi_activity_status}.inquiry_id = %d "
	. "AND {pi_activity_status}.activity_id = %d "
	. "AND {pi_activity}.activity_type = '%s' "
	. "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid =  %d )";

	$items = db_query($query, $inquiry_id, $activity_id, $activity_type, $uid, $uid);

	while ($item = db_fetch_object($items))
	{
		$query = "UPDATE {pi_activity_status} SET node_function = '%s' WHERE pas_id = %d";
		db_query($query, $function, $item->pas_id);
	}
}

// ---------------------------------------------------------------------------

/**
 * Functions in this block are for adding, deleting and inspecting activities
 */

/**
 * Returns the activity_object from pi_activity table.
 * @param uint $activity_id the activity ID
 * @return object from db_fetch_object() for pi_activity table
 */
function load_activity($activity_id)
{
	$query = "SELECT * FROM {pi_activity} WHERE activity_id = %d";
	$activity = db_fetch_object(db_query($query, $activity_id));
	return $activity;
}




/**
 * This will insert or update depending on whether the activity_id is set in the array and
 * exists in the pi_activity table. $activity_array is a keyed array comprising:
 * $activity_array->activity_id
 * $activity_array->name
 * $activity_array->description
 * $activity_array->activity_type
 * $activity_array->node_type
 * $activity_array->parameters
 * $activity_array->destination
 * $activity_array->audience
 */
function save_activity($activity_array)
{
	if ($activity_array["activity_id"] != NULL)
	{
		//update
		$query = "UPDATE {pi_activity} SET name = '%s', description = '%s', activity_type = '%s',
						node_type = '%s', parameters = '%s', destination = '%s', 
						audience = '%s' WHERE activity_id = %d";
		db_query($query, $activity_array["name"], $activity_array["description"],
			$activity_array["activity_type"], $activity_array["node_type"],
			$activity_array["parameters"], $activity_array["destination"],
			$activity_array["audience"], $activity_array["activity_id"]);
	}
	else
	{
		//insert
		$query = "INSERT INTO {pi_activity} SET activity_id = %d, name = '%s', description = '%s',
							activity_type = '%s', node_type = '%s', parameters = '%s', 
							destination = '%s', audience = '%s' ";

		db_query($query, $activity_array["nid"], $activity_array["name"], $activity_array["description"],
		$activity_array["activity_type"], $activity_array["node_type"],
		$activity_array["parameters"], $activity_array["destination"],
		$activity_array["audience"]);
	}
}

/**
 * Deletes an activity. Will delete from pi_activity, pi_activity_actor,
 * pi_activity_status, pi_phase_activity, pi_activity_node
 * where activity_id field = $activity_id.
 * @param unknown_type $activity_id
 * @return unknown_type
 */
function delete_activity($activity_id)
{
	//delete from pi_activity
	$query = "DELETE FROM {pi_activity} WHERE activity_id = %d";
	db_query($query, $activity_id );

	//delete from pi_activity_actor
	$query = "DELETE FROM {pi_activity_actor} WHERE activity_id = %d";
	db_query($query, $activity_id );

	//delete from pi_activity_status
	$query = "DELETE FROM {pi_activity_status} WHERE activity_id = %d";
	db_query($query, $activity_id );

	//delete from pi_phase_activity
	$query = "DELETE FROM {pi_stage_phase_activity} WHERE activity_id = %d";
	db_query($query, $activity_id );

	//delete from pi_activity_node
	$query = "DELETE FROM {pi_activity_node} WHERE activity_id = %d";
	db_query($query, $activity_id );

	//$node = node_load( $activity_id );
	//echo "Activity ID: " . $activity_id;
}

/**
 * Returns array from pi_activity_actor table.
 * @param unknown_type $inquiry_id
 * @param unknown_type $activity_id
 * @param unknown_type $uid
 * @param unknown_type $gid
 * @return Ambigous <multitype:, unknown>
 */
function load_activity_actor($inquiry_id, $activity_id = NULL, $uid = NULL, $gid = NULL) {
	$query = "SELECT * FROM {pi_activity_actor} WHERE inquiry_id = %d ";
	$parameters[] = $inquiry_id;

	if ($activity_id)
	{
		$query .= " AND activity_id = %d";
		$parameters[] = $activity_id;
	}
	if ($uid)
	{
		$query .= " AND uid = %d";
		$parameters[] = $uid;
	}
	if ($gid)
	{
		$query .= " AND gid = %d";
		$parameters[] = $gid;
	}

	$items = db_query($query, $parameters);

	$activities = array();

	while ($item = db_fetch_object($items))
	{
		$activity = array();
		$activity["paa_id"] = $item->paa_id;
		$activity["inquiry_id"] = $item->inquiry_id;
		$activity["activity_id"] = $item->activity_id;
		$activity["uid"] = $item->uid;
		$activity["gid"] = $item->gid;
		$activities[] = $activity;
	};
	return $activities;
}

/**
 * This will insert.
 * $activity_actor_array is a keyed array comprising:
 * $activity_actor_array ->inquiry_id
 * $activity_actor_array ->activity_id
 * $activity_actor_array ->uid
 * $activity_actor_array ->gid
 */
function insert_activity_actor($activity_actor_array) {

	$query = "INSERT INTO {pi_activity_actor} SET inquiry_id = %d, activity_id = %d ";

	$parameters[] = $activity_actor_array["inquiry_id"];
	$parameters[] = $activity_actor_array["activity_id"] ;

	if (isset($activity_actor_array["uid"]))
	{
		$query .= ", uid = %d ";
		$parameters[] = $activity_actor_array["uid"];
	}
	if (isset($activity_actor_array["gid"]))
	{
		$query .= ", gid = %d ";
		$parameters[] = $activity_actor_array["gid"];
	}

	db_query($query, $parameters);
}

/**
 * This will update.
 * $activity_actor_array is a keyed array comprising:
 * $activity_actor_array ->inquiry_id
 * $activity_actor_array ->activity_id
 * $activity_actor_array ->uid
 * $activity_actor_array ->gid
 */
function update_activity_actor($actor) {

	$query = "UPDATE {pi_activity_actor} SET inquiry_id = %d , activity_id = %d , uid = %d , gid = %d WHERE paa_id = %d";

	db_query($query, $actor["inquiry_id"], $actor["activity_id"], $actor["uid"], $actor["gid"], $actor["paa_id"]);
}

/**
 * Returns array from pi_activity_status table objects.
 * @param unknown_type $inquiry_id
 * @param unknown_type $activity_id
 * @param unknown_type $uid
 * @return unknown|number
 */
function load_activity_status($inquiry_id, $activity_id = NULL, $uid = NULL)
{
	$activity_node_found = FALSE;
	$newitems = 0;

	$query = "SELECT {pi_activity_status}.* FROM {pi_activity_status} "
	. "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_status}.gid "
	. "WHERE inquiry_id = %d ";

	$parameters[] = $inquiry_id;

	if ($activity_id)
	{
		$query .= "AND activity_id = %d ";
		$parameters[] = $activity_id;
	}
	if ($uid)
	{
		$query .= "AND ( {pi_activity_status}.uid = %d OR {og_uid}.uid = %d ) ";
		$parameters[] = $uid;
		$parameters[] = $uid;
	}

	$query .= "ORDER BY pi_activity_status.pas_id DESC";

	$newitems = db_fetch_object(db_query($query, $parameters));	
	
	return $newitems;
}

/**
 * $activity_status_array is a keyed array comprising:
 * $activity_status_array ->inquiry_id
 * $activity_status_array ->activity_id
 * $activity_status_array ->uid
 * $activity_status_array ->gid
 * $activity_status_array ->node_function
 * $activity_status_array ->visible_status
 */
function save_activity_status($activity_status) {

	$set = "inquiry_id = %d , activity_id = %d ";
	$parameters[] = $activity_status->inquiry_id;
	$parameters[] = $activity_status->activity_id;

	if ($activity_status->uid)
	{
		$set .= ", uid = %d ";
		$parameters[] = $activity_status->uid;
	}
	if ($activity_status->gid)
	{
		$set .= ", gid = %d ";
		$parameters[] = $activity_status->gid;
	}

	$set .= ", node_function = '%s' , visible_status = '%s' ";
	$parameters[] = $activity_status->node_function;
	$parameters[] = $activity_status->visible_status;

	$query = "";
	if ($activity_status->pas_id != NULL)
	{
		//update
		$query = "UPDATE {pi_activity_status} SET ";
		$query .= $set;
		$query .= "WHERE {pi_activity_status}.pas_id = %d";
		$parameters[] = $activity_status->pas_id;
	}
	else
	{
		//insert
		$query .= "INSERT INTO {pi_activity_status} SET ";
		$query .= $set;
	}
	db_query($query, $parameters);
}

/**
 * Deletes all activities of that type that are visible to the specified user.
 * Will delete from pi_activity, pi_activity_actor, pi_activity_status,
 * pi_phase_activity, pi_activity_node where activity_id field = $activity_id.
 * This will be dependent on the audience in pi_activity.
 * @param $activity_type
 * @param $user
 * @return unknown_type
 */
function delete_activity_type_for_user($activity_type, $user) {

	//get all activity id's for $activity_type
	$query = "SELECT * FROM {pi_activity} WHERE activity_type = '%s'";
	$results = db_result(db_query($query, $activity_type));

	foreach($results as $r)
	{
		$query = "DELETE FROM {pi_activity} WHERE activity_id = %d";
		db_query($query, $r->activity_id );

		//delete from pi_activity_actor
		$query = "DELETE FROM {pi_activity_actor} WHERE activity_id = %d";
		db_query($query,$r->activity_id );

		//delete from pi_activity_status
		$query3 = "DELETE FROM {pi_activity_status} WHERE activity_id = %d";
		db_query($query,$r->activity_id );

		//delete from pi_phase_activity
		$query4 = "DELETE FROM {pi_phase_activity} WHERE activity_id = %d'";
		db_query($query,$r->activity_id );

		//delete from pi_activity_node
		$query5 = "DELETE FROM {pi_activity_node} WHERE activity_id = %d";
		db_query($query,$r->activity_id );
	}
}

/**
 * Create the url to a particular activity
 * 
 * TRICK 
 * added forced_link_function to support individually shared items
 * 
 * @param uint $inquiry_id
 * @param uint $stage_id
 * @param uint $phase_id
 * @param uint $activity_id
 * @param uint $uid
 * @return array ['url'] and ['title'] countaining link url (via drupal url()) and title (via chaeck_plain())
 */
function pi_activity_get_link($inquiry_id, $stage_id, $phase_id, $activity_id, $uid, $forced_link_function)
{
	$url = array('url'=>'', 'title'=>'');

	$image_path = drupal_get_path( 'module', 'pi' ) . '/images/';
	$status_image = array( 	'start' => 'creatable.png',
							'edit' => 'editable.png',
							'view' => 'viewable.png',
							'unavailable' => 'unavailable.png' );

	$loaded_activity = load_activity($activity_id);
	$visible_status = get_visible_status_of_activity($inquiry_id, $activity_id, $uid);
	
  /*
   * TRICK
   */
  $node_function = $forced_link_function ? $forced_link_function : get_node_function_of_activity($inquiry_id, $activity_id, $uid);

	switch ($loaded_activity->destination)
	{
		case "self":
			$destination = "destination=activity/" . $activity_id . "/view";
			break;
		case "phase":
			$destination = "destination=phase/" . $phase_id;
			break;
		default:
			$destination = "destination=inquiry/" . $inquiry_id;
			break;
	}

	// set editable nodes to be viewed by default
	if ($node_function == 'edit')
	{
		$node_function = 'view';
	}
	
	$url['url'] = "activity/" . $activity_id . "/" . $node_function;
	$url['destination'] = $destination;

	$teacher_gid = check_teacher_activity_for_inquiry_activity_user($inquiry_id, $activity_id, $uid);
  
  module_load_include('inc', 'pi_data', 'pi_data.content_options');
	$activity_name_text = pi_data_content_options_as_link_title($loaded_activity->name) . teacher_only_flag($teacher_gid);

	$label_icon = "<img width='12' src='" . $image_path . $status_image[$visible_status] . "'/>";


  $url['title'] = $activity_name_text . '&nbsp;' . $label_icon;

	return $url;
}



/**
 * Create a link to a particular activity with associated icon
 * 
 * TRICK: added $force_link_function to support individually shared items
 * 
 * @param uint $inquiry_id
 * @param uint $stage_id
 * @param uint $phase_id
 * @param uint $activity_id
 * @param uint $uid
 */
function build_activity_link($inquiry_id, $stage_id, $phase_id, $activity_id, $uid, $class = 'menu', $force_link_function = null) 
{
	$link = pi_activity_get_link($inquiry_id, $stage_id, $phase_id, $activity_id, $uid, $force_link_function);

	$options['html'] = TRUE;
	$options['query'] = $link['destination'];
	$options['attributes'] = array( 'class' => $class);
	
	$visible_status = get_visible_status_of_activity($inquiry_id, $activity_id, $uid);
	if($visible_status == 'unavailable') {
	 $output = t($link['title'].'<br/>');
	}
	else {
	 $output = l($link['title'], $link['url'], $options );
	}

	return $output;
}

/**
 * Returns an array of activities in order based on a sort of the posistion column
 * @param uint $inquiry_nid
 * @param uint $stage_nid
 * @param uint $phase_nid
 * @param uint $uid
 */
function pi_activity_get_activities_of_stage_phase_user($inquiry_nid, $stage_nid, $phase_nid, $uid)
{
	// Get the first activity of the phase, if one exists...
	// otherwise don't bother and make next point to next phase
	$phase_activities = get_activities_of_stage_phase_and_user($inquiry_nid, $stage_nid, $phase_nid, $uid);
	$activities_in_order = array();
	if(count($phase_activities)>0)
	{
		//order activities by position to find first
		$positions = array();
		foreach($phase_activities as $key => $activity)
		{
			$positions[$activity->position] = $key;
		}
		asort($positions);

		//now put the positions in an array with standard indexing
		foreach($positions as $phase_activities_key)
		{
			$activities_in_order[] = $phase_activities[$phase_activities_key];
		}
	}
	return $activities_in_order;
}

/**
 * Return the activity_id of an "Add $whatever"n activity for a given "Sort $whatever" function, if not return NULL
 * @param unknown_type $inquiry_nid The inquiry id that the activity belongs to
 * @param unknown_type $activity_ind The "Sort $whatever" activity id for the add activity.
 * @param unknown_type $uid The user id to find the add activity id for.
 */
function pi_activity_get_add_activity_for_sort_activity($inquiry_id, $activity_id, $uid) 
{
	$return_value = NULL;
	$sort_activity = load_activity($activity_id);
	
	if($sort_activity!=FALSE)
	{
		$type = node_get_types('type', $sort_activity->node_type);
		
		if(isset($type->add_node_type))
		{
			$node_type_to_find = $type->add_node_type;
			
			$phases = pi_phase_load_nids_for_user($inquiry_id, $uid);
			foreach ($phases as $phase)
			{
				$activities = get_activities_of_stage_phase_and_user($inquiry_id, NULL, $phase, $uid);
				foreach ($activities as $activity)
				{
					if($activity->node_type == $node_type_to_find)
					{
						$activity_status = load_activity_status($inquiry_id, $activity->activity_id, $uid);
						if ($activity_status->visible_status == 'start')
						{
							$return_value = $activity->activity_id;
							break;
						}
					}
				}
			}
		}
	}
	
	return $return_value;
}

/**
 * Generates add activity link
 */
function make_add_activity_link($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) 
{
	$add_activity_link = '';
	
	$add_activity_id = pi_activity_get_add_activity_for_sort_activity($inquiry_id, $activity_id, $uid);
	
	if ($add_activity_id) 
	{
		$activity_link = build_activity_link($inquiry_id, $stage_id, $phase_id, $add_activity_id, $uid);
		$add_activity_link = '<div class="add_activity_link">' . $activity_link . '</div>';
	}
	
	return $add_activity_link;
}

/**
 * Returns an array of nids of a node type available
 * to a user for a given inquiry
 * @param $uid The user to which the nodes are availeable
 * @param $inquiry_id the inquiry id that the nodes belong to
 * @param $type the node type to search for e.g. 'pi_data'
 *
 */
function pi_activity_get_available_nids_of_type($uid, $inquiry_id, $node_type)
{
	$return_nids = array();

	$query = "SELECT DISTINCT {node}.nid as nid FROM {node} AS node " .
		"LEFT JOIN {node_access} node_access ON node.nid = node_access.nid " .
		"LEFT JOIN {og_uid} og_uid ON node_access.gid = og_uid.nid " .
		"LEFT JOIN {pi_activity_node} pi_activity_node ON pi_activity_node.nid =  node.nid  " .
		"WHERE TYPE = '%s'  AND pi_activity_node.inquiry_id = %d " .
		"AND STATUS = '1' AND ((node.uid = %d) OR (og_uid.uid = %d) )";
	$result = db_query($query, $node_type, $inquiry_id, $uid, $uid);
	while($row = db_fetch_object($result))
	{
		$return_nids[] = $row->nid;
	}
	return $return_nids;
}


/**
 * This function takes an array of nids, loads the node and then maps the
 * node attributes to fields as per the key and value of $field_maping
 * if the node cann't be loaded it is dropped from the array therefore
 * if this is of concern to you, you should check array_keys($results)
 * with $nids
 * @param $nids array(uint) nids to get data from
 * @param $field_mapping mapping of node attribute to field e.g. array('weight' => '#weight')
 * @return array [nid][{field_mapping_value}] node->{field_mapping_key}
 */
function pi_activity_map_fields_from_nids($nids, $field_mapping)
{
	$result = array();
	foreach($nids as $nid)
	{
		$node = node_load($nid);
		if($node)
		{
			$node_fields = array();
			foreach($field_mapping as $field => $mapping)
			{
				$node_fields[$mapping] = $node->$field;
			}
		}
		$result[$nid] = $node_fields;
	}
	return $result;
}


?>
