<?php
// $Id: pi_stage.module,v 0.1 2010/03/17 MCP $

/**
 * @file  This module provides the implementation of the Inquiry Stage content type
 */

/**
 * Define the pi_stage node type
 */
function pi_stage_node_info() {
	return array(
		'pi_stage' => array(
			'name' => t('Inquiry Stage'), // Required.
			'module' => 'pi_stage',  // Required.
			'description' => t('This is the Inquiry Stage content type for nQuire'), // Required.
			'has_title' => TRUE,
			'title_label' => t('Stage Name'),
			'has_body' => TRUE,
			'body_label' => t('Stage Description'),
			'min_word_count' => 1,
		)
	);
}

/**
 * Define permissions available for pi_inquiry module
 */
function pi_stage_perm() {
	return array('create inquiry', 'edit own inquiry', 'edit any inquiry', 'delete own inquiry', 'delete any inquiry');
}

/**
 * Work out if a user has permission to do something with an Inquiry
 */
function pi_stage_access($op, $node, $account) {
  $is_author = $account->uid == $node->uid;
  switch ($op) {
    case 'create':
      // Allow if user's role has 'create inquiry' permission.
      return user_access('create inquiry', $account);

    case 'update':
      // Allow if user's role has 'edit own inquiry' permission and user is
      // the author; or if the user's role has 'edit any inquiry' permission.
      return user_access('edit own inquiry', $account) && is_author ||
        user_access('edit any inquiry', $account);
    case 'delete':
      // Allow if user's role has 'delete own inquiry' permission and user is
      // the author; or if the user's role has 'delete any inquiry' permission.
      return user_access('delete own inquiry', $account) && $is_author ||
        user_access('delete any inquiry', $account);
  }
}


/**
 * The form for adding/editing an Inquiry
 */
function pi_stage_form(&$node, $form_state) {
	// Get metadata for the node type which is defined in pi_stage_info()
	$type = node_get_types('type', $node);

	$form=array();
	
	if ($type->has_title)
	{
		$form['title'] = array(
			'#type' => 'textfield',
			'#title' => check_plain($type->title_label),
			'#weight' => 0,
			'#required' => TRUE,
			'#default_value' => $node->title,
		);
	}
	if ($type->has_body)
	{
		$form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
		$form['body_field']['body']['#rows'] = 6;
		$form['body_field']['teaser_include']['#access'] = FALSE;			
	}
	
	//Generate list of inquiry options from existing inquiries
	$inquiry_data = array();	
	// Add default value
	$inquiry_data['none'] = 'Select Inquiry...';
	
	$inquiry_nids = pi_inquiry_load_nids();
	foreach($inquiry_nids as $nid)
	{
		$inquiry = node_load($nid);
		if($inquiry)
		{
			$inquiry_data[$nid] = $inquiry->title;
		}
	} 
	if(count($inquiry_data)==0)
	{
		drupal_set_message(t('There are no inquiries defined, please create an inquiry before defining phases.'), 'error');		
	}
	
	//This section allows a dynamic list of stages to appear on the form to allow 
	// pi_stage_phase links to be created at the same time as a stage.
	// This uses the ahah_helper module
	ahah_helper_register($form, $form_state); 
	
	// If there's no value in storage and the node has one set, then use that
	if(isset($node->inquiry_nid) && !isset($form_state['storage']['inquiry_nid']))
	{
		$inquiry_nid_default_value = $node->inquiry_nid;
	}
	else
	{
		//If there's a value in storage use that
		if(isset($form_state['storage']['inquiry_nid']))
		{
			$inquiry_nid_default_value =  $form_state['storage']['inquiry_nid'];
		}
		else
		{
			//Otherwise, use 'none'
			$inquiry_nid_default_value = 'none';
		}
	}
	
	$form['inquiry_nid'] = array(
		'#type' => 'select',
		'#title' => t('Inquiry for stage'),
		'#required' => TRUE,
		'#weight' => 2,
		'#options' => $inquiry_data,
		'#allowed_inquiry_nids' => $inquiry_nids,
		'#default_value' => $inquiry_nid_default_value,
		'#element_validate' => array('pi_util_inquiry_nid_validate'),
		'#ahah' => array(
			'path'    => ahah_helper_path(array('stage_phases')),
			'wrapper' => 'stage-phases-wrapper',
		),
		 //this fixes some layout issues with the ahah throbber
		//'#attributes' => array('style'=>'overflow:auto;border: thin solid black;'),
		'#prefix' => "<div style='min-height:40px;'>",
		'#suffix' => '</div>'
	);	
	
	//This uses the generic submit callback provided by the ahah_helper module here
	// Is sets $form_state['rebuild'] = TRUE.
	// 'no-js' class is set so that the submit button will be shown if JS is disabled.
	$form['inquiry_nid']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Update phase list'),
	    '#weight' => 2,
		'#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'no-js'),
	);
	
	$stage_groups = pi_get_defined_group_nids();
	$all_defined_groups = array_keys(pi_flatten_grouped_item_list($stage_groups));
	$form['#allowed_stage_actors'] = $all_defined_groups;	
	$group_names['none'] = "Select a group...";
	$group_names = array_replace($group_names, pi_util_get_names_from_nids($all_defined_groups));
	
	if(isset($node->inquiry_nid))
	{
		$inquiry = node_load($node->inquiry_nid);
		$stage_actor_default_value = $inquiry->inquiry_actor;
	}
	else
	{ 
		$stage_actor_default_value = 'none';
	}
	$form['stage_actor'] = array(
		'#type' => 'select',
		'#title' => t('Who is this stage for'),
		'#description' => t('Select the group that will be see this stage'),
		'#weight' => 2,
		'#default_value' =>  isset($node->stage_actor) ? $node->stage_actor : $stage_actor_default_value,
		'#options' => $group_names,
	);
	
	$form['stage_phases'] = array(
		'#type' => 'fieldset',
		'#title'  => t('Select the phases to be included in this stage'),
		'#collapsible' => FALSE,
		'#tree' => TRUE,
	    '#weight' => 3,
		'#prefix' => "<div id='stage-phases-wrapper'>",
		'#suffix' => '</div>',
	);


	// Based on the selection above generate the select boxes for phases
	$form['stage_phases']['phases'] = pi_stage_form_generate_phase_checkboxes($node->stage_phases['phases'], $inquiry_nid_default_value);

	//Add some javascript to load the phases if needed on page load (e.g. when the browser pre-selects a value) 
	//drupal_add_js('document.onLoad=function(){$[\'edit-inquiry-nid\'].onChange();}', 'inline');	
	return $form;
}

/**
 * Generate the ['stage_phases']['phases'] checkboxes for a given inquiry nid.
 * this is used in this module and also called by pi_authoring using hook_form_FORM-ID_alter()
 * as it can't run the ajaca call do do this
 * @param array uint nids of phases belonging to node
 * @param uint $inquiry_nid nid of the inquiry to show generate boxes for or 'none' for blank
 * @return array describing the checkboxes form element
 */
function pi_stage_form_generate_phase_checkboxes($node_stage_phases, $inquiry_nid)
{
// Based on the selection above generate the select boxes for phases
	$phase_select_boxes = array();
	$phase_select_boxes_defaults = array();
	if($inquiry_nid != 'none')
	{
		$inquiry_phase_nids = pi_phase_load_nids($inquiry_nid);
		foreach($inquiry_phase_nids as $nid)
		{
			$phase = node_load($nid);
			if($phase !== FALSE)
			{
				$phase_select_boxes[$phase->nid] = check_plain($phase->title);				
			}
			if($node_stage_phases[$nid]===TRUE)
			{
				$phase_select_boxes_defaults[] = $nid;
			}
		}
	}

	$form_element =  array(
		'#type' => 'checkboxes',
	    '#weight' => 3,
		'#options' => $phase_select_boxes,
		'#default_value' => $phase_select_boxes_defaults,
	);
	return $form_element;
}


/**
 * hook_form_alter - changes the form to change it from default node layout
 */
function pi_stage_form_pi_stage_node_form_alter(&$form, &$form_state) {
		$form['menu']['#weight'] = 4;
		if(isset($form_state['post']))
		{
			ahah_helper_register($form, $form_state);
			if($form_state['submitted'])
			{
				$form['stage_phases']['#prefix'] = '';
				$form['stage_phases']['#suffix'] = '';
			}
		}
		// ISSUE 2: content cannot be saved by another user
		/**
		 * @TODO: Figure out the main cause why this happens. It has something
		 * to do with staying on the node form instead of redirecting to the view.
		 **/
		$form['changed']['#default_value'] = $_SERVER['REQUEST_TIME'];
}



/**
 * This is the validation function to make sure that pi_stage_actor.gid is a valid group
 * @param unknown_type $element 
 * @param unknown_type $form_state
 */
function pi_stage_form_stage_actor_validate($element, $form_state)
{
	if(!in_array($form_state['values']['stage_actor'], $element['#allowed_stage_actors']))
	{
		form_error($element, t('The selected stage actor group is not valid, please choose a group from the list.'));				
	}
}


/**
 * This is the hook_validate function to make sure that the given  nids are phases and are in the given
 *  inquiry for the selected stage
 * @param $element
 * @param $form_state
 */
function pi_stage_form_validate($node, &$form)
{
	foreach($element['phases'] as $phase_nid)
	{
		$proposed_phase = load_node($phase_nid);
		if($proposed_phase==FALSE)
		{
			form_set_error("phases][$phase_nid", "The selected item does not appear to exist.");
		}
		else
		{
			if($proposed_phase['type']!='pi_phase')
			{
				form_set_error("phases][$phase_nid", "The selected item does not appear to be a phase.");
			}
			else
			{
				if($proposed_phase->inquiry_ind != $node->inquiry_nid)
				{
					form_set_error("phases][$phase_nid", "This phase doesn't appear to be in the selected inquiry.");					
				}
			}
		}
	}
}

/**
 * hook_insert() - INSERT command for a new inquiry stage, also creates links to phases
 */
function pi_stage_insert($node) {
	// Query the database first to set the weight to place the item at the end of lists.
	// If the query result is NULL then the the field will to default=0 since the weight
	// column is defined with NOT NULL DEFAULT 0   
	$initial_weight = db_result(db_query("SELECT MAX(weight)+1 FROM {pi_stage} WHERE inquiry_nid=%d", $node->inquiry_nid));

	db_query("INSERT INTO {pi_stage} (nid, vid, inquiry_nid, weight) VALUES (%d, %d, %d, %d)",
		$node->nid, $node->vid, $node->inquiry_nid, $initial_weight);
	
	foreach($node->stage_phases['phases'] as $phase_nid => $value)
	{
		if($value==TRUE)
		{
			db_query("INSERT INTO {pi_stage_phase} (stage_id, phase_id) VALUES (%d, %d)",
				$node->nid, $phase_nid);
		}
	}
	//Then add stage actor
	pi_stage_set_actor($node->nid, $node->stage_actor);		
}

/**
 * hook_update - UPDATE command for an existing inquiry stage, 
 * also adds or removes the pi_stage_phase roes where appropriate
 */
function pi_stage_update($node) {
	if ($node->revision)
	{
		// New revision; treat it as a new record.
		pi_inquiry_insert($node);
	}
	else
	{
		$old_stage = node_load($node->nid);
		db_query("UPDATE {pi_stage} SET inquiry_nid = %d, weight = %d WHERE vid = %d",
			$node->inquiry_nid, $node->weight, $node->vid);	
		// Since pi_stage_phase has a unique id and this is used on other tables, when updating the
		//  phases for a stage you need to work out which already exist and need removing, which 
		//  already exist and should be unchanged, and which need to be created.
		//  This preserves psp_id for the pi_stage_phases 
		
		// First of all, if the inquiry has changed, all the current stage_phases should be dropped
		//  so check $node->inquiry_nid and $old_stage->inquiry_nid; if they are not the same then
		//  delete all the related pi_stage_phases from the database 
		if($node->inquiry_nid != $old_stage->inquiry_nid)
		{
			db_query('DELETE FROM {pi_stage_phase} WHERE (stage_id = %d)', $node->nid);			
		}
		
		// The form returns an array stage_phases['phases'] with all the phases available to the stage
		// containing TRUE or FALSE indicating whether they should be included, so use this to iterate through
		// the phases and update pi_stage_phase accordingly 
		foreach($node->stage_phases['phases'] as $phase_nid => $value)
		{
			// $value is true if the phase should be included 
			if($value==TRUE)
			{
				// if the phase is to be included, and it was already included it will be 
				//  in $old_stage->phases  (see pi_stage_load() below)
				// if it is not, then it should be inserted.
				if(!in_array($phase_nid, $old_stage->phases))
				{
					db_query("INSERT INTO {pi_stage_phase} (stage_id, phase_id) VALUES (%d, %d)",
						$node->nid, $phase_nid);
				}
			}
			else
			{
				// If the phase is not to be included, then check to see if it needs to be removed
				//  by looking at $old_stage->phases; if it is in the array, it needs to be removed
				//  from the database
				if(in_array($phase_nid, $old_stage->phases))
				{
					db_query('DELETE FROM {pi_stage_phase} WHERE (stage_id = %d AND phase_id = %d)', 
						$node->nid, $phase_nid);
				}				
			}
		}
	}
	pi_stage_set_actor($node->nid, $node->stage_actor);		
}


/**
 * 
 * Insert or update stage actor in the pi_inquiry_actor table
 * @param uint $stage_id nid
 * @param uint $actor_id nid of an og/nquire group
 */
function pi_stage_set_actor($stage_id, $actor_id)
{
	$do_update = pi_db_ensure_unique('pi_stage_actor', 'stage_id', $stage_id);
	if($do_update)
	{
		$query = "UPDATE {pi_stage_actor} SET gid=%d WHERE stage_id=%d";
	}
	else
	{
		$query = "INSERT INTO {pi_stage_actor} (gid, stage_id) VALUES (%d, %d)";		
	}
	//pi_debug_message(sprintf($query, $actor_id, $stage_id));
	db_query($query, $actor_id, $stage_id);
}

/**
 * hook_nodeapi().
 *
 * When a node revision is deleted, we need to remove the corresponding record
 * from our table. The only way to handle revision deletion is by implementing
 * hook_nodeapi().
 */
function pi_stage_nodeapi(&$node, $op, $teaser, $page) {
	switch ($op)
	{
		case 'delete revision':
			// Notice that we're matching a single revision based on the node's vid.
			db_query('DELETE FROM {pi_stage} WHERE vid = %d', $node->vid);
			break;
		break;
	}
}

/**
 * hook_delete() DELETE command for an inquiry stage
 */
function pi_stage_delete(&$node) {
	// Delete the related information we were saving for this node.
	db_query('DELETE FROM {pi_stage} WHERE nid = %d', $node->nid);
	db_query('DELETE FROM {pi_stage_phase} WHERE stage_id = %d', $node->nid);
	db_query('DELETE FROM {pi_stage_actor} WHERE stage_id = %d', $node->nid);
}

/**
 * Custom loader for pi_stage type called via node_load
 */
function pi_stage_load($node) {
	$data = db_fetch_object(db_query('SELECT inquiry_nid, weight FROM {pi_stage} WHERE vid = %d', $node->vid));
	$phase_nids = array();
	$psp_ids = array();
	$result = db_query("SELECT phase_id, psp_id from {pi_stage_phase} WHERE stage_id = %d", $node->nid);
	while($row=db_fetch_array($result))
	{
		$phase_nids[$row['phase_id']] = TRUE;
		$psp_ids[$row['phase_id']] = $row['psp_id'];
		
	}
	$data->stage_phases['phases'] = $phase_nids;
	$data->phases = array_keys($phase_nids);
	$data->stage_phase_ids = $psp_ids;
	$query = "SELECT gid FROM {pi_stage_actor} WHERE stage_id = %d ORDER BY psa_id ASC LIMIT 1";
	$result = db_fetch_array(db_query($query, $node->nid));
	$data->stage_actor = $result['gid'];
	return $data;
}



/**
 * Returns array of stage_id, and name values for given inquiry_id
 */
function pi_stage_load_nids($inquiry_nid) {
	$query = "SELECT nid FROM {pi_stage} WHERE inquiry_nid = %d ORDER BY weight ASC";
	$result = db_query($query, $inquiry_nid);
	$nids = array();
	while($row = db_fetch_array($result))
	{
		$nids[] = $row['nid'];
	}
	return $nids;
}


/**
 * Queries the node database to provide a list of nids referring to stages in an
 * inquiry given by $inquiry_nid, with user a member of the stage actor groups
 * Use node_load($nid) to then access the stage details
 * @param uint $inquiry_nid the nid of the inquiry to load the stages for
 * @param uint $unid The uid of the user to load the stages for
 * @return array of nids referring to pi_stage nodes in the given inquiry
 */
function pi_stage_load_nids_for_user($inquiry_nid, $uid)
{
	$query = "SELECT DISTINCT {pi_stage}.nid AS nid FROM {pi_stage} AS pi_stage " .
		"LEFT JOIN {pi_stage_actor} AS pi_stage_actor ON pi_stage_actor.stage_id=pi_stage.nid " .
		"LEFT JOIN {og_uid} AS og_uid ON og_uid.nid = pi_stage_actor.gid " .
		"WHERE pi_stage.inquiry_nid = %d " .
		"AND og_uid.uid = %d";	
	$result = db_query($query, $inquiry_nid, $uid);
	$stage_nodes = array();
	while($nid=db_result($result))
	{
		$stage_nodes[] = $nid;
	}
	return $stage_nodes;
}


/**
 * Returns an array containing the stage_nids of the inquiry for that user.
 * The stages are ordered by weight.
 */
function get_stages_of_inquiry_and_user($inquiry_id, $uid) {
	drupal_set_message('get_stages_of_inquiry_and_user($inquiry_id, $uid) should be replaced with pi_stage_load_nids_for_group($inquiry_id, $uid)', 'warning');
	return pi_stage_load_nids_for_user($inquiry_nid, $uid);
}


/**
 * Builds the view for the stage
 * @todo Add a detailed view to be used in the whole system
 */
function pi_stage_view($node, $teaser = FALSE, $page = FALSE) {
	// If $teaser is FALSE, the entire node is being displayed.
	if (!$teaser)
	{
		//Use Drupal's default node view.
		$node = node_prepare($node, $teaser);
		
		// render the phase activities using a theme function
		$node->content['activities'] = array(
			'#value' => theme('stage_activities', $node),
			'#weight' => 2,
		);
		// Add more involved phase layout here
	}

	// If $teaser is true, node is being displayed as a teaser,
	// in this case, just show the description and none of the rest of the inquiry stuff
	if ($teaser) 
	{
		//Use Drupal's default node view.
		$node = node_prepare($node, $teaser);
	}
	return $node;
}

/**
 * Declare theme functions for pi_inquiry
 */
function pi_stage_theme() {
	return array(
  		'stage_activities' => array(
			'arguments' => array('node'),
		),
	);
}


/**
 * Theme function to display the inquiry description
 * @param drupal node data $node Inquiry node details.
 */
function theme_stage_activities($node) {
	$output = '<div class="phase-activities">';
	$output .= "Stage activities";
	$output .= '</div>';
	return $output;
}
