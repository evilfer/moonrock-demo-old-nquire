<?php

/**
 * @file This provides the inquiry authoring wizard which allows the user to create and
 * edit inquiries.  The authoring system appears in the navigation menu. 
 */


/**
 * This is executed before every page request and provides the functionality to include particular files,
 * e.g. custom css and javascript files. 
 */
function pi_authoring_init() {
    drupal_add_css(drupal_get_path('module', 'pi_authoring') .'/pi_authoring.css');
}



/**
 * This implements the theme hook for pi_authoring which defines the available theme
 * functions within this module
 * @return array of theme names and arguments
 */
function pi_authoring_theme() {
	return array(
		'pi_authoring_order_inquiries_form' => array(
			'arguments' => array('form' => NULL),
			'file' => 'pi_authoring.inquiry_edit.inc',
		),
		'pi_authoring_inquiry_phases' => array(
			'file' => 'pi_authoring.inquiry_edit.inc',
		),
		'pi_authoring_order_phases_form' => array(
			'arguments' => array('form' => NULL),
			'file' => 'pi_authoring.inquiry_edit.inc',
		),
		'pi_authoring_inquiry_stages' => array(
			'file' => 'pi_authoring.inquiry_edit.inc',
		),
		'pi_authoring_order_stages_form' => array(
			'arguments' => array('form' => NULL),
			'file' => 'pi_authoring.inquiry_edit.inc',
		),
		'pi_authoring_admin_groups_form' => array(
			'arguments' => array('form' => NULL),
			'file' => 'pi_authoring.admin_groups.inc',
		),
		'pi_authoring_admin_group_hierarchy_list' => array(
			'arguments' => array('group_order' => NULL, 'group_list_by_type' => NULL, 'all_groups' => NULL),
			'file' => 'pi_authoring.admin_group_hierarchy.inc',
		),
		'pi_authoring_admin_group_hierarchy_form_class' => array(
			'arguments' => array('form' => NULL),
			'file' => 'pi_authoring.admin_group_hierarchy.inc',
		),
		'pi_authoring_admin_group_hierarchy_form_group' => array(
			'arguments' => array('form' => NULL),
			'file' => 'pi_authoring.admin_group_hierarchy.inc',
		),
		'pi_authoring_admin_group_hierarchy_form_full' => array(
			'arguments' => array('form' => NULL, 'class_or_group'=>''),
			'file' => 'pi_authoring.admin_group_hierarchy.inc',
		)		
	);
}

/**
 * Implementation of _help hook for pi_authoring
 */
function pi_authoring_help($path, $arg) {

	$output = '';

	switch ($section) {
		case "admin/help#pi_authoring":
			$output = '<p>'.  t("Test Authoring for Basic Inquiry Authoring"). '</p>';
			break;
	}

	return $output;
}

/**
 * Implementation of _perm hook i.e. who has access to the authoring pages
 */
function pi_authoring_perm() {
	return array('access pi_authoring content');
}

/**
 * Implementation of _menu hook which has a info page displaying a table of swim lanes
 * similar to the paper based one for authoring and a set of numbered links to define
 * elements of the inquiry i.e. the inquiry, phases, stages and activities along with
 * audience, groups and individual users who will be able to access them
 */
function pi_authoring_menu() {
	$items = array();
	
	// Add some items to the administration menu
	$items['admin/nquire'] = array(
      'title' => 'nQuire Inquiry Authoring',
	  'position' => 'right',
	  'weight' => -5,
  	  'page callback' => 'pi_authoring_view',
      'access arguments' => array('administer site configuration'),
	);

	$items['admin/nquire/groups'] = array(
		'title' => 'Set up groups',
		'file' => 'pi_authoring.admin_groups.inc',
		'page callback' => 'pi_authoring_admin_groups',
		'type' => MENU_NORMAL_ITEM,
    	'access arguments' => array('administer site configuration'),
		'weight' => 1,
	);
	
	$items['admin/nquire/group_hierarchy'] = array(
		'title' => 'Organise group hierarchy',
		'file' => 'pi_authoring.admin_group_hierarchy.inc',
		'page callback' => 'pi_authoring_admin_group_hierarchy_view',
		'type' => MENU_NORMAL_ITEM,
    	'access arguments' => array('administer site configuration'),
		'weight' => 2,
	);

		$items['admin/nquire/group_hierarchy/view'] = array(
		'title' => 'View',
		'file' => 'pi_authoring.admin_group_hierarchy.inc',
		'page callback' => 'pi_authoring_admin_group_hierarchy_view',
		'type' => MENU_DEFAULT_LOCAL_TASK,
    	'access arguments' => array('administer site configuration'),
		'weight' => 1,
	);
		
	$items['admin/nquire/group_hierarchy/edit-class'] = array(
		'title' => 'Assign Classes',
		'file' => 'pi_authoring.admin_group_hierarchy.inc',
		'page callback' => 'pi_authoring_admin_group_hierarchy_edit',
		'page arguments' => array('class'),
		'type' => MENU_LOCAL_TASK,
    	'access arguments' => array('administer site configuration'),
		'weight' => 2,
	);
				
	$items['admin/nquire/group_hierarchy/edit-group'] = array(
		'title' => 'Assign Groups',
		'file' => 'pi_authoring.admin_group_hierarchy.inc',
		'page callback' => 'pi_authoring_admin_group_hierarchy_edit',
		'page arguments' => array('group'),
		'type' => MENU_LOCAL_TASK,
    	'access arguments' => array('administer site configuration'),
		'weight' => 3,
	);
		
	
	
	
	
	$items['admin/nquire/inquires'] = array(
		'title' => 'Inquiries',
		'description' => 'Manage Inquiries.',
		'page callback' => 'pi_authoring_view',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('administer site configuration'),
		'weight' => 3,
	);


	// NOTE: If you change the url below also change pi_authoring_form_pi_inquiry_node_form_alter()
	$items['inquiry/add'] = array(
    	'title' => 'Add',
		'file' => 'pi_authoring.inquiry_add.inc',
		'page callback' => 'pi_authoring_inquiry_add',
		'type' => MENU_CALLBACK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
	);
		
	
	// NOTE: If you change the url below also change pi_authoring_form_pi_inquiry_node_form_alter()
	$items['inquiry/%node/edit'] = array(
    	'title' => 'Edit',
		'file' => 'pi_authoring.inquiry_edit.inc',
		'page callback' => 'pi_authoring_inquiry_node_edit',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
	);
	

	$items['inquiry/%node/edit/view'] = array(
		'title' => 'Edit Details',
		'file' => 'pi_authoring.inquiry_edit.inc',
		'page callback' => 'pi_authoring_inquiry_node_edit',
		'page arguments' => array(1),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 0,
	);

	$items['inquiry/%node/edit/phases'] = array(
		'title' => 'Edit Phases',
		'file' => 'pi_authoring.inquiry_edit.inc',
		'page callback' => 'pi_authoring_inquiry_phases',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
	);
	
	$items['inquiry/%node/edit/stages'] = array(
		'title' => 'Edit Stages',
		'file' => 'pi_authoring.inquiry_edit.inc',
		'page callback' => 'pi_authoring_inquiry_stages',
		'page arguments' => array(1),
		'type' => MENU_LOCAL_TASK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 2,
	);

  $items['inquiry/%node/edit/measures'] = array(
    'title' => 'Edit Measures',
    'page callback' => 'pi_measure_filter_call_form',
    'page arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'access_callback' => TRUE,
    'access arguments' => array('access pi_authoring content'),
    'weight' => 3,
  );

  // NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
	$items['inquiry/%node/phase/add'] = array(
		'title' => 'Add a phase',
		'file' => 'pi_authoring.inquiry_phase_add.inc',
		'page callback' => 'pi_authoring_inquiry_phase_add',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
	);
	
	
	// NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
	$items['inquiry/%node/stage/add'] = array(
		'title' => 'Add a stage',
		'file' => 'pi_authoring.inquiry_stage_add.inc',
		'page callback' => 'pi_authoring_inquiry_stage_add',
		'page arguments' => array(1),
		'type' => MENU_CALLBACK,
		'access_callback' => TRUE,
		'access arguments' => array('access pi_authoring content'),
		'weight' => 1,
	);
	
	
	// NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
	$items['phase/%node/inquiry'] = array(
		'title' => 'View phase inquiry',
		'file' => 'pi_authoring.phase.inc',
		'page callback' => 'pi_authoring_phase_inquiry',
	    'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	// NOTE: If you change the url below also change pi_authoring_form_pi_stage_node_form_alter()
	$items['stage/%node/inquiry'] = array(
		'title' => 'View stage inquiry',
		'file' => 'pi_authoring.stage.inc',
		'page callback' => 'pi_authoring_stage_inquiry',
	    'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	
	$items['phase/%node/view'] = array(
		'title' => 'View',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 1
	);
	// NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
	$items['phase/%node/edit'] = array(
		'title' => 'Edit',
		'file' => 'pi_authoring.phase.inc',
		'page callback' => 'pi_authoring_phase_edit',
	    'page arguments' => array(1),
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2
	);

	// NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
	$items['phase/%node/edit/details'] = array(
		'title' => 'Edit Details',
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => 1
	);
	
	// NOTE: If you change the url below also change pi_authoring_form_pi_phase_node_form_alter()
	$items['phase/%node/edit/activities'] = array(
		'title' => 'Edit Activities',
		'file' => 'pi_authoring.phase.inc',
		'page callback' => 'pi_authoring_phase_edit',
	    'page arguments' => array(1),
		'access arguments' => array('access pi_authoring content'),
		'type' => MENU_LOCAL_TASK,
		'weight' => 2
	);
	
	
	
	// NOTE: If you change the url below also change pi_authoring_form_pi_stage_node_form_alter()
	$items['stage/%node/edit'] = array(
		'title' => 'View stage inquiry',
		'file' => 'pi_authoring.stage.inc',
		'page callback' => 'pi_authoring_stage_edit',
	    'page arguments' => array(1),
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	
	
	// NOTE: If you change the url below also change pi_authoring_form_pi_inquiry_node_form_alter()
	$items['piauthoring'] = array(
	  'title' => 'Inquiry Authoring',
  	  'page callback' => 'pi_authoring_view',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/activities'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => '5. Authoring Activities',
  	 'page callback' => 'pi_authoring_new_activities',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/1'] = array(
		//'path' => 'piauthoring/newinquiry/stages',
		'title' => '5.1. Author Place Holders',
		'page callback' => 'pi_authoring_new_activities_placeholder',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('access pi_authoring content'),
	);

	$items['piauthoring/activities/1/%node'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
  	 'page callback' => 'pi_authoring_new_activities_placeholder',
	 'page arguments' => array(3),
  	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/3'] = array(
	    'title' => '5.3. Author Real Activities',
		'page arguments' => array(NULL),
		'page callback' => 'pi_authoring_new_activities_real',
		'type' => MENU_NORMAL_ITEM,
		'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/3/%node'] = array(
		'page callback' => 'pi_authoring_new_activities_real',
		'page arguments' => array(3),
		'type' => MENU_CALLBACK,
		'access arguments' => array('access pi_authoring content'),
	);

	
	$items['piauthoring/activities/4/%node'] = array(
		'title' => 'Add Activity',
		'page callback' => 'pi_authoring_new_activities_placeholder_add',
		'page arguments' => array(3),
		'type' => MENU_CALLBACK,
		'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/5'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Edit Activity',
  	 'page callback' => 'pi_authoring_new_activities_real_edit',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/6'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Include Activity',
  	 'page callback' => 'pi_authoring_new_activities_include',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/7'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Move Stage UP',
  	 'page callback' => 'move_stage_up_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/8'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Move Stage Down',
  	 'page callback' => 'move_stage_down_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/9'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Move Phase UP',
  	 'page callback' => 'move_phase_up_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/10'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Move Phase Down',
  	 'page callback' => 'move_phase_down_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/11'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Move Activity UP',
  	 'page callback' => 'move_activity_up_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/12'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Move Activity UP',
  	 'page callback' => 'move_activity_down_one_position',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/13'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Delete Activity',
  	 'page callback' => 'delete_activity_link',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/activities/14'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => 'Un-include Activity',
  	 'page callback' => 'uninclude_activity_link',
	 'type' => MENU_CALLBACK,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/grouping'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => '7. Advanced Grouping',
  	 'page callback' => 'pi_authoring_advanced_groups',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/grouping/1'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => '7.1. Define Groups',
  	 'page callback' => 'pi_authoring_advanced_groups_og',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);
	
	$items['piauthoring/grouping/2'] = array(
	//'path' => 'piauthoring/newinquiry/stages',
     'title' => '7.2. Create Grouping',
  	 'page callback' => 'pi_authoring_advanced_groups_create',
	 'type' => MENU_NORMAL_ITEM,
     'access arguments' => array('access pi_authoring content'),
	);

	return $items;
}

/**
 * This uses hook_form_FORM-ID_alter() set the redirect for editing the inquiry details when 
 * accessed via the inquiry editing page rather than the node editing page.
 * It alters $from['redirect'] based on the url that the form was accessed via  
 * @param $form
 * @param $form_state
 */
function pi_authoring_form_pi_inquiry_node_form_alter(&$form, &$form_state)
{
	//Strip the request url of the preceeding drupal stuff base_url and ?q=/
	// so that it's possible to work out whether the page request was from /inquiry/%inquiry/edit
	// or from /node/%node/edit
	$drupal_path = str_replace(base_path(), '', request_uri());
	$drupal_path = str_replace('?q=', '', $drupal_path);
	
	// Split the string into parts to get the inquiry id if it exists...
	$path_parts = explode('/', $drupal_path);
	
	// Look for /inuqiry/{number}/edit
	// First see if the array is big enough to avoid looking at null refs.
	
	if(count($path_parts)>= 3)
	{
		// Now check all the parts for vaildity... inquiry NUMBER edit
		if( (strcasecmp($path_parts[0], 'inquiry')==0) && is_numeric($path_parts[1]) )
		{
			// the last part of the url is a special case since it could be either
			// /inquiry/%inquiry/edit OR
			// /inquiry/%inquiry/edit?some=query&string=too OR
			// /inquiry/%inquiry/edit&some=query&string=too
			$valid_strings = array('edit', 'edit?', 'edit&');
			if(in_array(strtolower($path_parts[2]), $valid_strings))
			{
					$nid = $form['nid']['#value'];
					// check if nid is set
					if(isset($nid))
					{
						// if it was from the authoring edit page, then get the node id and redirect back
						// to the authoring page for it...
						$form['#redirect'] = "inquiry/$nid";
					}
				}
		}
	}
	else
	{
		//Otherwise see if it's the new inquiry form, and we have no idea what the new nid will be,
		// so go to the standard  authoring page so Author can click through to it
		// (and maybe set in order as well).	
		if(count($path_parts)>= 2)
		{
			// as above the final bit in inquiry/add could end in ? or & so check that
			$valid_strings = array('add', 'add?', 'add&');
			if((strcasecmp($path_parts[0], 'inquiry')==0) &&
			in_array(strtolower($path_parts[1]), $valid_strings))
			{
				$form['#redirect'] = 'piauthoring/';
			}
		}
	}
	//otherwise if it's not related to inquiry editing then don't touch the form
}

/**
 * This function uses hook_form_FORM-ID_alter() to set the redirect and the inquiry field as hidden
 * when adding/editing a phase via the nQuire authoring system (detected via checking the url)
 * This deas with 2 curcumstances:
 * 	(1) Adding a new phase to an inquiry via the /inquiry/%inquiry/phase/add url
 *    -> alter form to hide inquiry selection dropdown
 *    -> redirect to /inquiry/%inquiry/phases on completion
 *  (2) Editing a phase via /phase/%phase/edit
 *    -> redirect to /inquiry/%inquiry/phases on completion 
 *    		n.b. this isn't directly possible given that inquiry_id isn't known at this stage
 *    			in the form lifecycle so the page is routed via "phase/inquiry" which will redirect to
 *    			the inquiry page automatically (clever, huh?)
 *    
 */
function pi_authoring_form_pi_phase_node_form_alter(&$form, &$form_state)
{
	//Strip the request url of the preceeding drupal stuff base_url and ?q=/
	// so that it's possible to work out whether the page request was from /inquiry/%inquiry/phase/add
	// or from /node/%node/edit
	$drupal_path = str_replace(base_path(), '', request_uri());
	$drupal_path = str_replace('?q=', '', $drupal_path);
	
	// Split the string into parts to get the inquiry id if it exists...
	$path_parts = explode('/', $drupal_path);
	
	// Look for /inuqiry/{number}/phase/add
	// First see if the array is big enough to avoid looking at null refs.
	if(count($path_parts)>= 4)
	{
		// Now check all the parts for vaildity... inquiry NUMBER phase add
		if( (strcasecmp($path_parts[0], 'inquiry')==0) && 
			is_numeric($path_parts[1]) &&
			(strcasecmp($path_parts[2], 'phase')==0) )
			{
				// the last part of the url is a special case since it could be either
				// /inquiry/%inquiry/phase/add OR 
				// /inquiry/%inquiry/phase/add?some=query&string=too OR
				// /inquiry/%inquiry/phase/add&some=query&string=too
				$valid_strings = array('add', 'add?', 'add&'); 
				if(in_array(strtolower($path_parts[3]), $valid_strings))
				{
					// finall check that it's a valid inquiry id
					$potential_inquiry_id = $path_parts[1];
					$potential_inquiry_node = node_load($potential_inquiry_id);
						
					//check it's loaded something, then check it's type...
					if(($potential_inquiry_node !== FALSE))
					{
						if($potential_inquiry_node->type == 'pi_inquiry')
						{
							// Hurrah, it pased the test: it's an inquiry node
							// Make the inquiry selection on the form in advance and hide it
							$form['inquiry_nid']['#type'] = 'hidden';
							$form['inquiry_nid']['#value'] = $potential_inquiry_node->nid;
							$form['phase_actor']['#value'] = $potential_inquiry_node->inquiry_actor;
							// Set redirection to go to the inquiry phase page
							$form['#redirect'] = "inquiry/$potential_inquiry_id/edit/phases";
						}
						else
						{
							// It wasn't a valid inquiry node, so fall back to standard phase editing page
							drupal_set_message(t('An inquiry id ('. check_plain($potential_inquiry_id) . ') was specified for this phase, but the id didn\'t refer to a valid inquiry node; select an inquiry from the form instead.'), 'warning');
							ob_start();
							var_dump($path_parts);
							drupal_set_message('<pre>' . check_plain(ob_get_clean()) . '</pre>');
						}
					}
					else
					{
						// It wasn't a node, so fall back to standard phase editing page
						drupal_set_message(t('An inquiry id ('. check_plain($potential_inquiry_id) . ') was specified for this phase, but there as no item with that id; select an inquiry from the form instead.'), 'warning');
					}
				}
			}
		// ELSE... don't change the form or bother wirh an error message as the url was so wrong it's
		//   probably not intended to make this work!			
	}
	else
	{
		// Is it a /phase/%phase/edit url 
		if(count($path_parts)>= 3)
		{
			// Now check all the parts for vaildity... inquiry NUMBER phase add
			// Now check all the parts for vaildity... inquiry NUMBER edit
			if( (strcasecmp($path_parts[0], 'phase')==0) && is_numeric($path_parts[1]) )
			{
				// the last part could end in ? and & as well:
				$valid_strings = array('edit', 'edit?', 'edit&');
				if(in_array(strtolower($path_parts[2]), $valid_strings))
				{
					// Get the node id of the form being edited...
					$nid = $form['nid']['#value'];
					// check if nid is set
					if(isset($nid))
					{
						// if it was from the authoring edit page, then get the node id and redirect back
						// to the authoring page for it... via the special redirect page (see function comment)
						$form['#redirect'] = "phase/$nid/inquiry";
					}
				}
			}
		}
	}
	//otherwise if it's not related to inquiry editing then don't touch the form
}


/**
 * This function uses hook_form_FORM-ID_alter() to set the redirect and the inquiry field as hidden
 * when adding/editing a stage via the nQuire authoring system (detected via checking the url)
 * This deas with 2 curcumstances:
 * 	(1) Adding a new stage to an inquiry via the /inquiry/%inquiry/stage/add url
 *    -> alter form to hide inquiry selection dropdown
 *    -> redirect to /inquiry/%inquiry/stages on completion
 *  (2) Editing a phase via /stage/%phase/edit
 *    -> redirect to /inquiry/%inquiry/stages on completion 
 *    		n.b. this isn't directly possible given that inquiry_id isn't known at this stage
 *    			in the form lifecycle so the page is routed via "stage/inquiry" which will redirect to
 *    			the inquiry page automatically
 *    
 */
function pi_authoring_form_pi_stage_node_form_alter(&$form, &$form_state)
{
	//Strip the request url of the preceeding drupal stuff base_url and ?q=/
	// so that it's possible to work out whether the page request was from /inquiry/%inquiry/stage/add
	// or from /node/%node/edit
	$drupal_path = str_replace(base_path(), '', request_uri());
	$drupal_path = str_replace('?q=', '', $drupal_path);
	
	// Split the string into parts to get the inquiry id if it exists...
	$path_parts = explode('/', $drupal_path);
	
	// Look for /inquiry/{number}/stage/add
	// First see if the array is big enough to avoid looking at null refs.
	if(count($path_parts)>= 4)
	{
		// Now check all the parts for vaildity... inquiry NUMBER stage add
		if( (strcasecmp($path_parts[0], 'inquiry')==0) && 
			is_numeric($path_parts[1]) &&
			(strcasecmp($path_parts[2], 'stage')==0) )
			{
				// the last part of the url is a special case since it could be either
				// /inquiry/%inquiry/stage/add OR 
				// /inquiry/%inquiry/stage/add?some=query&string=too OR
				// /inquiry/%inquiry/stage/add&some=query&string=too
				$valid_strings = array('add', 'add?', 'add&'); 
				if(in_array(strtolower($path_parts[3]), $valid_strings))
				{
					// finall check that it's a valid inquiry id
					$potential_inquiry_id = $path_parts[1];
					$potential_inquiry_node = node_load($potential_inquiry_id);
						
					//check it's loaded something, then check it's type...
					if(($potential_inquiry_node !== FALSE))
					{
						if($potential_inquiry_node->type == 'pi_inquiry')
						{
							// Hurrah, it pased the test: it's an inquiry node
							// Make the inquiry selection on the form in advance and hide it
							$form['inquiry_nid']['#type'] = 'hidden';
							$form['inquiry_nid']['#value'] = $potential_inquiry_node->nid;
							$form['inquiry_nid']['#prefix'] = "<div>";
							// generate the checkboxes again as it's not picked up by ahah helper here!
							$form['stage_phases']['phases'] = pi_stage_form_generate_phase_checkboxes(array(), $potential_inquiry_node->nid);
							// Set redirection to go to the inquiry stage page
							$form['#redirect'] = "inquiry/$potential_inquiry_id/edit/stages";
							
						}
						else
						{
							// It wasn't a valid inquiry node, so fall back to standard stage editing page
							drupal_set_message(t('An inquiry id ('. check_plain($potential_inquiry_id) . ') was specified for this stage, but the id didn\'t refer to a valid inquiry node; select an inquiry from the form instead.'), 'warning');
						}
					}
					else
					{
						// It wasn't a node, so fall back to standard stage editing page
						drupal_set_message(t('An inquiry id ('. check_plain($potential_inquiry_id) . ') was specified for this stage, but there as no item with that id; select an inquiry from the form instead.'), 'warning');
					}
				}
			}
		// ELSE... don't change the form or bother wirh an error message as the url was so wrong it's
		//   probably not intended to make this work!			
	}
	else
	{
		
		// Is it a /stage/%stage/edit url 
		if(count($path_parts)>= 3)
		{
			// Now check all the parts for vaildity... inquiry NUMBER stage add
			// Now check all the parts for vaildity... inquiry NUMBER edit
			if( (strcasecmp($path_parts[0], 'stage')==0) && is_numeric($path_parts[1]) )
			{
				// the last part could end in ? and & as well:
				$valid_strings = array('edit', 'edit?', 'edit&');
				if(in_array(strtolower($path_parts[2]), $valid_strings))
				{
					// Get the node id of the form being edited...
					$nid = $form['nid']['#value'];
					// check if nid is set
					if(isset($nid))
					{
						// if it was from the authoring edit page, then get the node id and redirect back
						// to the authoring page for it... via the special redirect page (see function comment)
						$form['#redirect'] = "stage/$nid/inquiry";
					}
				}
			}
		}
	}
	//otherwise if it's not related to inquiry editing then don't touch the form
}

//-------------------------------------------------------------------------------------------------------------------
//----------------------------------------------Table View of Inquiry------------------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * This is the start page for inquiry authoring, it will allow the user to select an existing
 * inquiry for editing, or to create a new inquiry.
 */
function pi_authoring_view(){
	$content = '';
	
	// Wrap the contet in a named element to allow css styles to be unique to this module 
	$content .="<div id='pi_authoring'>";
	
	$content .= "<p>To create a new inquiry enter the details " . 
		l("here", "inquiry/add")  . " .  " . 
		"To edit an existing inquiry select it from the list below.</p>\n";

	$inquiry_nids = pi_inquiry_load_nids();
	
    $rows = array();
	if(!empty($inquiry_nids))
	{
		$content .= "<h2>Current Inquiries</h2>\n";
		$content .= drupal_get_form('pi_authoring_order_inquiries_form', $inquiry_nids);
	}
	else
	{
		// Display a warning message to the user as there are no phases yet defined 
		drupal_set_message("No inquires created so far.", 'warning', FALSE);
	}
	
	$content .="</div>\n";  // End of '#pi_authoring'
	return $content;
}

/**
 * This function creates the form for draggable inquiry ordering on the inquiry authoring page
 * @param $inquiries array of each of the inquiry nids in the inquiry
 * @param db_result_object $inquiry the inquiry these phases belong to used to redirect user back to 
 *  inquiry phases page
 * @return array describing a form in drupal api format
 */
function pi_authoring_order_inquiries_form(&$form_state, $inquiries) {
	$form = array();
	$form['#theme'] = 'pi_authoring_order_inquiries_form';
	
	$form['#title'] = 'Inquiries';
	
	$form['order_inquiries_inquiries'] = array(
		'#tree' => TRUE
	);
	
	$position = 0;
	foreach($inquiries as $inquiry_nid)
	{
		$inquiry = node_load($inquiry_nid);
		$form['order_inquiries_inquiries'][$inquiry->nid]['title'] =
		 	array(
		 		'#value' => l($inquiry->title, 'inquiry/' . $inquiry->nid . '/edit'),
		 	);
		$form['order_inquiries_inquiries'][$inquiry->nid]['body'] = 
			array(
				'#value' => $inquiry->body
			);
		$form['order_inquiries_inquiries'][$inquiry->nid]['delete'] = 
			array(
				'#value' => l(t("Delete"), 'nQuire/inquiry/' . $inquiry->nid . '/delete')
			);
		$form['order_inquiries_inquiries'][$inquiry->nid]['weight'] = 
			array(
	            '#type'          => 'weight',
	            '#delta'         => count($inquiries),
	            '#default_value' => $position
	        );
        
        $position++;
	}
	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
  	);
  	return $form;	
}

/**
 * This handles the data from the inquiry ordering form, it does not take the actual order
 * numbers provided by the form, but reorders them from 0..(n-1) so that the weight data in the 
 * table is always consistant and not surceptable to errors introduced by bad post data.
 * @param array $form drupal api form data
 * @param array $form_state drupal api submitted form data
 */
function pi_authoring_order_inquiries_form_submit($form, &$form_state)
{
	//firep($form_state['values']['order_inquiries_inquiries'], "Form data");
	$inquiry_order = array();
	
	//put all the phases in an array
	foreach($form_state['values']['order_inquiries_inquiries'] as $inquiry_nid => $new_order)
	{
		$inquiry_order[$inquiry_nid] = $new_order; 
	}
	//sort the elements by the new order
	asort($inquiry_order);
	//firep(var_dump($phase_order), "New order");
	
	// Now reorder from 0..n based on this order
	$count = 0;
	foreach($inquiry_order as $inquiry_nid => $order)
	{
		$inquiry_order[$inquiry_nid] = $count++;		
	}
	
	// This should really be done in a transation, but it's not possible in the drupal api as you
	// have to know all about the other table that may be locked..
	
	foreach($inquiry_order as $inquiry_nid => $weight)
	{
		if($inquiry = node_load($inquiry_nid))
		{
			$inquiry->weight = $weight;
			node_save($inquiry);
		}
		else
		{
			drupal_set_message(t("Can't find Inquiry $inquiry_nid"), 'error');
		}
	}
}



/**
 * Draws the grid view for an inquiry showing phases, stages and activities.
 * 
 * @param db_fetch_object $inquiry The inquiry for which to draw the table given as an object returned by db_fetch_object 
 * @param unknown_type $view_type
 * @return string html content of the inquiry table view
 */
function draw_table($inquiry, $view_type){
	/*
	 * to build up the table we need to know the phases and activities and to which stage they belong to.
	 * for each phase in the inquiry
	 *  - 1. print the name and find out if it is part of a stage and colour them green
	 *  - 2. find out the activities for that phase and for each stage does it belong
	 * 	- 2.1 if it does belong then colour it green
	 *  - 2.2 if not then include a link to add the activity to that phase and stage
	 */
	 
	$stage_phase_activities = array();

	// Get the nids of all the inquiry phases and stages
	$phase_nids = pi_phase_load_nids($inquiry->nid);
	$stage_nids = pi_stage_load_nids($inquiry->nid);
	
	// pre-load the stages for the inquiry as they're going to be used on each phase row
	$stages = array(); 
	foreach($stage_nids as $stage_nid)
	{
		$stages[$stage_nid] = node_load($stage_nid);
	}
	
	// phase->nid is used in this function, so no need to load the node here, but it will be passed on to
	// get_view, so they are loaded anyway
	$phases = array();
	foreach($phase_nids as $phase_nid)
	{
		$phases[] = node_load($phase_nid);
		foreach($stages as $stage)
		{
			//1. is this phase in this stage?
	 		if(in_array($phase_nid, $stage->phases))
	 		{
	 			//2. does this phase in this stage have activites?
	 			$activities = array();
	 			$query = "SELECT * FROM {pi_stage_phase_activity} WHERE psp_id = %d ORDER BY position";
	 			$result = db_query($query, $stage->stage_phase_ids[$phase_nid]);
	 			while($object = db_fetch_object($result))
	 			{
	 				$activities[] = $object->activity_id;
	 			}
	 			//phase is included in this stage
	 			$stage_phase_activities[$stage->nid][$phase_nid] = $activities;
	 		}
	 		else
	 		{
	 			//echo $phase->title . ", " . $stage->title . ", " . "null; ";
	 			//phase not in this stage
	 			$stage_phase_activities[$stage->nid][$phase_nid] = NULL;
	 		}
	 	}
	 }
	 //firep($stage_phase_activities, "stage_phase_activities");
	return get_view($inquiry, $stage_phase_activities, $stages, $phases, $view_type);
}

/**
 * Draw the table for inquiry authoring
 * 
 * @param object(inquiry) $inquiry
 * @param array(uint)(uint) $stage_phase_activities array of [stage_nid][phase_nid] with an array if activity_ids if inlcuded phase is in stage, NULL if not
 * @param array(uint) $stages array of stages for this inquiry
 * @param array(uint) $phases array of phases for this inquiry
 * @param string $view_type
 * @return string HTML for an inquiry authoring table
 */
function get_view($inquiry, $stage_phase_activities, $stages, $phases, $view_type){
	//content 
	$content = "<div><strong>" . t($inquiry->title) . "</strong></div>\n";
	//draw the table of phses, activities and stages
	$content .= "<table border='1'>\n";
	
	//stage name headers
	$content .= "<tr bgcolor='#eeeeee'>\n";
	$content .= "<td></td>\n";
	foreach($stages as $stage)
	{
		$content .= "<td>\n";
		$stage_down_link = "piauthoring/activities/8/" . $stage->nid . "/" . $inquiry->nid . "/" .  $_GET['q'];
		$stage_up_link = "piauthoring/activities/7/" . $stage->nid . "/" . $inquiry->nid . "/" .  $_GET['q'];
		$content .= t($stage->title) . "  " . l("(+", $stage_up_link) . "  " . l("-)",$stage_down_link);
		$content .= "</td>\n";
	}
	$content .= "</tr>\n";
	
	//phases and activities
	foreach($phases as $phase)
	{
		//Renders
		// Phase name : stages[]
		// Phase activities : stages[]
		
		// Phase name
		$content .= "<tr>\n";
		$phase_down_link = "piauthoring/activities/10/" . $phase->nid . "/" . $inquiry->nid . "/" . $_GET['q'];
		$phase_up_link = "piauthoring/activities/9/" . $phase->nid . "/" . $inquiry->nid . "/" .  $_GET['q'];
		$content .= "<td bgcolor='#eeeeee'>\n" . t($phase->title) . "    " . l("(+",$phase_down_link) . "  " . l("-)",$phase_up_link) . "</td>\n";
		//if the phase is included in a stage then colour the cell green
		foreach($stages as $stage)
		{
			//If this phase is included in this phase, then "array" will be set
			// otherwise it will be null, so display a red cell 
			if(is_array($stage_phase_activities[$stage->nid][$phase->nid]))
			{
				$content .= "<td bgcolor='#00ff00'>"; //green cell
				$sp_link = get_stage_phase_link($view_type, $inquiry->nid, $stage->nid, $phase->nid);
				//firep($sp_link, "Found activities in this stage for $phase->nid");
				if($sp_link != '')
				{
					$content .= l("Add Activity", $sp_link);
				}
				$content .= "</td>\n"; 
			}
			else
			{
				$content .= "<td bgcolor='#ff0000'>";//red cell
				$content .= "</td>\n"; 
			}
		}
		$content .= "</tr>\n";
		
		// Phase activities : stages[]
		//what activities does this phase include for each stage?
		$already_included = array();
		foreach($stages as $s)
		{
			$activity_array = &$stage_phase_activities[$s->nid][$phase->nid];
			if(is_array($activity_array))
			{
				if(count($activity_array)>0)
				{
					foreach($activity_array as $activity)
					{
						// If it's already shown in the table so don't add a new row
						if(!in_array($activity, $already_included))
						{
							$content .= "<tr>\n";
							$activity_up_link = "piauthoring/activities/11/" . $activity . "/";
							$activity_up_link .= $s->nid . "/" . $phase->nid . "/";
							$activity_up_link .= $inquiry->nid . "/" . $_GET['q'];
							$activity_down_link = "piauthoring/activities/12/" . $activity . "/";
							$activity_down_link .= $s->nid . "/" . $phase->nid . "/";
							$activity_down_link .= $inquiry->nid . "/" . $_GET['q'];
							$content .= '<td> -> ' . get_name_of_activity($activity) . '    ' . l("(+",$activity_up_link) . '  ' . l("-)",$activity_down_link) . "</td>\n";
							foreach($stages as $st)
							{
								if($st->nid == $s->nid){
									$content .= "<td bgcolor='#00ff00'>"; //green cell
									$link = get_activity_link($view_type, $activity, $inquiry->nid);
									if($link != ''){
										$content .= l('edit', $link);
									}
									else if($view_type == 'add'){
										//HERE
										$delete_link = "piauthoring/activities/13/" . $activity;
										$content .= l("delete", $delete_link);
									}
									$content .= "</td>\n";
								}
								else{
									$temp_array = $array[$st->nid][$phase->nid];
									if($temp_array == 'NULL'){
										// stage is not included in this phase so no activities
										$content .= '<td bgcolor="#ff0000"></td>'; //red cell
									}
									else if((count($temp_array)==0)){
										// stage is included in phase but has no activties
										$link = get_to_include_link($view_type,
										$phase->nid,
										$st->nid,
										$activity);
										$content .= '<td bgcolor="#ff9900">'; //amber cell
										if($link != ''){
											$content .= l('include?',$link);
										}
										$content .= '</td>';
									}
									else{
										//stage is included in phase and has activities
										if(in_array($activity, $temp_array)){
											//activity is in this stage as well
											$content .= '<td bgcolor="#00ff00">';
											if($view_type == 'add'){
												//HERE
												$uninclude_link = "piauthoring/activities/14/" . $st->nid;
												$uninclude_link .= "/" . $phase->nid . "/" . $activity;
												$uninclude_link .= "/" . $inquiry->nid;
												$content .= l("un-include", $uninclude_link);
											}
											$content .= '</td>'; //green cell
										}
										else{
											//activity not in this stage
											$link = get_to_include_link($view_type,
											$phase->nid,
											$st->nid,
											$activity);
											$content .= '<td bgcolor="#ff9900">';//amber cell
											if($link != ''){
												$content .= l('include?',$link);
											}
											$content .= '</td>';
										}
									}
								}
							}
							$content .= '</tr>';
							$already_included[] = $activity;
						}
					}
				}
				//end foreach				
			}
		}
	}
	
	$content .= "</table>";
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $activity_id
 * @return string
 */
function get_name_of_activity($activity_id){
	$query = "SELECT name FROM {pi_activity} WHERE activity_id = %d";
	$result = db_fetch_object(db_query($query, $activity_id));
	return $result->name;
}

/**
 * MISSING
 * 
 * @param unknown_type $view_type
 * @param unknown_type $phase
 * @param unknown_type $stage
 * @param unknown_type $activity
 * @return string
 */
function get_to_include_link($view_type, $phase, $stage, $activity){
	$link = '';
	if($view_type != 'view' & $view_type != 'edit'){
		$link .= "piauthoring/activities/6/" . arg(2) . "/" . arg(3) . "/" . $phase . "/" . $stage . "/" . $activity;
	}
	return $link;
}

/**
 * Return the end of the url to link to pi authoring for the given stage_nid and phase_nid in an inquiry
 * @param $view_type
 * @param $inquiry_nid
 * @param $stage_nid
 * @param $phase_nid
 * @return unknown_type
 */
function get_stage_phase_link($view_type, $inquiry_nid, $stage_nid, $phase_nid){
	$link = '';
	if($view_type != 'view' & $view_type != 'edit'){
		$query = "SELECT * FROM {pi_stage_phase} WHERE phase_id = %d AND stage_id = %d"; 
		$result = db_query($query, $phase_nid, $stage_nid);
		$row = db_fetch_object($result);
		//firep($row);
		if($row)
		{
			$link .= "piauthoring/activities/4/" . $inquiry_nid . "/" . $row->psp_id;
		}
		else
		{
			drupal_set_message("Couldn't find stage a match for stage '$stage_nid' and phase '$phase_nid'", 'warning');
		}
	}
	return $link;
}

/**
 * MISSING
 * 
 * @param unknown_type $view_type
 * @param unknown_type $activity_id
 * @param unknown_type $inquiry_id
 * @return string
 */
function get_activity_link($view_type, $activity_id, $inquiry_id){
	$link = '';
	if($view_type != 'view' & $view_type != 'add'){
		$link .= 'piauthoring/activities/5/' . $activity_id . "/" . $inquiry_id;
	}
	return $link;
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_stage_up_one_position(){
	//piauthoring/activities/7
	//the last element in the path is the stage_id
	$stage_id = arg(3);
	$inquiry_id = arg(4);
	//get the stage and find its position
	$query = "SELECT * FROM {pi_inquiry_stage} WHERE";
	$query .= " stage_id = %d";
	$query .= " AND inquiry_id = %d";
	$object = db_fetch_object(db_query($query, $stage_id, $inquiry_id));
	$start_pos = $object->position;
	//get the next stage based on its position
	$query2 = "SELECT * FROM {pi_inquiry_stage} WHERE";
	$query2 .= " inquiry_id = %d";
	$query2 .= " AND position > %d";
	$query2 .= " ORDER BY position ASC";
	//should be the first in the items returned if not then it is the last stage so can't be moved up one
	$object2 = db_fetch_object(db_query($query2, $inquiry_id, $start_pos));
	$end_pos = $object2->position;
	//swap these position values
	if($object2){
		//update the tables with the new position values
		$query3 = "UPDATE {pi_inquiry_stage} SET position = %d";
		$query3 .= "WHERE pis_id = %d";
		db_query($query3, $end_pos, $object->pis_id);
		$query4 = "UPDATE {pi_inquiry_stage} SET position = %d";
		$query4 .= "WHERE pis_id = %d";
		db_query($query4, $start_pos, $object2->pis_id);
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(5) . "/" . arg(6) . "/" . arg(7) . "/" .  arg(8);
	drupal_goto($return_path);	
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_stage_down_one_position(){
	//piauthoring/activities/8
	//the last element in the path is the stage_id
	$stage_id = arg(3);
	$inquiry_id = arg(4);
	//get the stage and find its position
	$query = "SELECT * FROM {pi_inquiry_stage} WHERE";
	$query .= " stage_id = %d";
	$query .= " AND inquiry_id = %d";
	$object = db_fetch_object(db_query($query, $stage_id, $inquiry_id));
	$start_pos = $object->position;
	//get the previous stage based on its position
	$query2 = "SELECT * FROM {pi_inquiry_stage} WHERE";
	$query2 .= " inquiry_id = %d";
	$query2 .= " AND position < %d";
	$query2 .= " ORDER BY position DESC";
	//should be the first in the items returned if not then it is the last stage so can't be moved up one
	$object2 = db_fetch_object(db_query($query2, $inquiry_id, $start_pos));
	$end_pos = $object2->position;
	//swap these position values
	if($object2){
		//update the tables with the new position values
		$query3 = "UPDATE {pi_inquiry_stage} SET position = %d ";
		$query3 .= "WHERE pis_id = %d";
		db_query($query3, $end_pos, $object->pis_id);
		$query4 = "UPDATE {pi_inquiry_stage} SET position = %d ";
		$query4 .= "WHERE pis_id = %d";
		db_query($query4, $start_pos, $object2->pis_id);
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(5) . "/" . arg(6) . "/" . arg(7) . "/" .  arg(8);
	drupal_goto($return_path);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_phase_up_one_position(){
	//piauthoring/activities/9
	//the last element in the path is the phase_id
	$phase_id = arg(3);
	$inquiry_id = arg(4);
	//get the phase and find its position
	$query = "SELECT * FROM {pi_inquiry_phase} WHERE";
	$query .= " phase_id = %d";
	$query .= " AND inquiry_id = %d";
	$object = db_fetch_object(db_query($query, $phase_id, $inquiry_id));
	$start_pos = $object->position;
	//get the next phase based on its position
	$query2 = "SELECT * FROM {pi_inquiry_phase} WHERE";
	$query2 .= " inquiry_id = %d";
	$query2 .= " AND position > %d";
	$query2 .= " ORDER BY position ASC";
	//should be the first in the items returned if not then it is the last stage so can't be moved up one
	$object2 = db_fetch_object(db_query($query2, $inquiry_id, $start_pos));
	$end_pos = $object2->position;
	//swap these position values
	if($object2){
		//update the tables with the new position values
		$query3 = "UPDATE {pi_inquiry_phase} SET position = %d ";
		$query3 .= "WHERE pip_id = %d";
		db_query($query3, $end_pos,  $object->pip_id );
		$query4 = "UPDATE {pi_inquiry_phase} SET position = %d ";
		$query4 .= "WHERE pip_id = %d";
		db_query($query4, $start_pos , $object2->pip_id);
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(5) . "/" . arg(6) . "/" . arg(7) . "/" .  arg(8);
	drupal_goto($return_path);	
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_phase_down_one_position(){
	//piauthoring/activities/10
	//the last element in the path is the phase_id
	$phase_id = arg(3);
	$inquiry_id = arg(4);
	//get the phase and find its position
	$query = "SELECT * FROM {pi_inquiry_phase} WHERE";
	$query .= " phase_id = %d";
	$query .= " AND inquiry_id = %d";
	$object = db_fetch_object(db_query($query, $phase_id, $inquiry_id));
	$start_pos = $object->position;
	//get the next phase based on its position
	$query2 = "SELECT * FROM {pi_inquiry_phase} WHERE";
	$query2 .= " inquiry_id = %d";
	$query2 .= " AND position < %d";
	$query2 .= " ORDER BY position DESC";
	//should be the first in the items returned if not then it is the last stage so can't be moved up one
	$object2 = db_fetch_object(db_query($query2, $inquiry_id, $start_pos));
	$end_pos = $object2->position;
	//swap these position values
	if($object2){
		//update the tables with the new position values
		$query3 = "UPDATE {pi_inquiry_phase} SET position = %d ";
		$query3 .= "WHERE pip_id = %d";
		db_query($query3, $end_pos, $object->pip_id );
		$query4 = "UPDATE {pi_inquiry_phase} SET position = %d ";
		$query4 .= "WHERE pip_id = %d";
		db_query($query4, $start_pos,  $object2->pip_id);
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(5) . "/" . arg(6) . "/" . arg(7) . "/" .  arg(8);
	drupal_goto($return_path);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_activity_up_one_position(){
	//piauthoring/activities/11
	//the last element in the path is the stage_id
	$activity_id = arg(3);
	$stage_id = arg(4);
	$phase_id = arg(5);
	$inquiry_id = arg(6);
	//get the pi_stage_phase
	$query = "SELECT * FROM {pi_stage_phase} WHERE";
	$query .= " stage_id = %d";
	$query .= " AND phase_id = %d";
	$object = db_fetch_object(db_query($query, $stage_id, $phase_id));
	if($object){
		//echo $object->psp_id . "; ";
		//get the activity and find its position
		$query2 = "SELECT * FROM {pi_stage_phase_activity} WHERE";
		$query2 .= " psp_id = %d";
		$query2 .= " AND activity_id = %d";
		$object2 = db_fetch_object(db_query($query2, $object->psp_id, $activity_id));
		$start_pos = $object2->position;
		//get the next stage based on its position
		$query3 = "SELECT * FROM {pi_stage_phase_activity} WHERE";
		$query3 .= " psp_id = %d";
		$query3 .= " AND position < %d";
		$query3 .= " ORDER BY position DESC";
		//should be the first in the items returned if not then it is the last stage so can't be moved up one
		$object3 = db_fetch_object(db_query($query3, $object->psp_id, $start_pos));
		$end_pos = $object3->position;
		//swap these position values
		if($object3){
			//echo "... " . $object2->pspa_id . ", " . $end_pos . "; " . $object3->pspa_id . ", " . $start_pos;
			//update the tables with the new position values
			$query4 = "UPDATE {pi_stage_phase_activity} SET position = %d";
			$query4 .= " WHERE pspa_id = %d";
			db_query($query4, $end_pos, $object2->pspa_id);
			$query5 = "UPDATE {pi_stage_phase_activity} SET position = %d";
			$query5 .= " WHERE pspa_id = %d";
			db_query($query5, $start_pos, $object3->pspa_id);
		}
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(7) . "/" . arg(8) . "/" . arg(9) . "/" .  arg(10);
	drupal_goto($return_path);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function move_activity_down_one_position(){
	//piauthoring/activities/12
	//the last element in the path is the stage_id
	$activity_id = arg(3);
	$stage_id = arg(4);
	$phase_id = arg(5);
	$inquiry_id = arg(6);
	//get the pi_stage_phase
	$query = "SELECT * FROM {pi_stage_phase} WHERE ";
	$query .= " stage_id = %d ";
	$query .= " AND phase_id = %d";
	$object = db_fetch_object(db_query($query, $stage_id, $phase_id));
	if($object){
		//echo $object->psp_id . "; ";
		//get the activity and find its position
		$query2 = "SELECT * FROM {pi_stage_phase_activity} WHERE";
		$query2 .= " psp_id = %d";
		$query2 .= " AND activity_id = %d";
		$object2 = db_fetch_object(db_query($query2, $object->psp_id, $activity_id));
		$start_pos = $object2->position;
		//get the next stage based on its position
		$query3 = "SELECT * FROM {pi_stage_phase_activity} WHERE";
		$query3 .= " psp_id = %d";
		$query3 .= " AND position > %d";
		$query3 .= " ORDER BY position ASC";
		//should be the first in the items returned if not then it is the last stage so can't be moved up one
		$object3 = db_fetch_object(db_query($query3, $object->psp_id, $start_pos));
		$end_pos = $object3->position;
		//swap these position values
		if($object3){
			//echo "... " . $object2->pspa_id . ", " . $end_pos . "; " . $object3->pspa_id . ", " . $start_pos;
			//update the tables with the new position values
			$query4 = "UPDATE {pi_stage_phase_activity} SET position = %d";
			$query4 .= " WHERE pspa_id = %d";
			db_query($query4, $end_pos, $object2->pspa_id);
			$query5 = "UPDATE {pi_stage_phase_activity} SET position = %d";
			$query5 .= " WHERE pspa_id = %d";
			db_query($query5, $start_pos, $object3->pspa_id);
		}
	}
	//return to the relevant page -> last element in the path
	$return_path = arg(7) . "/" . arg(8) . "/" . arg(9) . "/" .  arg(10);
	drupal_goto($return_path);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function delete_activity_link(){
	$activity_id = arg(3);
	$inquiry_id = arg(4);
	//deletes the activity from the inquiry
	//uses a pi function and this removes the activity from all tables
	delete_activity($activity_id);
	drupal_goto("piauthoring/activities/1/" . $inquiry_id);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function uninclude_activity_link(){
	//unincludes the activity from the stage and phase
	$stage_id = arg(3);
	$phase_id = arg(4);
	$activity_id = arg(5);
	$inquiry_id = arg(6);
	//echo $stage_id . ", " . $phase_id . ", " . $activity_id . ", " . $inquiry_id;
	$query = "SELECT * FROM {pi_stage_phase} WHERE";
	$query .= " stage_id = %d";
	$query .= " AND phase_id = %d";
	$object = db_fetch_object(db_query($query, $stage_id, $phase_id));
	if($object){
		//echo 'here';
		$query2 = "DELETE FROM {pi_stage_phase_activity} WHERE";
		$query2 .= " psp_id = %d";
		$query2 .= " AND activity_id = %d";
		db_query($query2, $object->psp_id, $activity_id);
	}
	drupal_goto("piauthoring/activities/1/" . $inquiry_id);
}

//-------------------------------------------------------------------------------------------------------------------
//------------------------------------------------End : Table View of Inquiry----------------------------------------
//-------------------------------------------------------------------------------------------------------------------


//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 5 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

	/*
	 * Authoring of activities is going to be a 2 stage process.
	 *
	 * Stage 1 is to use activity_placeholder.module to place dummy content into the system so that in the authoring
	 * interface you are able to quickly generate the inquiry.
	 *
	 * Stage 2 is to replace these dummy activities with the real activities.  The user will have to install the
	 * relevent modules and update the activitiy place holder with the correct information
	 */

/**
 * Theis page is the starting point for adding activities to inquiries
 * @return string HTML data for page
 */
function pi_authoring_new_activities(){
	$content = "<p>Authoring of activities is a 2 part process.</p>";
	$content .= "<p><strong>Part 1</strong> is to use section 5.1 to place dummy content into the ";
	$content .= "system so that you are able to quickly generate activities in the inquiry.</p>";
	$content .= "<p><strong>Part 2</strong> is to replace these dummy activities with the real activities. ";
	$content .= " Use 5.3 to update the activities with the correct information</p>";
	
	$content .= "<p>Below is a list of inquiries to choose from use this page to filter what you see in sections 5.1";
	$content .= " and 5.3 (default is to display all inquiries in these pages unless set by the links below</p><br>";
	
	//table of inquiries to choose from; two links one to placeholder and the other to real
	//if there are activities in placeholder then the text changes
	$inquiry_nids = pi_inquiry_load_nids();
	
	$content .= "<table>";
	$content .= '<tr bgcolor="#EEEEEE"><td>Inquiry Name</td><td>Place Holder</td><td>Real</td></tr>';
	foreach($inquiry_nids as $inquiry_nid) 
	{
		$inquiry = node_load($inquiry_nid);
		$content .= "<tr>";
		$content .= "<td>" . $inquiry->title . "</td>";
		$content .= "<td>" . l("add", "piauthoring/activities/1/" . $inquiry->nid) . "</td>";
		$content .= "<td>" . l("update", "piauthoring/activities/3/" . $inquiry->nid) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	return $content;
}


/**
 * Returns the content for authoring section 5.1, presenting the table of the inquiry and
 * links to add new placeholder activities.  If an inquiry is not passed as a parameter, a list of all will be shown.
 * @param $inquiry Inquiry node to show table for: this is loaded via the url menu auto load callback $node
 * @return string HTML content
 */
function pi_authoring_new_activities_placeholder($inquiry=NULL){
	$content = '';
	if(isset($inquiry))
	{
		$content .= draw_table($inquiry, 'add');
	}
	else
	{
		$inquiry_nids = pi_inquiry_load_nids();
		foreach($inquiry_nids as $inquiry_nid)
		{
			$content .= "<div>\n";
			$inquiry = node_load($inquiry_nid);
			$content .= draw_table($inquiry, 'add');
			$content .= "</div>\n\n";
		}
	}
	return $content;
}


/**
 * Returns the content for authoring section 5.3, presenting the table of the inquiry and
 * links to edit placeholder activities.  If an inquiry is not passed as a parameter, a list of all will be shown.
 * @param $inquiry Inquiry node to show table for: this is loaded via the url menu auto load callback $node
 * @return string HTML content
 */
function pi_authoring_new_activities_real($inquiry=NULL){
	$content = '';
	if(isset($inquiry))
		{
		$content .= draw_table($inquiry, 'edit');
	}
	else{
		$inquiry_nids = pi_inquiry_load_nids();
		foreach($inquiry_nids as $inquiry_nid)
		{
			$content .= "<div>\n";
			$inquiry = node_load($inquiry_nid);
			$content .= draw_table($inquiry, 'edit');
			$content .= "</div>\n\n";
		}
	}
	return $content;
}

/**
 * Constructs the page to show thew new placeholder activity form
 * 
 * @return string HTML content
 */
function pi_authoring_new_activities_placeholder_add($inquiry){
	$content = "<p>Add a new activity to this phase and stage.<br>";
	$content .= "(NB this is a place holder activity so you can quickly define";
	$content .= " the types of activities you want in your inquiry.  Simply put";
	$content .= "the name of the activity in, something meanlingful and you will";
	$content .= "go back later and edit it to the real activity)</p><br>";
	$content .= drupal_get_form('pi_authoring_new_activities_placeholder_add_form', $inquiry);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_new_activities_placeholder_add_form($form_state, $inquiry){
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Add A New Stage'),
		'#tree' => TRUE,
	);

	$form['add']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Activity Name'),
		'#default_value' => '',
	);

	$form['add']['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Temporary Description'),
		'#default_value' => '',
	);

	//get all inquiries to add to an option array
	$group_options = array();
	$query2 = "SELECT * FROM {og}";
	$all_og = db_query($query2);
	while($group = db_fetch_object($all_og)){
		$group_options[$group->nid] = $group->nid . " : " . $group->og_description;
	}

	$form['add']['group'] = array(
		'#type' => 'select',
		'#title' => t('For Which Group?'),
		'#options' => $group_options,
	);

	$options = array('individual'=>'individual',
						'group'=>'group',
						'class'=>'class',
						'multiclass'=>'multiclass');

	$form['add']['audience'] = array(
		'#type' => 'select',
		'#title' => t('Audience'),
		'#options' => $options,
	);

	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_new_activities_placeholder_add_form_submit($form, &$form_state){
	$inquiry_id = arg(3);
	$psp_id = arg(4);

	//echo $inquiry_id . " + " . $psp_id;

	//insert new activity (temp) //
	$query = "INSERT INTO {pi_activity} SET ";
	$query .= "name = '" . $form_state['values']['add']['name'] . "'";
	$query .= ", description = '" . $form_state['values']['add']['description'] . "'";
	$query .= ", activity_type = 'pi_authoring_activity'";
	$query .= ", node_type = 'pi_authoring_activity'";
	$query .= ", parameters = '" . $form_state['values']['add']['description'] . "'";
	$query .= ", destination = 'phase'";
	$query .= ", audience = '" . $form_state['values']['add']['audience'] . "'";
	db_query($query);

	//get new activity_id
	$query2 = "SELECT MAX( {pi_activity}.activity_id ) FROM {pi_activity}";
	$activity_id = db_result(db_query($query2));

	//stage_phase_activity
	$query3 = "SELECT MAX( {pi_stage_phase_activity}.position) FROM {pi_stage_phase_activity}";
	$position = db_result(db_query($query3));
	$new_position = $position + 1;

	$query4 = "INSERT INTO {pi_stage_phase_activity} SET";
	$query4 .= " psp_id = '" . $psp_id . "'";
	$query4 .= ", activity_id = '" . $activity_id . "'";
	$query4 .= ", position = '" . $new_position . "'";
	db_query($query4);

	//activity_actor
	$query5 = "INSERT INTO {pi_activity_actor} SET";
	$query5 .= " inquiry_id = '" . $inquiry_id . "'";
	$query5 .= ", activity_id = '" . $activity_id . "'";
	$query5 .= ", gid = '" . $form_state['values']['add']['group'] . "'";
	db_query($query5);

	//activity_status //
	$query6 = "INSERT INTO {pi_activity_status} SET";
	$query6 .= " inquiry_id = '" . $inquiry_id . "'";
	$query6 .= ", activity_id = '" . $activity_id . "'";
	$query6 .= ", gid = '" . $form_state['values']['add']['group'] . "'";
	$query6 .= ", node_function = 'add'";
	$query6 .= ", visible_status = 'start'";
	db_query($query6);

	//done
	$text = "Added new placeholder activity";
	drupal_set_message(t($text));
	drupal_goto("piauthoring/activities/1/" . $inquiry_id);
}

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_authoring_new_activities_real_edit(){
	$content = "<p>Edit an activity:.<br>";
	$content .= "</p><br>";
	$content .= drupal_get_form('pi_authoring_new_activities_real_edit_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_new_activities_real_edit_form($form_state){
	$activity_id = arg(3);
	
	/* construct form to edit the details of an activity
	 * inc. pi_activity, pi_activity_status, pi_activity_actor & pi_stage_phase_activity tables
	 */
	$form['edit'] = array(
		'#type' => 'fieldset',
		'#title' => t('Edit Activity'),
		'#tree' => TRUE,
	);
	
	//pi_activity table
	$query = "SELECT * FROM {pi_activity} WHERE activity_id = '" . $activity_id . "'";
	$result = db_fetch_object(db_query($query));

	$form['edit']['piactivity']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Activity Name'),
		'#default_value' => $result->name,
	);
	
	$form['edit']['piactivity']['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Activity Description'),
		'#default_value' => $result->description,
	);
	
	//activity and node type query
	$nt_query = "SELECT * FROM {node_type}";
	$node_type_query = db_query($nt_query);
	$node_type_options = array();
	while($nt = db_fetch_object($node_type_query)){
		$node_type_options[$nt->type] = $nt->name . ' (' . $nt->type . ')';
	}
	
	$form['edit']['piactivity']['activity_type'] = array(
		'#type' => 'select',
		'#title' => t('Activity Type'),
		'#options' => $node_type_options,
		'#default_value' => $result->activity_type,
	);
	
	$form['edit']['piactivity']['node_type'] = array(
		'#type' => 'select',
		'#title' => t('Node Type'),
		'#options' => $node_type_options,
		'#default_value' => $result->node_type,
	);
	
	$form['edit']['piactivity']['parameters'] = array(
		'#type' => 'textfield',
		'#title' => t('Parameters'),
		'#default_value' => $result->parameters,
	);
	
	$destination_option = array('phase'=>'phase','self'=>'self',);
	
	$form['edit']['piactivity']['destination'] = array(
		'#type' => 'select',
		'#title' => t('Destination After Completing the Activity (self or phase)'),
		'#options' => $destination_option,
		'#default_value' => $result->destination,
	);
	
	$group_options = array('individual'=>'individual',
						'group'=>'group',
						'class'=>'class',
						'multiclass'=>'multiclass');
	
	$form['edit']['piactivity']['audience'] = array(
		'#type' => 'select',
		'#title' => t('Activity Audience'),
		'#options' => $group_options,
		'#default_value' => $result->audience,
	);
	
	//pi_activity_status table
	$query2 = "SELECT * FROM {pi_activity_status} WHERE activity_id = '" . $activity_id . "'";
	$result2 = db_fetch_object(db_query($query2));
	
	$og_query = "SELECT * FROM {og}";
	$og_groups_query = db_query($og_query);
	$og_groups_options = array();
	while($og = db_fetch_object($og_groups_query)){
		$og_groups_options[$og->nid] = $og->og_description . ' (' . $og->nid . ')';
	}

	$form['edit']['piactivitystatus']['gid'] = array(
		'#type' => 'select',
		'#title' => t('Activity Group'),
		'#options' => $og_groups_options,
		'#default_value' => $result2->gid,
	);
	
	$node_function_options = array('add'=>'add','edit'=>'edit','view'=>'view',);
	
	$form['edit']['piactivitystatus']['node_function'] = array(
		'#type' => 'select',
		'#title' => t('Node Function'),
		'#options' => $node_function_options,
		'#default_value' => $result2->node_function,
	);
	
	$visible_status_options = array('start'=>'start','in_progress'=>'in_progress',
									'view'=>'view', 'unavailable'=>'unavailable');
	
	$form['edit']['piactivitystatus']['visible_status'] = array(
		'#type' => 'select',
		'#title' => t('Visible Status'),
		'#options' => $visible_status_options,
		'#default_value' => $result2->visible_status,
	);
	
	//nid options
	$query3 = "SELECT * FROM {node}";
	$result3 = db_query($query3);
	$node_options = array();
	//first is none -> is 0 as no nid is 0 they always start at 1
	$node_options[] = array(0=>'none');
	while($object3 = db_fetch_object($result3)){
		$node_options[$object3->nid] = $object3->title . "(" . $object3->type . ")";
	}
	
	$query4 = "SELECT * FROM {pi_activity_node} WHERE activity_id = '" . $activity_id . "'";
	$object4 = db_fetch_object(db_query($query4));
	
	$form['edit']['piactivitystatus']['existing_nid'] = array(
		'#type' => 'select',
		'#title' => t('Does The Activity Refer To An Existing Node? I.e. if you have selected view in view_type then to which node do you want to view?'),
		'#options' => $node_options,
		'#default_value' => $object4->nid,
	);
	
	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Update'),
	);
	
	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_new_activities_real_edit_form_submit($form, &$form_state){
	$activity_id = arg(3);
	$inquiry_id = arg(4);
	
	//update pi_activity table
	$query = "UPDATE {pi_activity} ";
	$query .= "SET name = '" . $form_state['values']['edit']['piactivity']['name'] . "'";
	$query .= ", description = '" . $form_state['values']['edit']['piactivity']['description'] . "'";
	$query .= ", activity_type = '" . $form_state['values']['edit']['piactivity']['activity_type'] . "'";
	$query .= ", node_type = '" . $form_state['values']['edit']['piactivity']['node_type'] . "'";
	$query .= ", parameters = '" . $form_state['values']['edit']['piactivity']['parameters'] . "'";
	$query .= ", destination = '" . $form_state['values']['edit']['piactivity']['destination'] . "'";
	$query .= ", audience = '" . $form_state['values']['edit']['piactivity']['audience'] . "'";
	$query .= " WHERE activity_id = '" . $activity_id ."'";
	db_query($query);
	
	//update pi_activity_status table
	$query2 = "UPDATE {pi_activity_status} ";
	$query2 .= "SET gid = '" . $form_state['values']['edit']['piactivitystatus']['gid'] . "'";
	$query2 .= ", node_function = '" . $form_state['values']['edit']['piactivitystatus']['node_function'] . "'";
	$query2 .= ", visible_status = '" . $form_state['values']['edit']['piactivitystatus']['visible_status'] . "'";
	$query2 .= " WHERE activity_id = '" . $activity_id . "'";
	$query2 .= " AND inquiry_id = '" . $inquiry_id ."'";
	db_query($query2);
	
	//update pi_activity_actor table - gid should be the same as in pi_activity_status (??)
	$query3 = "UPDATE {pi_activity_actor} SET gid = '" . $form_state['values']['edit']['piactivitystatus']['gid'] . "'";
	$query3 .= " WHERE activity_id ='" . $activity_id ."'";
	db_query($query3);
	
	//are we adding a nid reference?
	$existing_nid = $form_state['values']['edit']['piactivitystatus']['existing_nid'];
	if($existing_nid != 'none'){
		//insert or update?
		$query4 = "SELECT * FROM {pi_activity_node} WHERE";
		$query4 .= " activity_id = '" . $activity_id . "'";
		$query4 .= " AND inquiry_id = '" . $inquiry_id ."'";
		$object4 = db_fetch_object(db_query($query4));
		if($object4){
			//update
			//echo 'update';
			$query5 = "UPDATE {pi_activity_node} SET";
			$query5 .= " nid = '" . $existing_nid . "'";
			$query5 .= " WHERE pan_id = '" . $object4->pan_id . "'";
			db_query($query5);
 		}
		else{
			//insert
			//echo 'insert';
			$query6 = "INSERT INTO {pi_activity_node} SET";
			$query6 .= " inquiry_id = '" . $inquiry_id . "'";
			$query6 .= ", activity_id = '" . $activity_id . "'";
			$query6 .= ", nid = '" . $existing_nid . "'";
			db_query($query6);
		}
	}
	
	//done
	$text = "Updated activity";
	drupal_set_message(t($text));
	drupal_goto("piauthoring/activities/3/" . $inquiry_id);
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function pi_authoring_new_activities_include(){
	$phase = arg(5);
	$stage = arg(6);
	$activity = arg(7);
	
	//find psp_id
	$query = "SELECT * FROM {pi_stage_phase} WHERE ";
	$query .= "phase_id = '" . $phase . "'";
	$query .= " AND stage_id = '" . $stage . "'";
	$result = db_fetch_object(db_query($query));
	
	//include activity in this stage and phase
	$query2 = "INSERT INTO {pi_stage_phase_activity} SET ";
	$query2 .= "psp_id = '" . $result->psp_id . "'";
	$query2 .= ", activity_id = '" . $activity . "'";
	//position
	db_query($query2);
	
	//done
	$text = "Included activity";
	drupal_set_message(t($text));
	$link = "piauthoring/activities/" . arg(3) . "/" . arg(4);
	drupal_goto($link);
}


//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 5 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 6 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_workflow(){
	$content = "<p>You have now authored the majority of the inquiry! Now you need to author the workflow rules ";
	$content .= "that will make the activity guide dynamic.";
	$content .= "</p><br>";
	return $content;
}

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 6 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------Forms for section 7 of the menu-------------------------------------
//-------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_advanced_groups(){
	$content = "<p>In this section you have the oportunity to author more advanced group configurations ";
	$content .= "for example, authoring jigsaw group configuration.</p>";
	$content .= "<p>To do this you need to,</p> ";
	$content .= "<p><strong>1</strong> create appropriate groups using Organic Group (info about groups in Section 7.1)</p> ";
	$content .= "<p><strong>2</strong> use section 7.2 to configure group allocation to a particular stage, ";
	$content .= "phase or activity.  Mostly this will be activities</p>";
	return $content;
}

/**
 * MISSING
 * 
 * @return string
 */
function pi_authoring_advanced_groups_og(){
	$content = "<p>In this section you will create a more advanced grouping of students into groups which";
	$content .= " will allow you to author such things as jigsaw activities.  Simply, you define a set of";
	$content .= " organic groups which you then add to a grouping.  This grouping is then used to allocate";
	$content .= " students to an activity so for example, you could have one set of students doing one activity";
	$content .= " and another set of students another activity and half way through a lesson they swap.</p>";
	$content .= "<p>Below is a list of current Organic Group and a List of current Groupings.</p>";
	$content .= "<p>If the Organic Groups you need are not listed below then you need to do this now.</p>";
	
	//current og groups
	$query = "SELECT * FROM {og}";
	$all_og = db_query($query);
	$content .= "<table>";
	$content .= '<tr bgcolor="#EEEEEE"><td>OG Group Name</td><td>Membership</td></tr>';
	while($groups = db_fetch_object($all_og)){
		$content .= "<tr>";
		$content .= "<td>" . $groups->og_description . "</td>";
		$content .= "<td>" . pi_group_get_name_list($groups->nid) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	
	$content .= '<br>';
	
	//current groupings
	$query2 = "SELECT * FROM {pi_grouping} ";
	$query2 .= "LEFT JOIN {pi_grouping_group} ON {pi_grouping_group}.grouping_id = {pi_grouping}.grouping_id";
	$all_groupings = db_query($query2);
	$content .= "<table>";
	$content .= '<tr bgcolor="#EEEEEE"><td>Grouping Name</td><td>Description</td><td>OG Group</td></tr>';
	while($grouping = db_fetch_object($all_groupings)){
		$content .= "<tr>";
		$content .= "<td>" . $grouping->name . "</td>";
		$content .= "<td>" . $grouping->description . "</td>";
		$content .= "<td>" . get_og_group_name($grouping->gid) . "</td>";
		$content .= "</tr>";
	}
	$content .= "</table>";
	
	return $content;
}


/**
 * MISSING
 * 
 * @return unknown
 */
function pi_authoring_advanced_groups_create(){
	$content = "<p>You now need to define the Groupings you wish to use for a particular inquiry,";
	$content .= "stage, phase and activity.</p><br>";
	$content .= drupal_get_form('pi_authoring_advanced_groups_create_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_authoring_advanced_groups_create_form($form_state){
	$form = array();
	//register ahah helper
	ahah_helper_register($form, $form_state);
	
	$form['add'] = array(
		'#type' => 'fieldset',
		'#title' => t('Create New Grouping'),
		'#tree' => TRUE,
	);
	
	//ahah helper stuff to filter the content of the select boxes below based on selections
	//from other select boxes
	
	//set default values 
	//default values (inquiry)
	if (isset($form_state['storage']['add']['inquiry']['which'])) {
		$usage_inquiry_value = $form_state['storage']['add']['inquiry']['which'];
	}
	else {
		$usage_inquiry_value = 'none';
	}
	
	//default values (stage)
	if (isset($form_state['storage']['add']['stage']['which'])) {
		$usage_stage_value =  $form_state['storage']['add']['stage']['which'];
	}
	else{
		$usage_stage_value = 'none';
	}
	
	//default values (phase)
	if (isset($form_state['storage']['add']['phase']['which'])) {
		$usage_phase_value = $form_state['storage']['add']['phase']['which'];
	}
	else {
		$usage_phase_value = 'none';
	}
	
	//default values (activity)
	if (isset($form_state['storage']['add']['activity']['which'])) {
		$usage_activity_value = $form_state['storage']['add']['activity']['which'];
	}
	else {
		$usage_activity_value = 'none';
	}
	
	//inquiry select box
	$form['add']['inquiry'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Grouping Inquiry'),
	    '#prefix' => '<div id="inquiry-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	
	//inquiry options
	$inquiry_query = "SELECT * FROM {pi_inquiry}";
	$inquiries = db_query($inquiry_query);
	$inquiry_options = array();
	$inquiry_options['none'] = 'none';
	while($inquiry = db_fetch_object($inquiries)){
		$inquiry_options[$inquiry->nid] = $inquiry->nid . " : " . $inquiry->title;
	}
	
	$form['add']['inquiry']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Grouping Applies To Which: Inquiry'),
	    '#options' => $inquiry_options,
	    '#default_value' => $usage_inquiry_value,
	    '#ahah' => array(
	      'event'   => 'change',
	      'path'    => ahah_helper_path(array('add','inquiry')),
	      'wrapper' => 'inquiry-wrapper',
	),
	);
	$form['add']['inquiry']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Filter'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'js'),
	);
	
	//stage value - dependant on inquiry and phase
	$form['add']['stage'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Grouping Stage'),
	    '#prefix' => '<div id="stage-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	
	//stage options - constrain on inquiry and phase if values have been selected!
	$stage_query = get_stage_query($usage_inquiry_value, $usage_phase_value);
	$stages = db_query($stage_query);
	$stage_options = array();
	$stage_options['none'] = 'none';
	while($stage = db_fetch_object($stages)){
		$stage_options[$stage->nid] = $stage->nid . " : " . $stage->title;
	}
	
	$form['add']['stage']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Grouping Applies To Which: Stage'),
	    '#options' => $stage_options,
	    '#default_value' => $usage_stage_value,
	    '#ahah' => array(
	      'event'   => 'change',
	      'path'    => ahah_helper_path(array('add','stage')),
	      'wrapper' => 'stage-wrapper',
	),
	);
	$form['add']['stage']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Filter'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'js'),
	);
	
	//phase value - dependant on inquiry and stage
	$form['add']['phase'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Grouping Phase'),
	    '#prefix' => '<div id="phase-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	
	//phase options
	$phase_query = get_phase_query($usage_inquiry_value, $usage_stage_value);
	$phases = db_query($phase_query);
	$phase_options = array();
	$phase_options['none'] = 'none';
	while($phase = db_fetch_object($phases)){
		$phase_options[$phase->nid] = $phase->nid . " : " . $phase->title;
	}
	
	$form['add']['phase']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Grouping Applies To Which: Phase'),
	    '#options' => $phase_options,
	    '#default_value' => $usage_phase_value,
	    '#ahah' => array(
	      'event'   => 'change',
	      'path'    => ahah_helper_path(array('add','phase')),
	      'wrapper' => 'phase-wrapper',
		),
	);
	$form['add']['phase']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Filter'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'js'),
	);
	
	//activity value - dependant on inquiry and stage and phase
	$form['add']['activity'] = array(
	    '#type'   => 'fieldset',
	    '#title'  => t('Grouping Activity'),
	    '#prefix' => '<div id="activity-wrapper">', // This is our wrapper div.
	    '#suffix' => '</div>',
	    '#tree'   => TRUE, // Don't forget to set #tree!
	);
	
	//phase options
	$activity_query = get_activity_query($usage_phase_value, $usage_stage_value);
	$activities = db_query($activity_query);
	$activity_options = array();
	$activity_options['none'] = 'none';
	while($activity = db_fetch_object($activities)){
		$activity_options[$activity->activity_id] = $activity->activity_id . " : " . $activity->name;
	}
	
	$form['add']['activity']['which'] = array(
	    '#type' => 'select',
	    '#title' => t('Grouping Applies To Which: Activity'),
	    '#options' => $activity_options,
	    '#default_value' => $usage_activity_value,
	    '#ahah' => array(
	      'event'   => 'change',
	      'path'    => ahah_helper_path(array('add','activity')),
	      'wrapper' => 'activity-wrapper',
		),
	);
	$form['add']['activity']['update_usage'] = array(
	    '#type'  => 'submit',
	    '#value' => t('Filter'),
	    '#submit' => array('ahah_helper_generic_submit'),
	    '#attributes' => array('class' => 'js'),
	);
	
	//after the filtering add in the grouping details
	
	$form['add']['name'] = array(
		'#type' => 'textfield',
		'#title' => t('Grouping Name'),
		'#default_value' => '',
	);

	$form['add']['description'] = array(
		'#type' => 'textfield',
		'#title' => t('Grouping Description'),
		'#default_value' => '',
	);
	
	$og_query = "SELECT * FROM {og}";
	$og_groups_query = db_query($og_query);
	$og_groups_options = array();
	while($og = db_fetch_object($og_groups_query)){
		$og_groups_options[$og->nid] = $og->og_description . ' (' . $og->nid . ')';
	}
	
	$form['add']['gid'] = array(
		'#type' => 'select',
		'#title' => t('OG Group of Grouping'),
		'#options' => $og_groups_options,
		'#default_value' => '',
	);
	
	$form['add']['parent_gid'] = array(
		'#type' => 'select',
		'#title' => t('Parent OG Group of this New Grouping?'),
		'#options' => $og_groups_options,
		'#default_value' => '',
	);
	
	$form['add']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Add'),
	);

	return $form;
}

/**
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_authoring_advanced_groups_create_form_submit($form, &$form_state){
	//pi_grouping
	$query = "INSERT INTO {pi_grouping} SET";
	$query .= " name = '" . $form_state['values']['add']['name'] . "'";
	$query .= ", description = '" . $form_state['values']['add']['description'] . "'";
	db_query($query);
	
	//get grouping_id
	$query1 = "SELECT MAX( {pi_grouping.grouping_id} ) FROM {pi_grouping}";
	$grouping_id = db_result(db_query($query1));
	
	//pi_grouping_group
	$query2 = "INSERT INTO {pi_grouping_group} SET";
	$query2 .= " grouping_id = '" . $grouping_id . "'";
	$query2 .= ", gid = '" . $form_state['values']['add']['gid'] . "'";
	db_query($query2);
	
	//pi_group_hierarchy
	$query3 = "INSERT INTO {pi_group_hierarchy} SET";
	$query3 .= " gid = '" . $form_state['values']['add']['gid'] . "'";
	$query3 .= ", parent_gid = '" . $form_state['values']['add']['parent_gid'] . "'";
	db_query($query3);
	
	//pi_grouping_group
	$query4 = "INSERT INTO {pi_inquiry_grouping} SET";
	$query4 .= " grouping_id = '" . $grouping_id ."'";
	$query4 .= ", inquiry_id = '" . $form_state['values']['add']['inquiry']['which'] . "'";
	if($form_state['values']['add']['stage']['which'] != 'none'){
		$query4 .= ", stage_id = '" . $form_state['values']['add']['stage']['which'] . "'";
	}
	if($form_state['values']['add']['phase']['which'] != 'none'){
		$query4 .= ", phase_id = '" . $form_state['values']['add']['phase']['which'] . "'";
	}
	if($form_state['values']['add']['activity']['which'] != 'none'){
		$query4 .= ", activity_id = '" . $form_state['values']['add']['activity']['which'] . "'";
	}
	db_query($query4);
}

/**
 * Helper get stage query function
 * 
 * @param unknown_type $inquiry_value
 * @param unknown_type $phase_value
 * @return string
 */
function get_stage_query($inquiry_value, $phase_value){
	$stage_query = "SELECT * FROM {pi_stage}";
	//LEFT JOIN'S
	if($inquiry_value != 'none'){
		$stage_query .= " LEFT JOIN {pi_inquiry_stage} ON {pi_inquiry_stage}.stage_id = {pi_stage}.stage_id";
	}
	if($phase_value != 'none'){
		$stage_query .= " LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.stage_id = {pi_stage}.stage_id";
	}
	//WHERE'S
	if($inquiry_value != 'none'){
		$stage_query .= " WHERE {pi_inquiry_stage}.inquiry_id = '" . $inquiry_value . "'";
	}
	if($phase_value != 'none'){
		if($inquiry_value != 'none'){
			$stage_query .= " AND";
		}
		else{
			$stage_query .= " WHERE";
		}
		$stage_query .= " {pi_stage_phase}.phase_id = '" . $phase_value . "'";
	}
	return $stage_query;
}

/**
 * MISSING
 * 
 * @param unknown_type $inquiry_value
 * @param unknown_type $stage_value
 * @return string
 */
function get_phase_query($inquiry_value, $stage_value){
	$phase_query = "SELECT * FROM {pi_phase}";
	//LEFT JOIN'S
	if($inquiry_value != 'none'){
		$phase_query .= " LEFT JOIN {pi_inquiry_phase} ON {pi_inquiry_phase}.phase_id = {pi_phase}.phase_id";
	}
	if($stage_value != 'none'){
		$phase_query .= " LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.phase_id = {pi_phase}.phase_id";
	}
	//WHERE'S
	if($inquiry_value != 'none'){
		$phase_query .= " WHERE {pi_inquiry_phase}.inquiry_id = '" . $inquiry_value . "'";
	}
	if($stage_value != 'none'){
		if($inquiry_value != 'none'){
			$phase_query .= " AND";
		}
		else{
			$phase_query .= " WHERE";
		}
		$phase_query .= " {pi_stage_phase}.stage_id = '" . $stage_value . "'";
	}
	return $phase_query;
}

function pi_measure_filter_call_form($node){
  //the nid of the inquiry node is the inquiry id
  $filter_measure_nid = find_measure_filter_nid_for_uid_and_inquiry($node->nid);
  if($filter_measure_nid) {
    $loaded_node = node_load($filter_measure_nid);
    if( !function_exists("node_page_edit")) {
      include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
    }
  
    $output = node_page_edit($loaded_node);
    drupal_set_title("Editing " .  check_plain($node->title));
  }
  else {
    if( ! function_exists("node_add")) {
      include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
    }
    $output = node_add(pi_measure_filter);
    drupal_set_title("Editing " .  check_plain($node->title));
  }
  return $output;
}
/**
 * MISSING
 * 
 * @param unknown_type $phase_value
 * @param unknown_type $stage_value
 * @return string
 */
function get_activity_query($phase_value, $stage_value){
	$activity_query = "SELECT * FROM {pi_activity}";
	$activity_query .= " LEFT JOIN {pi_stage_phase_activity} ON";
	$activity_query .= " {pi_stage_phase_activity}.activity_id = {pi_activity}.activity_id";
	$activity_query .= " LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.psp_id = {pi_stage_phase_activity}.psp_id";
	if($phase_value != 'none'){
		$activity_query .= " WHERE {pi_stage_phase}.phase_id = '" . $phase_value . "'";
	}
	if($stage_value != 'none'){
		if($phase_value != 'none'){
			$activity_query .= " AND";
		}
		else{
			$activity_query .= " WHERE";
		}
		$activity_query .= " {pi_stage_phase}.stage_id = '" . $stage_value . "'";
	}
	return $activity_query;
}

//-------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------End: Forms for section 7 of the menu--------------------------------
//-------------------------------------------------------------------------------------------------------------------
