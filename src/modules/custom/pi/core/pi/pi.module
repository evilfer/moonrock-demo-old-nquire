<?php

// $Id: pi.module,v 0.1 2009/05/10 09:00:00 tdc5 $

/**
 * @file
 * Enables the use of the PI activity guide.
 */
module_load_include('inc', 'pi', 'pi.util');
module_load_include('inc', 'pi', 'pi.groups');

/**
 * Returns a keyed array. The keys are inquiry_id, stage_id, phase_id,
 * activity_id, parameters, destination_nid
 */
function pi_init() {
  drupal_add_css(drupal_get_path('module', 'pi') . '/pi.css');
}

/**
 * hook_menu() - defines the menu items for general inquiry navigation including special paths
 * for inquiry/%, phase/% and activity/%, activity/%/{view,edit,add}
 * @return an array of menu items as per Drupal api.
 */
function pi_menu() {

  $items = array();

  // Do not cache this menu item during the development of this module.

  $items['admin/nquire'] = array(
      'title' => 'nQuire Admin',
      'page callback' => 'pi_nquire_admin',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['home'] = array(
      'title' => 'Home',
      'page callback' => 'pi_home_view',
      'file' => 'pi.home.inc',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['inquiry'] = array(
      'title' => 'Inquiry',
      'page callback' => 'pi_home_view',
      'file' => 'pi.home.inc',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
  );

  $items['inquiry/%node'] = array(
      'page callback' => 'pi_inquiry_inquiry_view',
      'page arguments' => array(1),
      'file' => 'pi.inquiry.inc',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK
  );

  $items['inquiry/%node/view'] = array(
      'title' => 'View',
      'page callback' => 'pi_inquiry_inquiry_view',
      'page arguments' => array(1),
      'file' => 'pi.inquiry.inc',
      'access arguments' => array('access content'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0
  );

  $items['phase/%node'] = array(
      'title' => 'Phase',
      'page callback' => 'pi_inquiry_phase_view',
      'page arguments' => array(1),
      'file' => 'pi.phase.inc',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['export/%/csv'] = array(
      'title' => 'CSV',
      'access callback' => TRUE,
      'page callback' => 'pi_data_export_csv',
      'type' => MENU_CALLBACK,
  );

  $items['export/%/kml'] = array(
      'title' => 'KML',
      'access callback' => TRUE,
      'page callback' => 'pi_data_export_kml',
      'type' => MENU_CALLBACK,
  );

  $items['set_stage'] = array(
      'title' => 'Stage selector',
      'page callback' => 'pi_stage_selector_view',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  $items['set_status'] = array(
      'title' => 'Change activity status',
      'page callback' => 'pi_status_changer_view',
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * hook_theme for the pi module, contains definitions for all the shared themes for nQuire
 */
function pi_theme() {
  return array(
      'pi_region_sort_table' => array(
          'arguments' => array('header', 'rows', 'regions', 'attributes'),
          'file' => 'pi_region_sort_themes.inc'),
      'pi_group_title' => array(
          'arguments' => array('name' => NULL, 'group_type' => NULL),
          'file' => 'pi.groups.inc',
      ),
      'pi_group_description' => array(
          'arguments' => array('description' => 'Unknown', 'users' => NULL),
          'file' => 'pi.groups.inc',
      )
  );
}

function pi_nquire_admin() {
  $output = '';
  if (module_exists(pi_available_content_types)) {
    $output .= "<p>" . l('Manage content types for use as variables', 'admin/pi-available-content-types') . "</p>";
  }
  return $output;
}

function pi_status_changer_view() {
  $query = "SELECT nid FROM {node} WHERE type = 'pi_set_status' ORDER BY nid DESC LIMIT 1";
  $nid = db_result(db_query($query));
  if ($nid) {
    $loaded_node = node_load($nid);
    if (!function_exists("node_page_edit")) {
      include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
    }
    $output = node_page_edit($loaded_node);
  } else {
    if (!function_exists("node_add")) {
      include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
    }
    $output = node_add('pi_set_status');
  }
  return $output;
}

function pi_stage_selector_view() {
  $query = "SELECT nid FROM {node} WHERE type = 'pi_stage_selector' ORDER BY nid DESC LIMIT 1";
  $nid = db_result(db_query($query));
  if ($nid) {
    $loaded_node = node_load($nid);
    if (!function_exists("node_page_edit")) {
      include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
    }
    $output = node_page_edit($loaded_node);
  } else {
    if (!function_exists("node_add")) {
      include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
    }
    $output = node_add('pi_stage_selector');
  }
  return $output;
}

// ****************************************************************


function get_inquiry_details_from_current_path() {
  global $user;
  $uid = $user->uid;

  $result = new stdClass;
  $result->phase_id = NULL;
  $result->inquiry_id = NULL;
  $result->activity_id = NULL;
  $result->stage_id = NULL;

  if (arg(0) == 'home') {
    $inquiry_ids = get_inquiry_ids_of_user($user->uid);
    if (count($inquiry_ids) == 1) {
      drupal_goto("inquiry/{$inquiry_ids[0]}");
    }
    //return;
    //inquiry, stage, phase an activity are not set
  } elseif (arg(0) == 'inquiry' || arg(0) == 'set_stage') {
    //get inquiry from the arg
    if (arg(1)) {
      $result->inquiry_id = (int) arg(1);
    }

    //get the current stage for the inquiry and user
    $stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
    $result->stage_id = $stage->stage_id;

    //phase and activity are not set
  } elseif (arg(0) == 'phase') {
    //get inquiry from the database
    //get direct from the phase id rather than session id
    //$sid = get_current_session_id();
    //$inquiry = get_current_inquiry_for_session_and_user_id($sid, $uid);
    //get phase from the arg
    if (arg(1)) {
      $result->phase_id = (int) arg(1);
      $result->inquiry_id = get_inquiry_id_for_phase_id($result->phase_id);
    }

    //get the current stage for the inquiry and user
    $stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
    $result->stage_id = $stage->stage_id;

    //activity is not set
  } elseif ((arg(0) == 'activity') || (arg(0) == 'export')) {
    //get inquiry from the database
    //get direct from the activity id rather than session id
    //$sid = get_current_session_id();
    //$inquiry = get_current_inquiry_for_session_and_user_id($sid, $uid);
    //get activity from the arg
    if (arg(1)) {
      $result->activity_id = (int) arg(1);
      $result->inquiry_id = get_inquiry_id_for_activity_id($result->activity_id);
    }
    //get phase of the activity
    $phase = get_phase_of_inquiry_and_activity($result->inquiry_id, $result->activity_id, $uid);
    $result->phase_id = $phase->nid;

    //get the current stage for the inquiry and user
    $stage = get_current_stage_of_inquiry_and_user($result->inquiry_id, $uid);
    $result->stage_id = $stage->stage_id;
  } else if (arg(0) == 'node') {
    /*
     * FIX (eloy)
     * If there's only one inquiry, then use it anyway.
     */
    $activity_id = (int) get_activity_id_for_nid(arg(1));
    if ($activity_id) {
      drupal_goto('activity/' . $activity_id . '/view');
    }
  }

  /*
    if (arg(0) == 'node' && (arg(1) == 'add' || arg(2) == 'edit' || arg(2) == 'view')) {
    $result->inquiry_id = arg(3);
    $result->stage_id = arg(4);
    $result->phase_id = arg(5);
    $result->activity_id = arg(6);
    }
    elseif (arg(0) == 'node' && is_numeric(arg(1)) && is_numeric(arg(2))) {
    $result->inquiry_id = arg(2);
    $result->stage_id = arg(3);
    $result->phase_id = arg(4);
    $result->activity_id = arg(5);
    }
    else {
    $result->inquiry_id = arg(3);
    $result->stage_id = arg(4);
    $result->phase_id = arg(5);
    $result->activity_id = arg(6);
    } */

  return $result;
}

function get_inquiry_details_of_node_path($path) {
  /**
   * Returns a keyed array. The keys are inquiry_id, stage_id, phase_id,
   * activity_id, parameters, destination_nid
   */
  //$result = array();

  $split_pos = stripos($path, '&');

  $path_start = substr($path, 0, $split_pos);
  $path_end = substr($path, $split_pos);

  $arguments = explode('/', $path_end);


  $result->inquiry_id = $arguments[3];
  $result->stage_id = $arguments[4];
  $result->phase_id = $arguments[5];
  $result->activity_id = $arguments[6];
  $result->parameters = array_slice($arguments, 7);

  $result->destination_nid = substr($path_end, strlen('&destination='));

  return $result;
}

function get_inquiry_id_for_phase_id($phase_id) {
  /**
   * Returns the inquiry id.
   * Assumes 1-1 mapping of phases to inquiries
   * If more than one returns the one with the highest unique key in pi_inquiry_phase
   */
  $result = db_fetch_object(db_query("SELECT inquiry_id FROM {pi_inquiry_phase} WHERE phase_id = %d ORDER BY pip_id DESC LIMIT 1;", $phase_id));
  return $result->inquiry_id;
}

// ----------------------------------------------------------------------------------

function get_hidden_link_activities($inquiry_nid) {
  $activities_list = array();
  $query = "SELECT hide_activity_link FROM {pi_inquiry} WHERE nid = %d";

  $result = db_query($query, $inquiry_nid);

  while ($activities = db_fetch_object($result)) {
    $activities_list = explode(',', $activities->hide_activity_link);
  }

  return $activities_list;
}

function get_hidden_summary_activities($inquiry_nid) {
  $activities_list = array();
  $query = "SELECT hide_activity_in_summary FROM {pi_inquiry} WHERE nid = %d";

  $result = db_query($query, $inquiry_nid);

  while ($activities = db_fetch_object($result)) {
    $activities_list = explode(',', $activities->hide_activity_in_summary);
  }

  return $activities_list;
}

// ----------------------------------------------------------------------------------

/**
 * Returns an array containing the gids for the groups of a grouping.
 */
function get_groups_from_grouping($grouping_id) {
  $query = "SELECT gid FROM {pi_grouping_group} WHERE grouping_id = %d";
  $result = db_query($query, $grouping_id);
  return $result;
}

/**
 * Returns a grouping_id.
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @return unknown
 */
function get_grouping($inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {
  $query = "SELECT grouping_id FROM {pi_inquiry_grouping} WHERE pi_inquiry_grouping.inquiry_id = %d ";

  $parameters[] = $inquiry_id;

  if ($stage_id != NULL) {
    $query .= "AND ( {pi_inquiry_grouping}.stage_id = %d OR {pi_inquiry_grouping}.stage_id IS NULL) ";
    $parameters[] = $stage_id;
  }
  if ($phase_id != NULL) {
    $query .= "AND ( {pi_inquiry_grouping}.phase_id = %d OR {pi_inquiry_grouping}.phase_id IS NULL) ";
    $parameters[] = $phase_id;
  }
  if ($activity_id != NULL) {
    $query .= "AND ( {pi_inquiry_grouping}.activity_id = %d OR {pi_inquiry_grouping}.activity_id IS NULL) ";
    $parameters[] = $activity_id;
  }

  $result = db_result(db_query($query, $parameters));

  return $result;
}

/**
 * Get the current grouping - class and group can change within/across inquiries
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @param unknown_type $uid
 * @return unknown_type
 */
function get_current_group_of_user($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) {
  $grouping = get_grouping($inquiry_id, $stage_id, $phase_id, $activity_id);
  $group_type = "group";

  if ($grouping) {
    $query = "SELECT {pi_grouping_group}.gid FROM {pi_grouping_group}, {pi_group_type}, {og_uid} "
            . "WHERE {pi_grouping_group}.grouping_id = %d "
            . "AND {pi_grouping_group}.gid = {pi_group_type}.gid "
            . "AND {pi_group_type}.type = '%s' "
            . "AND {pi_grouping_group}.gid = {og_uid}.nid "
            . "AND {og_uid}.uid = %d";

    //makes assumption that user is member of only 1 group at a time
    $result = db_result(db_query($query, $grouping, $group_type, $uid));
    return $result;
  } else {
    return NULL;
  }
}

/**
 * Returns the created grouping_id.
 * @param unknown_type $name
 * @param unknown_type $description
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $phase_id
 * @param unknown_type $activity_id
 * @return unknown_type
 */
function add_grouping($name, $description, $inquiry_id, $stage_id = NULL, $phase_id = NULL, $activity_id = NULL) {
  //insert pi_grouping
  $query1 = "INSERT INTO pi_grouping SET name = '%s' description = '%s'";
  db_query($query1, $name, $description);

  //grouping_id from abouve query is
  $query2 = "SELECT MAX(grouping_id) FROM {pi_grouping}";
  $grouping_id = db_result(db_query($query2));

  //insert pi_grouping_group
  $query3 = "INSET INTO pi_inquiry_grouping SET inquiry_id = %d ";

  $parameters[] = $inquiry_id;

  if ($stage_id != NULL) {
    $query3 .= ", stage_id = %d ";
    $parameters[] = $stage_id;
  }
  if ($phase_id != NULL) {
    $query3 .= ", phase_id = %d ";
    $parameters[] = $phase_id;
  }
  if ($activity_id != NULL) {
    $query3 .= ", activity_id = %d ";
    $parameters[] = $activity_id;
  }

  $query3 .= ", grouping_id = %d ";
  $parameters[] = $grouping_id;

  db_query($query3, $parameters);
}

/**
 * Get the current grouping - class and group can change within/across inquiries
 * @param $inquiry_id
 * @param $stage_id
 * @param $phase_id
 * @param $activity_id
 * @param $uid
 * @return unknown_type
 */
function get_current_class_of_user($inquiry_id, $stage_id, $phase_id, $activity_id, $uid) {
  $grouping = get_grouping($inquiry_id, $stage_id, $phase_id, $activity_id);
  $group_type = "class";

  if ($grouping) {
    $query = "SELECT {pi_grouping_group}.gid FROM {pi_grouping_group}, {pi_group_type}, {og_uid} "
            . "WHERE {pi_grouping_group}.grouping_id = "
            . "AND {pi_grouping_group}.gid = {pi_group_type}.gid "
            . "AND {pi_group_type}.type = '%s' "
            . "AND {pi_grouping_group}.gid = {og_uid}.nid "
            . "AND {og_uid.uid} = %d";

    //makes assumption that user is member of only 1 class at a time
    $result = db_result(db_query($query, $grouping, $group_type, $uid));
    return $result;
  } else {
    return NULL;
  }
}

/**
 * adds a group to a grouping
 * @param $grouping_id
 * @param $gid
 * @return unknown_type
 */
function add_group_to_grouping($grouping_id, $gid) {
  $query = "INSERT INTO {pi_grouping_group} SET grouping_id = %d , gid = %d";
  db_query($query, $grouping_id, $gid);
}

// --------------------------------------------------------------------------------------

/**
 * Functions in this block are interface where am I stuff
 */

/**
 * This allows you to find out if a phase is visible for a particular user
 * because of a teacher only gid
 * These are flagged in the interface
 * if yes then returns the gid otherwise 0
 */
function check_teacher_phase_for_inquiry_phase_user($inquiry_id, $phase_id, $uid) {
  $query = "SELECT {pi_phase_actor}.gid, {pi_phase_actor}.uid FROM {pi_phase_actor} "
          . "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_phase_actor}.gid "
          . "WHERE {pi_phase_actor}.phase_id = %d "
          . "AND ( {pi_phase_actor}.uid = %d OR {og_uid}.uid = %d )";
  $result = db_fetch_object(db_query($query, $phase_id, $uid, $uid));
  if ($result->gid) {
    $gid_node = node_load($result->gid);
    if ($gid_node->type == "teacher_group") {
      return $result->gid;
    } else {
      return 0;
    }
  } elseif ($result->uid) {
    return 0;
  }
}

/**
 * Used to flag teacher only activities from the gid
 */
function check_teacher_activity_for_inquiry_activity_user($inquiry_id, $activity_id, $uid) {
  $query = "SELECT {pi_activity_actor}.gid, {pi_activity_actor}.uid FROM {pi_activity_actor} "
          . "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
          . "WHERE {pi_activity_actor}.inquiry_id = %d "
          . "AND {pi_activity_actor}.activity_id = %d "
          . "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid = %d)";
  $result = db_fetch_object(db_query($query, $inquiry_id, $activity_id, $uid, $uid));
  if ($result->gid) {
    $gid_node = node_load($result->gid);
    if ($gid_node->type == "teacher_group") {
      return $result->gid;
    } else {
      return 0;
    }
  } elseif ($result->uid) {
    return 0;
  }
}

function insert_stage_phase_activity($psp_id, $activity_id, $position) {
  $query = "INSERT INTO {pi_stage_phase_activity} (psp_id, activity_id, position) VALUES (%d, %d, %d)";
  db_query($query, $psp_id, $activity_id, $position);
}

/**
 * Returns an array containing the activities of the phase in that stage for that user.
 * The activities are ordered by position.
 */
function get_activities_of_stage_phase_and_user($inquiry_id, $stage_id, $phase_id, $uid) {

  //get the phases and stages for this inquiry and user
  if (is_null($phase_id)) {
    $db_phases = pi_phase_load_nids_for_user($inquiry_id, $uid);
    $phases = array();
    foreach ($db_phases as $db_phase_nid) {
      $phases[] = node_load($phase_nid);
    }
  } else {
    $phases = array($phase_id);
  }

  /*
    if (is_null($stage_id)) {
    $db_stages = get_stages_of_inquiry_and_user($inquiry_id, $uid);
    $stages = array();
    while ($db_stage = db_fetch_object($db_stages)) {
    $stages[] = $db_stage->stage_id;
    }
    }
    else {
    $stages = array($stage_id);
    } */

  $temp = array();

  if (is_null($stage_id)) {
    foreach ($phases as $p) {
      $query = "SELECT psp_id FROM {pi_stage_phase} WHERE phase_id = %d";
      $query_results = db_query($query, $p);
      while ($query_result = db_fetch_object($query_results)) {
        $temp[] = $query_result->psp_id;
      }
    }
  } else {
    foreach ($phases as $p) {
      $query = "SELECT psp_id FROM {pi_stage_phase} WHERE stage_id = %d AND phase_id = %d";
      $temp[] = db_result(db_query($query, $stage_id, $p));
    }
  }

  //for each of these stages nd phases get the pi_stage_phase psp_id and put it in an array
  /* $temp = array();

    foreach($phases as $p){
    foreach($stages as $s){
    $query = "SELECT pi_stage_phase.psp_id FROM pi_stage_phase ";
    $query .= "WHERE pi_stage_phase.stage_id = '" . $s . "' AND ";
    $query .= "pi_stage_phase.phase_id = '" . $p . "'";
    $temp[] = db_result(db_query($query));
    }
    } */

  //for each of these psp_id's add the activity_id from pi_stage_phase_activity
  $activities = array();
  foreach ($temp as $t) {
    /*
      $query2 = "SELECT * FROM pi_stage_phase_activity ";
      $query2 .= "WHERE pi_stage_phase_activity.psp_id = '" . $t . "'"; */

    $query2 = "SELECT * FROM {pi_stage_phase_activity} "
            . "LEFT JOIN {pi_activity} ON {pi_stage_phase_activity}.activity_id = {pi_activity}.activity_id "
            . "LEFT JOIN {pi_activity_actor} ON {pi_activity}.activity_id = {pi_activity_actor}.activity_id "
            . "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
            . "WHERE {pi_stage_phase_activity}.psp_id = %d "
            . "AND ( {og_uid}.uid = %d OR {pi_activity_actor}.uid = %d ) "
            . "ORDER BY {pi_stage_phase_activity}.position";

    //activities are ordered in the array by the position
    $answer2 = db_query($query2, $t, $uid, $uid);

    while ($result2 = db_fetch_object($answer2)) {
      $sql = "SELECT {pi_stage_phase}.phase_id  FROM {pi_stage_phase}, {pi_stage_phase_activity} "
              . "WHERE {pi_stage_phase_activity}.activity_id = %d AND {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id";
      //added in the phase to help with interface listing
      $phase_of_activity = db_fetch_object(db_query($sql, $result2->activity_id));
      $result2->phase_id = $phase_of_activity->phase_id;
      //added in the visible status to help with interface listing
      $loaded_activity_status = load_activity_status($inquiry_id, $result2->activity_id, $uid);
      //load_activity_status($result2->activity_id);
      $result2->visible_status = $loaded_activity_status->visible_status;
      $activities[] = $result2;
    }
  }

  return get_unique_activities($activities);
  //return array_unique($activities);
}

//helper function to filter out duplicate activities
function get_unique_activities($activities) {
  $unique = array();
  $temp = array();
  foreach ($activities as $activity) {
    $activity_id = $activity->activity_id;
    if (!(in_array($activity_id, $temp))) {
      $temp[] = $activity_id;
      $unique[] = $activity;
    }
  }
  return $unique;
}

/**
 * Returns array of inquiry nodes for user or user's groups
 */
function get_inquiries_of_user($uid = 0) {
  $ids = get_inquiry_ids_of_user($uid);
  
  $inquiries = array();
  foreach($ids as $id) {
    $inquiries[] = node_load($id);
  }
  return $inquiries;
}

/**
 * Returns array of inquiry nodes for user or user's groups
 */
function get_inquiry_ids_of_user($uid = 0) {
  $query = "SELECT DISTINCT {pi_inquiry_actor}.inquiry_id AS nid FROM {pi_inquiry_actor} "
          . "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_inquiry_actor}.gid "
          . "LEFT JOIN {pi_inquiry} ON {pi_inquiry_actor}.inquiry_id = {pi_inquiry}.nid ";

  if ($uid != '0') {
    $query .= "WHERE {pi_inquiry_actor}.uid = %d ";
    $query .= " OR {og_uid}.uid =  %d ";
    $query .= " ORDER BY {pi_inquiry}.weight ASC";
    $result = db_query($query, $uid, $uid);
  } else {
    $query .= " ORDER BY {pi_inquiry}.weight ASC";
    $result = db_query($query);
  }


  $inquiry_ids = array();
  while ($row = db_fetch_array($result)) {
    $inquiry_ids[] = $row['nid'];
  }
  return $inquiry_ids;
}



/**
 * Deprecated function
 */
/*
  function get_current_session_id() {
  global $cookie_domain;
  $session = $_COOKIE[session_name()];
  return $session;
  } */


/**
 * Returns current inquiry_id for session and uid
 * Deprecated function
 */
/*
  function get_current_inquiry_for_session_and_user_id($sid, $uid) {
  // user's current inquiry
  $query = "SELECT pi_current_inquiry.inquiry_id, pi_current_inquiry.pci_id ";
  $query .= "FROM pi_current_inquiry ";
  $query .= "WHERE pi_current_inquiry.sid = '" . $sid . "' ";
  $query .= "AND pi_current_inquiry.uid =  '" . $uid. "' ";

  $result = db_fetch_object(db_query($query));
  return $result;
  } */

/**
 * Sets inquiry_id for session and uid
 * Deprecated function
 */
/*
  function set_current_inquiry_for_session_and_user_id($inquiry_id, $sid, $uid) {
  $query = "DELETE FROM pi_current_inquiry WHERE sid = '" . $sid . "' ";
  db_query($query);
  $query = "INSERT INTO pi_current_inquiry (sid, uid, inquiry_id) VALUES ('" . $sid . "', '" . $uid . "', '" . $inquiry_id . "') ";
  db_query($query);
  clear_expired_sessions();
  } */

/**
 * Deprecated function
 */
/*
  function clear_expired_sessions() {
  $query = "DELETE FROM pi_current_inquiry WHERE NOT EXISTS (select * FROM sessions WHERE sessions.sid = pi_current_inquiry.sid)";
  db_query($query);
  } */

/**
 *  Returns current stage_id
 * @param uint $inquiry_id inquiry nid
 * @param  uint $uid User id
 * @return uint stage nid for current stage of given inquiry and user
 */
function get_current_stage_of_inquiry_and_user($inquiry_id, $uid) {
  // user's current stage
  $query = "SELECT stage_id, pcs_id FROM {pi_current_stage} ";
  $query .= "WHERE inquiry_id = %d AND uid = %d ";
  $result = db_fetch_object(db_query($query, $inquiry_id, $uid));


  //user's group's current stage
  if (isset($result) && ($result == NULL)) {
    $query = "SELECT {pi_current_stage}.stage_id, {pi_current_stage}.pcs_id FROM {pi_current_stage} "
            . "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_current_stage}.gid "
            . "WHERE {pi_current_stage}.inquiry_id = %d "
            . "AND {og_uid}.uid = %d ";

    $result = db_fetch_object(db_query($query, $inquiry_id, $uid));

    if (isset($result) && ($result == NULL)) {
      $result = new stdClass();
      $result->stage_id = NULL;
    }
  }

  return $result;
}

function get_psp_id_for_stage_and_phase($stage_id, $phase_id) {
  if ($stage_id && $phase_id) {
    $query = "SELECT psp_id FROM {pi_stage_phase} WHERE ( stage_id is NULL OR stage_id = %d) AND (phase_id is NULL OR phase_id = %d)";
    $psp_id = db_result(db_query($query, $stage_id, $phase_id));
  } elseif ($stage_id) {
    $query = "SELECT psp_id FROM {pi_stage_phase} WHERE (stage_id is NULL OR stage_id = %d)";
    $psp_id = db_result(db_query($query, $stage_id));
  } elseif ($phase_id) {
    $query = "SELECT psp_id FROM {pi_stage_phase} WHERE (phase_id is NULL OR phase_id = %d)";
    $psp_id = db_result(db_query($query, $phase_id));
  } else {
    $psp_id = 0;
  }

  return $psp_id;
}

/**
 * Returns array containing phase_nid list.
 * Uses pi_stage_phase to indentify the phases.
 */
/*
  function get_phases_of_stage($inquiry_id, $stage_id) {
  $query = "SELECT pi_stage_phase.phase_id FROM pi_stage_phase ";
  $query .= "LEFT JOIN pi_phase ON pi_phase.nid = pi_stage_phase.phase_id ";
  $query .= "WHERE pi_phase.inquiry_nid = '" . $inquiry_id ."' ";
  $query .= "AND pi_stage_phase.stage_id = '" . $stage_id . "'";

  $result = db_query($query);
  $phase_nids = array();
  while($row=db_fetch_array($result))
  {
  $phase_nids[] = $row['phase_id'];
  }
  return $phase_nids;
  }
 */

/**
 * Returns array containing stage_id list.
 * Uses pi_inquiry_phase and pi_stage_phase to indentify the stages.
 */
/*
  function get_stages_of_phase($inquiry_id, $phase_id) {
  $query = "SELECT pi_stage_phase.stage_id FROM pi_stage_phase ";
  $query .= "LEFT JOIN pi_stage ON pi_stage.stage_id = pi_stage_phase.stage_id ";
  $query .= "WHERE pi_phase.inquiry_nid = '" . $inquiry_id ."' ";
  $query .= "AND pi_stage_phase.phase_id = '" . $phase_id . "'";

  $result = db_query($query);
  $phase_nids = array();
  while($row=db_fetch_array($result))
  {
  $stage_nids[] = $row['stage_nid'];
  }
  return $stage_nids;
  }
 */

/**
 * By previous we mean the started activity with the largest postion value.
 * Returns the started activity in the phase visible to that user with the
 * largest position value in the phase.
 */
function previous_activity_for_stage_phase_and_uid($inquiry_id, $stage_id, $phase_id, $uid) {
  $query = "SELECT {pi_activity_node}.nid FROM {pi_activity_node} "
          . "LEFT JOIN {pi_stage_phase_activity} ON {pi_stage_phase_activity}.activity_id = {pi_activity_node}.nid "
          . "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.psp_id = {pi_stage_phase_activity}.psp_id "
          . "LEFT JOIN {pi_activity_actor} ON ( {pi_activity_actor}.inquiry_id = {pi_activity_node}.inquiry_id "
          . "AND {pi_activity_actor}.activity_id = {pi_activity_node}.activity_id) "
          . "LEFT JOIN {pi_activity_status} ON ( {pi_activity_status}.inquiry_id = {pi_activity_node}.inquiry_id "
          . "AND {pi_activity_status}.activity_id = {pi_activity_node}.activity_id) "
          . "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
          . "WHERE {pi_activity_node}.inquiry_id = %d "
          . "AND {pi_stage_phase}.stage_id = %d "
          . "AND {pi_stage_phase}.phase_id = %d "
          . "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid = %d ) "
          . "AND ( {pi_activity_status}.visible_status = 'in_progress' "
          . "OR {pi_activity_status}.visible_status = 'view') "
          . "ORDER BY pi_stage_phase_activity.position DESC LIMIT 1)";

  $result = db_result(db_query($query, $inquiry_id, $stage_id, $phase_id, $uid, $uid));
  return $result;
}

/**
 * By next we mean the startable activity with the smallest postion value.
 * Returns the not started activity in the phase visible to that user with
 * the smallest position value in the phase.
 */
function next_activity_for_stage_phase_and_uid($inquiry_id, $stage_id, $phase_id, $uid) {

  $query = "SELECT {pi_activity_node}.nid FROM {pi_activity_node} "
          . "LEFT JOIN {pi_stage_phase_activity} ON {pi_stage_phase_activity}.activity_id = {pi_activity_node}.nid "
          . "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase}.psp_id = {pi_stage_phase_activity}.psp_id "
          . "LEFT JOIN {pi_activity_actor} ON ( {pi_activity_actor}.inquiry_id = {pi_activity_node}.inquiry_id "
          . "AND {pi_activity_actor}.activity_id = {pi_activity_node}.activity_id) "
          . "LEFT JOIN {pi_activity_status} ON ( {pi_activity_status}.inquiry_id = {pi_activity_node}.inquiry_id "
          . "AND {pi_activity_status}.activity_id = {pi_activity_node}.activity_id) "
          . "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
          . "WHERE {pi_activity_node}.inquiry_id = %d "
          . "AND {pi_stage_phase.stage_id} = %d "
          . "AND {pi_stage_phase.phase_id} = %d "
          . "AND ( {pi_activity_actor}.uid = %d OR {og_uid}.uid = %d) "
          . "AND {pi_activity_status}.visible_status = 'start' "
          . "ORDER BY {pi_stage_phase_activity}.position ASC LIMIT 1)";

  $result = db_result(db_query($query, $inquiry_id, $stage_id, $phase_id, $uid, $uid));
  return $result;
}

// ----------------------------------------------------------------------------------

/**
 * Functions in this block are for data retrieval
 */

/**
 * New function to be get measure types.
 * @param type $inquiry_id
 * @param type $selected_measures
 * @param type $uid
 * @return type
 */
function get_selected_measures_types_for_inquiry_and_user($inquiry_id, $selected_measures, $uid) {

  $types = array();

  foreach (explode(',', $selected_measures) as $measure_id) {
    $types[] = node_load($measure_id);
  };

  return $types;
}

function get_selected_measures_headings_for_inquiry_and_user($inquiry_id, $selected_measures, $uid) {

  $headings = array();

  foreach (explode(',', $selected_measures) as $measure_id) {
    if ($measure_id != 0) {
      $query = "SELECT {node}.title AS title, {pi_available_measures}.symbol AS symbol, "
              . "{pi_available_measures}.units AS units, {pi_available_measures}.units_short AS units_short "
              . "FROM {pi_available_measures} "
              . "LEFT JOIN {node} ON {node}.nid = {pi_available_measures}.nid "
              . "WHERE ( {pi_available_measures}.nid = %d )";

      // print $query;
      $heading = db_fetch_object(db_query($query, $measure_id));

      if (isset($heading->symbol) AND ($heading->symbol != '')) {
        $label = $heading->symbol;
      } elseif (isset($heading->title) AND ($heading->title != '')) {
        $label = $heading->title;
      } else {
        $label = '';
      };

      if (isset($heading->units_short) AND ($heading->units_short != '')) {
        $units = ' (' . $heading->units_short . ')';
      } elseif (isset($heading->units) AND ($heading->units != '')) {
        $units = ' (' . $heading->units . ')';
      } else {
        $units = '';
      };

      $headings[] = $label . $units;
    };
  };

  return $headings;
}

function get_selected_measures_data_for_inquiry_and_user($inquiry_id, $selected_measures, $uid) {
  $result = array();

  foreach (explode(',', $selected_measures) as $measure_id) {
    //Just to make sure there are no spaces...
    $measure_id = trim($measure_id);
    if ($measure_id != 0) {
      $result[] = get_data_for_inquiry_measure_and_user($inquiry_id, $measure_id, $uid);
    }
  }

  //sort $result by up to first three columns
  /*   * *
    if (isset($result[2]) AND $result[2] != NULL AND $result[1] != NULL AND $result[0] != NULL) {
    array_multisort(
    $result[0], SORT_ASC, SORT_STRING,
    $result[1], SORT_ASC, SORT_STRING,
    $result[2], SORT_ASC, SORT_STRING
    );
    }
    elseif (isset($result[1]) AND $result[1] != NULL AND $result[0] != NULL) {
    array_multisort(
    $result[0], SORT_ASC, SORT_STRING,
    $result[1], SORT_ASC, SORT_STRING
    );
    }
    elseif (isset($result[0]) AND $result[0] != NULL) {
    array_multisort(
    $result[0], SORT_ASC, SORT_STRING
    );
    };
   */

  // Now rotate the values table so that each measure's data
  // is in a column (rather than a row)
  $i = 0;
  $j = 0;
  $fliped_results = array();

  foreach ($result as $row) {
    foreach ($row as $col) {
      $fliped_results[$i][$j] = $col;
      $i = $i + 1;
    }
    $j = $j + 1;
    $i = 0;
  }

  return $fliped_results;
}

/*
 * $query = "SELECT pi_selected_measures.nid FROM pi_selected_measures
 * LEFT JOIN node_access ON node_access.nid = pi_selected_measures.nid
 * LEFT JOIN node ON node.nid = pi_selected_measures.nid
 * LEFT JOIN pi_activity_node ON pi_activity_node.nid =  pi_selected_measures.nid
 * LEFT JOIN og_uid ON node_access.gid = og_uid.nid
 * WHERE (og_uid.uid = '" . $uid . "' OR node.uid = '" . $uid . "')
 * AND pi_activity_node.inquiry_id = '" . $inquiry_id . "' ";
 */

function get_data_for_inquiry_measure_and_user($inquiry_id, $measure_id, $uid) {

  $query = "SELECT DISTINCT {pi_collected_data}.nid AS nid, {pi_collected_data}.value AS value "
          . "FROM {pi_collected_data} "
          . "LEFT JOIN {pi_sort_data} ON {pi_collected_data}.nid = {pi_sort_data}.data "
          . "LEFT JOIN {node} ON {pi_collected_data}.nid = {node}.nid "
          . "LEFT JOIN {node_access} ON {node}.nid = {node_access}.nid "
          . "LEFT JOIN {og_uid} ON {node_access}.gid = {og_uid}.nid "
          . "WHERE ( {pi_collected_data}.available_measure_nid = %d) "
          . "AND ( {node}.uid = %d OR {og_uid}.uid = %d ) "
          . "ORDER BY {pi_sort_data}.weight, {pi_collected_data}.vid ASC";

  // print $query;
  $db_result = db_query($query, $measure_id, $uid, $uid);
  //echo "\n" . $query;

  $values = array();

  while ($result = db_fetch_object($db_result)) {
    //SQL orders the results as well as by VID
    //Therefore the higest VID is overrideing NID's with lower VID's
    $values[$result->nid] = $result->value;
  }

  $values = array_values($values);

  return $values;
}

//interface parameters
function show_activites($uid) {
  $query = "SELECT {pi_activity_preference}.show_activity FROM {pi_activity_preference} "
          . "LEFT JOIN {og_uid} ON {pi_activity_preference}.gid = {og_uid}.nid "
          . "WHERE ( {pi_activity_preference}.uid = %d OR {og_uid}.uid = %d ) ";
  $result = db_fetch_object(db_query($query, $uid, $uid));
  if (isset($result->show_activity) && $result->show_activity == 0) {
    return FALSE;
  } elseif (isset($result->show_activity) && $result->show_activity == 1) {
    return TRUE;
  } else {
    return TRUE;
  }
}

function show_phases($uid) {
  $query = "SELECT {pi_phase_preference}.show_phase FROM {pi_phase_preference} "
          . "LEFT JOIN {og_uid} ON {pi_phase_preference}.gid = {og_uid}.nid "
          . "WHERE ( {pi_phase_preference}.uid = %d OR {og_uid}.uid = %d)";
  $result = db_fetch_object(db_query($query, $uid, $uid));
  if (isset($result->show_phase) && $result->show_phase == 0) {
    return FALSE;
  } elseif (isset($result->show_phase) && $result->show_phase == 1) {
    return TRUE;
  } else {
    return TRUE;
  }
}

function get_viewable_activity_ids($inquiry_id, $uid) {
  $query = "SELECT DISTINCT( {pi_activity_status}.activity_id), {pi_phase}.weight, {pi_stage_phase_activity}.position FROM {pi_activity_status} "
          . "LEFT JOIN {pi_stage_phase_activity} ON {pi_activity_status}.activity_id = {pi_stage_phase_activity}.activity_id "
          . "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id "
          . "LEFT JOIN {pi_phase} ON {pi_stage_phase}.phase_id = {pi_phase}.nid "
          . "LEFT JOIN {pi_activity_actor} ON {pi_activity_status}.activity_id = {pi_activity_actor}.activity_id "
          . "LEFT JOIN {og_uid} ON {og_uid}.nid = {pi_activity_actor}.gid "
          . "WHERE ( {pi_activity_status}.inquiry_id = %d "
          . "AND ( {pi_activity_status}.visible_status = 'view' OR {pi_activity_status}.visible_status = 'edit')) "
          . "AND ( {og_uid}.uid = %d OR {pi_activity_actor}.uid = %d) "
          . "ORDER BY pi_phase.weight,pi_stage_phase_activity.position";

  // drupal_set_message(sprintf($query, $inquiry_id, $uid, $uid));
  $results = db_query($query, $inquiry_id, $uid, $uid);
  $activity_ids = array();
  while ($item = db_fetch_object($results)) {
    $activity_ids[] = $item->activity_id;
  }
  return $activity_ids;
}

/* php 5.3 array_replace not yet availalbe on MAMP */
/* this allows code to work for Paul */
if (!function_exists('array_replace')) {

  function array_replace(array &$array, array &$array1, $filterEmpty = false) {
    $args = func_get_args();
    $count = func_num_args() - 1;

    for ($i = 0; $i < $count; ++$i) {
      if (is_array($args[$i])) {
        foreach ($args[$i] as $key => $val) {
          if ($filterEmpty && empty($val))
            continue;
          $array[$key] = $val;
        }
      }
      else {
        trigger_error(
                __FUNCTION__ . '(): Argument #' . ($i + 1) . ' is not an array', E_USER_WARNING
        );
        return NULL;
      }
    }

    return $array;
  }

}
?>
