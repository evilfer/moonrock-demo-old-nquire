<?php
// $Id: pi_stage_selector.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for changing the inquiry stage
 */


/**
 * Implementation of pi_stage_selector_node_info().
 */

function pi_stage_selector_node_info() {
  return array(
	'pi_stage_selector' => array(
	 'name' => t('Stage selector name'), // Required.
	 'module' => 'pi_stage_selector',  // Required.
	 'description' => t('Module for changing the inquiry stage'), // Required.
	 'has_title' => TRUE,
	 'title_label' => t('Stage selector title label'),
	 'has_body' => TRUE,
	 'body_label' => t('Stage selector body label'),
	 'min_word_count' => 2,
	 'locked' => TRUE
	)
   );
}

/**

 * Implementation of pi_hypothesis_perm().

 */
function pi_stage_selector_perm() {
  return array('create pi_stage_selector content', 'edit pi_stage_selector');
}



/**

 * Implementation of pi_hypothesis_access().

 */
function pi_stage_selector_access($op, $node, $account) {

  global $user;

  if ($op == 'create') {
    return TRUE;//return (user_access('create pi_stage_selector'));
  }
  if ($op == 'update') {
    return TRUE;
  }
}



/**

 * Implementation of pi_stage_selector_form().

 */



function pi_stage_selector_form(&$node) {



  // Get metadata for this node type

  // (we use it for labeling title and body fields).

  // We defined this in pi_hypothesis_node_info().

  $type = node_get_types('type', $node);

  global $user;
  $uid = $user->uid;

  $details = get_inquiry_details_from_current_path();
  drupal_set_title("Change stage");
  $stage_nids = pi_stage_load_nids_for_user($details->inquiry_id, $uid);
  $stages = array();
  $stages_count = 1;
  
  foreach($stage_nids as $stage_nid) {
    $loaded_stage = node_load($stage_nid);
  	$stages[$stage_nid] = t($stages_count . ": " . $loaded_stage->title);
  	$stages_count++;  
  }
  
	$form['open_stages'] = array(
		'#type' => 'checkboxes',
  	'#title' => check_plain('Available stages'),
  	'#required' => FALSE,
  	'#description' => t('These are the stages whose activities will be actively available to the student to e.g. edit as well as view. You might use this if you have students catching up from a previous stage or moving ahead to a further stage. The selected \'New stage\' will be automatically available whether or not selected in these checkboxes.'),
  	'#weight' => -2,
  	'#options' => $stages
  );

  $form['title'] = array(
    '#type' => 'hidden',
    '#title' => check_plain($type->title_label),
    '#required' => FALSE,
    '#default_value' => $type->title_label,
    '#weight' => -5
  );


  $form['stage_options'] = array(
		'#type' => 'value',
		'#value' => $stages
  );


  $current_stage = get_current_stage_of_inquiry_and_user($details->inquiry_id, $user->uid);
  $current_stage_id = $current_stage->stage_id;


  $form['selected_stage'] = array(
	'#title' => t('New stage'),
	'#type' => 'select',
	'#description' => t('Select the inquiry stage that you now want to be highlighted.'),
	'#default_value' =>  array($current_stage_id),
	'#weight' => -3,
	'#options' => $form['stage_options']['#value']
  );
  
  
  /*
    $form['transition_type'] = array(
	'#title' => t('Required change'),
	'#type' => 'select',
	'#description' => t('Select how you want to alter access to activities'),
	'#options' => array("Restrict access to activities of this stage", "Add access to activities of this stage")
  );
*/


   $form['pcs_id'] = array(
		'#type' => 'hidden',
		'#value' => t($current_stage->pcs_id)
	);


  $prefix .= "<p>This allows you to change the current stage and determine which other stages are still open for the students.</p>";
  $form['#prefix'] = $prefix;

  return $form;
}


/**

 * Implementation of pi_stage_selector_insert().

 */
function pi_stage_selector_insert($node) {
	pi_update_stage($node);
}

function pi_stage_selector_update($node) {
	pi_update_stage($node);
}



/**

 * Implementation of pi_stage_selector_update().

 */
function pi_update_stage($node) {

  $details = get_inquiry_details_from_current_path();

  $selected_stage = $node->selected_stage;//$stages[$node->selected_stage];

  //db_query("UPDATE {pi_current_stage} SET stage_id = '%d' WHERE pcs_id = %d",$selected_stage, $node->pcs_id);
  db_query("UPDATE {pi_current_stage} SET stage_id = '%d' WHERE pcs_id = %d",$selected_stage, $node->pcs_id);
  
  $included_stages = array($selected_stage);
  
  foreach($node->open_stages as $choice) 
  {
  	if($choice) 
  	{
  		$included_stages[] = $choice;
  	}
  }
  $included_stages = array_unique($included_stages);
  
  $included_stages_strings = array();
  foreach($included_stages as $included_stage) 
  {
  	$included_stages_strings[] = "pi_stage_phase.stage_id = '" . $included_stage . "' ";
  }
  
  $included_stages_output = implode(" OR ", $included_stages_strings);

  $ouside_focus_query = "SELECT * FROM pi_activity_status LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id LEFT JOIN pi_inquiry_stage ON pi_stage_phase.stage_id = pi_inquiry_stage.stage_id WHERE pi_inquiry_stage.inquiry_id = '" . $details->inquiry_id . "' AND NOT (" . $included_stages_output . ") ";  
//  $ouside_focus_query = "SELECT * FROM {pi_activity_status} " 
//  . "LEFT JOIN {pi_stage_phase_activity} ON {pi_activity_status}.activity_id = {pi_stage_phase_activity}.activity_id " 
//  . "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id " 
//  . "LEFT JOIN {pi_inquiry_stage} ON {pi_stage_phase}.stage_id = {pi_inquiry_stage}.stage_id " 
//  . "WHERE {pi_inquiry_stage}.inquiry_id = %d AND NOT ( '%s' ) ";

//  $outside_status_list = db_query($ouside_focus_query, $details->inquiry_id, $included_stages_output);
  $outside_status_list = db_query($ouside_focus_query, $details->inquiry_id, $included_stages_output);
  
  //update outside focus activity status
  while($status_item = db_fetch_object($outside_status_list)) 
  {
  	$loaded_activity = load_activity($status_item->activity_id);
  	$new_status = find_new_status($loaded_activity->activity_type, $status_item->activity_id, $details->inquiry_id, $status_item->node_function, $status_item->visible_status, "pi_activity_leave_focus");
  	if ($new_status->node_function && $new_status->visible_status) 
  	{
  		$query = "UPDATE pi_activity_status SET node_function = \"" . $new_status->node_function . "\", visible_status = \"" . $new_status->visible_status . "\" WHERE pas_id = " . $status_item->pas_id . " ";
      db_query($query);
      //$query = "UPDATE {pi_activity_status} SET node_function = '%s' , visible_status = '%s' WHERE pas_id = %d";
  		//db_query($query, $new_status->node_function, $new_status->visible_status, $status_item->pas_id);
  	}
  }

  $inside_focus_query = "SELECT * FROM pi_activity_status LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id LEFT JOIN pi_inquiry_stage ON pi_stage_phase.stage_id = pi_inquiry_stage.stage_id WHERE pi_inquiry_stage.inquiry_id = " . $details->inquiry_id . " AND (" . $included_stages_output . ") ";
//  $inside_focus_query = "SELECT * FROM {pi_activity_status} "
//  	. "LEFT JOIN {pi_stage_phase_activity} ON {pi_activity_status}.activity_id = {pi_stage_phase_activity}.activity_id "
//  	. "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id "
//  	. "LEFT JOIN {pi_inquiry_stage} ON {pi_stage_phase}.stage_id = {pi_inquiry_stage}.stage_id "
//  	. "WHERE {pi_inquiry_stage}.inquiry_id = %d AND ( '%s' ) ";
  
  //update inside focus activity status
  $inside_status_list = db_query($inside_focus_query, $details->inquiry_id, $included_stages_output);
//  $inside_status_list = db_query($inside_focus_query, $details->inquiry_id, $included_stages_output);
  while($status_item = db_fetch_object($inside_status_list)) {
  	$loaded_activity = load_activity($status_item->activity_id);
  	$new_status = find_new_status($loaded_activity->activity_type, $status_item->activity_id, $details->inquiry_id, $status_item->node_function, $status_item->visible_status, "pi_activity_enter_focus");
  	if ($new_status->node_function && $new_status->visible_status) 
  	{
  		$query = "UPDATE pi_activity_status SET node_function = \"" . $new_status->node_function . "\", visible_status = \"" . $new_status->visible_status . "\" WHERE pas_id = " . $status_item->pas_id . " ";
  		//$query = "UPDATE {pi_activity_status} SET node_function = '%s' , visible_status = '%s' WHERE pas_id = %d ";
  	}
  	db_query($query);
  	//db_query($query, $new_status->node_function, $new_status->visible_status, $status_item->pas_id);
  }
}	
	
/*
  //activities outside the selected status
  if ($node->transition_type == 0) {
  $query = "SELECT * FROM pi_activity_status LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id LEFT JOIN pi_inquiry_stage ON pi_stage_phase.stage_id = pi_inquiry_stage.stage_id WHERE pi_inquiry_stage.inquiry_id = " . $details->inquiry_id . " AND NOT (pi_stage_phase.stage_id = " . $selected_stage . ") ";
  
  $status_list = db_query($query);
  while($status_item = db_fetch_object($status_list)) {
  	$loaded_activity = load_activity($status_item->activity_id);
  	$new_status = find_new_status($loaded_activity->activity_type, $status_item->activity_id, $details->inquiry_id, $status_item->node_function, $status_item->visible_status, "pi_activity_leave_focus");
  	if ($new_status->node_function && $new_status->visible_status) {
  		$query = "UPDATE pi_activity_status SET node_function = \"" . $new_status->node_function . "\", visible_status = \"" . $new_status->visible_status . "\" WHERE pas_id = " . $status_item->pas_id . " ";
  		db_query($query);
  	}
  }
  }
  //activities in the selected status
  $query = "SELECT * FROM pi_activity_status LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id LEFT JOIN pi_inquiry_stage ON pi_stage_phase.stage_id = pi_inquiry_stage.stage_id WHERE pi_inquiry_stage.inquiry_id = " . $details->inquiry_id . " AND pi_stage_phase.stage_id = " . $selected_stage . " ";
  
  //add this to the previous status table
  $status_list = db_query($query);
  
  $del_query = "DELETE FROM pi_previous_activity_status WHERE inquiry_id = '" . $details->inquiry_id . "' ";
  db_query($del_query);
  
  $prev_query = "INSERT INTO pi_previous_activity_status (pas_id, inquiry_id, activity_id, uid, gid, node_function, visible_status) 
  SELECT pas_id, pi_activity_status.inquiry_id, pi_activity_status.activity_id, pi_activity_status.uid, pi_activity_status.gid, pi_activity_status.node_function, pi_activity_status.visible_status 
  FROM pi_activity_status 
  LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id LEFT JOIN pi_inquiry_stage ON pi_stage_phase.stage_id = pi_inquiry_stage.stage_id WHERE pi_inquiry_stage.inquiry_id = " . $details->inquiry_id . " AND pi_stage_phase.stage_id = " . $selected_stage . " ";
  db_query($prev_query);

  while($status_item = db_fetch_object($status_list)) {
  	$loaded_activity = load_activity($status_item->activity_id);
  	$new_status = find_new_status($loaded_activity->activity_type, $status_item->activity_id, $details->inquiry_id, $status_item->node_function, $status_item->visible_status, "pi_activity_enter_focus");
  	if ($new_status->node_function && $new_status->visible_status) {
  		$query = "UPDATE pi_activity_status SET node_function = \"" . $new_status->node_function . "\", visible_status = \"" . $new_status->visible_status . "\" WHERE pas_id = " . $status_item->pas_id . " ";
  	}
  	db_query($query);
  }
  
}
*/
function find_new_status ($activity_type, $activity_id, $inquiry_id, $node_function, $visible_status, $table = "pi_activity_enter_focus") {
  
  $query = "SELECT node_function, visible_status FROM " . $table . " WHERE (activity_id = " . $activity_id . " OR activity_type = \"" . $activity_type . "\") AND (inquiry_id = " . $inquiry_id . " OR inquiry_id IS NULL) AND (prior_nf = \"" . $node_function . "\" OR prior_nf IS NULL) AND (prior_vs = \"" . $visible_status . "\" OR prior_vs IS NULL) ";
  
  $result = db_fetch_object(db_query($query));
  
  if (!$result->node_function) {
  
    $query = "SELECT node_function, visible_status FROM " . $table . " WHERE (activity_id = " . $activity_id . " OR activity_type = \"" . $activity_type . "\") AND (inquiry_id = " . $inquiry_id . " OR inquiry_id IS NULL) AND prior_nf = \"" . $node_function . "\" AND prior_vs = \"" . $visible_status . "\" ";
  
    $result = db_fetch_object(db_query($query));
    
    if (!$result->node_function) {
  
      $query = "SELECT node_function, visible_status FROM " . $table . " WHERE activity_id IS NULL AND activity_type IS NULL AND (inquiry_id = " . $inquiry_id . " OR inquiry_id IS NULL) AND prior_nf = \"" . $node_function . "\" AND prior_vs = \"" . $visible_status . "\" ";
    
      $result = db_fetch_object(db_query($query));
    }
  }
  return $result;
}

/*	
	$query = "SELECT node_function, visible_status FROM {%s} "
			. "WHERE ( activity_id = %d OR activity_type = '%s' ) "
			. "AND ( inquiry_id = %d OR inquiry_id IS NULL) "
			. "AND ( prior_nf = '%s' OR prior_nf IS NULL) "
			. "AND ( prior_vs = '%s' OR prior_vs IS NULL) ";
	
	$result = db_fetch_object(db_query($query, $table, $activity_id, $activity_type, $inquiry_id, $node_function, $visible_status));
	
	if (!$result->node_function) 
	{
		$query = "SELECT node_function, visible_status FROM %s "
				. "WHERE ( activity_id = %d OR activity_type = '%s' "
				. "AND ( inquiry_id = %d OR inquiry_id IS NULL) "
				. "AND prior_nf = '%s' AND prior_vs = '%s'";
	
		$result = db_fetch_object(db_query($query, $table, $activity_id, $activity_type, $inquiry_id, $node_function, $visible_status));
		
		if (!$result->node_function) 
		{
			$query = "SELECT node_function, visible_status FROM %s " 
					. "WHERE activity_id IS NULL AND activity_type IS NULL "
					. "AND (inquiry_id = %d OR inquiry_id IS NULL) " 
					. "AND prior_nf = '%s' AND prior_vs = '%s' ";
					
			$result = db_fetch_object(db_query($query, $table, $inquiry_id, $node_function, $visible_status));
		}
	}
	return $result;
}*/
 

//this function shows how activity status can be updated by a stage change
//for all activities in the stage it changes view to edit and unavailable to add
//for all activities outside the stage it changes edit to view and add to unavailable

function pi_change_activty_status_for_stage($inquiry_id, $stage_id, $transition_type) {
	make_change_to_status($inquiry_id, $stage_id, "add", "start", "unavailable", 1);
	make_change_to_status($inquiry_id, $stage_id, "edit", "edit", "view", 1);
	if ($transition_type == 0) {
		make_change_to_status($inquiry_id, $stage_id, "view", "view", "edit", 0);
		make_change_to_status($inquiry_id, $stage_id, "unavailable", "unavailable", "start", 0);
	}
}



function make_change_to_status($inquiry_id, $stage_id, $new_function, $new_visible_status, $test_visible_status, $valence) {

  $query = "UPDATE pi_activity_status ";
  $query .= "LEFT JOIN pi_stage_phase_activity ON ";
  $query .= "pi_activity_status.activity_id = pi_stage_phase_activity.activity_id ";
  $query .= "LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id ";
  $query .= "LEFT JOIN pi_inquiry_stage ON pi_stage_phase.stage_id = pi_inquiry_stage.stage_id ";
  $query .= "SET pi_activity_status.node_function = \"" . $new_function . "\", pi_activity_status.visible_status = \"" . $new_visible_status . "\" ";
  $query .= "WHERE pi_inquiry_stage.inquiry_id = " . $inquiry_id . " ";
  if ($valence) {
    $query .= "AND pi_stage_phase.stage_id = " .  $stage_id . " ";
  }
  else {
    $query .= "AND NOT (pi_stage_phase.stage_id = " .  $stage_id . ") ";
  }
  $query .= "AND pi_activity_status.visible_status = \"" . $test_visible_status . "\" ";
  db_query($query);
}

/*$query = "UPDATE {pi_activity_status} "
			. "LEFT JOIN {pi_stage_phase_activity} ON {pi_activity_status}.activity_id = {pi_stage_phase_activity}.activity_id "
			. "LEFT JOIN {pi_stage_phase} ON {pi_stage_phase_activity}.psp_id = {pi_stage_phase}.psp_id "
			. "LEFT JOIN {pi_inquiry_stage} ON {pi_stage_phase}.stage_id = {pi_inquiry_stage}.stage_id "
			. "SET {pi_activity_status}.node_function = '%s', {pi_activity_status}.visible_status = '%s' "
			. "WHERE {pi_inquiry_stage}.inquiry_id = %d ";
	
	
	if($valence) 
	{
		$query .= "AND {pi_stage_phase}.stage_id = %d ";
	}
	else 
	{
		$query .= "AND NOT ( {pi_stage_phase}.stage_id = %d ) ";
	}
	
	$query .= "AND {pi_activity_status}.visible_status = '%s'";
	
	db_query($query, $new_function, $new_visible_status, $inquiry_id, $stage_id, $test_visible_status);
}*/
