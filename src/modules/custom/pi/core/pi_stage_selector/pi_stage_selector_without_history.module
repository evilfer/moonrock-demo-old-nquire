<?php
// $Id: pi_stage_selector.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for changing the inquiry stage
 */


/**
 * Implementation of pi_stage_selector_node_info().
 */
function pi_stage_selector_node_info() {
	return array(
	'pi_stage_selector' => array(
		'name' => t('Stage selector'), // Required.
		'module' => 'pi_stage_selector',  // Required.
		'description' => t('Module for changing the inquiry stage'), // Required.
		'has_title' => TRUE,
		'title_label' => t('Stage selector title label'),
		'has_body' => TRUE,
		'body_label' => t('Stage selector body label'),
		'min_word_count' => 2,
		'locked' => TRUE
		)
	);
}

/**
* Implementation of hook_perm().
*/
function pi_stage_selector_perm() {
	return array('create pi_stage_selector content', 'edit pi_stage_selector');
}

/**
* Implementation of hook_access().
*/
function pi_stage_selector_access($op, $node) {
	global $user;
	//$inquiry = get_inquiry_details_from_current_path()
	//$node_function = get_node_function_of_activity ($inquiry->inquiry_id, $inquiry->activity_id, $user->uid)
	if ($op == 'create') {
		return TRUE;//return (user_access('create pi_stage_selector'));
	}
	if ($op == 'update' || $op == 'delete') {
		return TRUE;//return (user_access('edit own pi_stage_selector') && ($user->uid == $node->uid));
	}
}


/**
* Implementation of hook_form().
*/
function pi_stage_selector_form(&$node) {
	// Get metadata for this node type
	// (we use it for labeling title and body fields).
	// We defined this in pi_hypothesis_node_info().
	$type = node_get_types('type', $node);

	global $user;

	$inquiry_details = get_inquiry_details_from_current_path();
	
	$stage_nids = pi_stage_load_nids($inquiry_details->inquiry_id);
	$options = array();
	foreach($stage_nids as $stage_nid)
	{
		$stage = node_load($stage_nid);
		$options[$stage_nid] = "$stage->weight. $stage->title";
	}

	$form['title'] = array(
	    '#type' => 'hidden',
	    '#title' => check_plain($type->title_label),
	    '#required' => FALSE,
	    '#default_value' => $type->title_label,
	    '#weight' => -5
	);
	$form['stage_options'] = array(
		'#type' => 'value',
		'#value' => $options
	);

	$current_stage = get_current_stage_of_inquiry_and_user($inquiry->inquiry_id, $user->uid);
	$current_stage_id = $current_stage->stage_id;

	$form['selected_stage'] = array(
		'#title' => t('Selected stage'),
		'#type' => 'select',
		'#description' => t('Select the inquiry stage'),
		'#default_value' =>  array($current_stage_id),
		'#options' => $form['stage_options']['#value']
	);

	$form['transition_type'] = array(
		'#title' => t('Required change'),
		'#type' => 'select',
		'#description' => t('Select how you want to alter access to activities'),
		'#options' => array("Restrict access to activities of this stage", "Add access to activities of this stage")
	);

	$form['pcs_id'] = array(
		'#type' => 'hidden',
		'#value' => t($current_stage->pcs_id)
	);

	$prefix = "<p>This allows you to change the current stage and determine how this change effects access to activities.</p>";
	$form['#prefix'] = $prefix;
	return $form;
}


/**
* Implementation of hook_insert().
*/
function pi_stage_selector_insert($node) {
	pi_update_stage($node);
}

/**
* Implementation of hook_update().
*/
function pi_stage_selector_update($node) {
	pi_update_stage($node);
}


/**
 * 
 * @param unknown_type $node
 * @return unknown_type
 */
function pi_update_stage($node) {
	$details = get_inquiry_details_from_current_path();

	/*  //get stages of current inquiry in order
	$query = "SELECT stage_id FROM pi_inquiry_stage WHERE inquiry_id = " . $details->inquiry_id . " ORDER BY position ASC";
	$stage_results = db_query($query);
	$stages = array();

	while ($stage_result = db_fetch_object($stage_results)) {
	$stages[] = $stage_result->stage_id;
	}*/

	$selected_stage = $node->selected_stage;//$stages[$node->selected_stage];

	db_query("UPDATE {pi_current_stage} SET stage_id = '%d' WHERE pcs_id = %d", $selected_stage, $node->pcs_id);

	//activities outside the selected status
	if ($node->transition_type == 0) {
		$query = "SELECT * FROM pi_activity_status " .
			"LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id " . 
			"LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id " .
			"LEFT JOIN pi_stage ON pi_stage_phase.stage_id = pi_stage.nid " .
			"WHERE pi_stage.inquiry_nid = " . $details->inquiry_id . 
				" AND NOT (pi_stage_phase.stage_id = " . $selected_stage . ") ";

		$status_list = db_query($query);
		while($status_item = db_fetch_object($status_list))
		{
			$loaded_activity = load_activity($status_item->activity_id);
			$new_status = find_new_status($loaded_activity->activity_type, $status_item->activity_id, $details->inquiry_id, $status_item->node_function, $status_item->visible_status, "pi_activity_leave_focus");
			if ($new_status->node_function && $new_status->visible_status)
			{
				$query = "UPDATE pi_activity_status SET node_function = \"" . $new_status->node_function . "\", visible_status = \"" . $new_status->visible_status . "\" WHERE pas_id = " . $status_item->pas_id . " ";
				db_query($query);
			}
		}
	}
	//activities in the selected status
	$query = "SELECT * FROM pi_activity_status " . 
		"LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id " .
		"LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id " .
		"LEFT JOIN pi_stage ON pi_stage_phase.stage_id = pi_stage.nid " .
		"WHERE pi_stage.inquiry_nid = " . $details->inquiry_id . 
			" AND pi_stage_phase.stage_id = " . $selected_stage;

	//add this to the previous status table
	$status_list = db_query($query);

/*
	$del_query = "DELETE FROM pi_previous_activity_status WHERE inquiry_id = '" . $details->inquiry_id . "' ";
	db_query($del_query);

	$prev_query = "INSERT INTO pi_previous_activity_status (pas_id, inquiry_id, activity_id, uid, gid, node_function, visible_status) " .
	"SELECT pas_id, pi_activity_status.inquiry_id, pi_activity_status.activity_id, pi_activity_status.uid, pi_activity_status.gid, pi_activity_status.node_function, pi_activity_status.visible_status " . 
  	"FROM pi_activity_status " . 
	"LEFT JOIN pi_stage_phase_activity ON pi_activity_status.activity_id = pi_stage_phase_activity.activity_id " . 
	"LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id " . 
	"LEFT JOIN pi_stage ON pi_stage_phase.stage_id = pi_stage.nid ". 
	"WHERE pi_stage.inquiry_nid = " . $details->inquiry_id . 
		" AND pi_stage_phase.stage_id = " . $selected_stage;
	db_query($prev_query);
*/
	
	while($status_item = db_fetch_object($status_list))
	{
		$loaded_activity = load_activity($status_item->activity_id);
		$new_status = find_new_status($loaded_activity->activity_type, $status_item->activity_id, $details->inquiry_id, $status_item->node_function, $status_item->visible_status, "pi_activity_enter_focus");
		if ($new_status->node_function && $new_status->visible_status)
		{
			$query = "UPDATE pi_activity_status SET node_function = \"" . $new_status->node_function . "\", visible_status = \"" . $new_status->visible_status . "\" WHERE pas_id = " . $status_item->pas_id . " ";
		}
		db_query($query);
	}
}

/**
 * 
 * @param unknown_type $activity_type
 * @param unknown_type $activity_id
 * @param unknown_type $inquiry_id
 * @param unknown_type $node_function
 * @param unknown_type $visible_status
 * @param unknown_type $table
 * @return unknown_type
 */
function find_new_status($activity_type, $activity_id, $inquiry_id, $node_function, $visible_status, $table = "pi_activity_enter_focus") {
	
	$query = "SELECT node_function, visible_status FROM {" . $table . "} WHERE (activity_id = " . $activity_id . " OR activity_type = \"" . $activity_type . "\") AND (inquiry_id = " . $inquiry_id . " OR inquiry_id IS NULL) AND (prior_nf = \"" . $node_function . "\" OR prior_nf IS NULL) AND (prior_vs = \"" . $visible_status . "\" OR prior_vs IS NULL) ";
	$result = db_fetch_object(db_query($query));
	if (!$result->node_function)
	{
		$query = "SELECT node_function, visible_status FROM {" . $table . "} WHERE (activity_id = " . $activity_id . " OR activity_type = \"" . $activity_type . "\") AND (inquiry_id = " . $inquiry_id . " OR inquiry_id IS NULL) AND prior_nf = \"" . $node_function . "\" AND prior_vs = \"" . $visible_status . "\" ";
		$result = db_fetch_object(db_query($query));

		if (!$result->node_function) 
		{
			$query = "SELECT node_function, visible_status FROM {" . $table . "} WHERE activity_id IS NULL AND activity_type IS NULL AND (inquiry_id = " . $inquiry_id . " OR inquiry_id IS NULL) AND prior_nf = \"" . $node_function . "\" AND prior_vs = \"" . $visible_status . "\" ";
			$result = db_fetch_object(db_query($query));
		}
	}
	return $result;
}

/**
 * This function shows how activity status can be updated by a stage change
 * for all activities in the stage it changes view to edit and unavailable 
 * to add for all activities outside the stage it changes edit to view and 
 * add to unavailable
 * @param $inquiry_id
 * @param $stage_id
 * @param $transition_type
 * @return unknown_type
 */
function pi_change_activty_status_for_stage($inquiry_id, $stage_id, $transition_type) {
	make_change_to_status($inquiry_id, $stage_id, "add", "start", "unavailable", 1);
	make_change_to_status($inquiry_id, $stage_id, "edit", "edit", "view", 1);
	if ($transition_type == 0) {
		make_change_to_status($inquiry_id, $stage_id, "view", "view", "edit", 0);
		make_change_to_status($inquiry_id, $stage_id, "unavailable", "unavailable", "start", 0);
	}
}


/**
 * 
 * @param unknown_type $inquiry_id
 * @param unknown_type $stage_id
 * @param unknown_type $new_function
 * @param unknown_type $new_visible_status
 * @param unknown_type $test_visible_status
 * @param unknown_type $valence
 * @return unknown_type
 */
function make_change_to_status($inquiry_id, $stage_id, $new_function, $new_visible_status, $test_visible_status, $valence) {
	$query = "UPDATE pi_activity_status ";
	$query .= "LEFT JOIN pi_stage_phase_activity ON ";
	$query .= "pi_activity_status.activity_id = pi_stage_phase_activity.activity_id ";
	$query .= "LEFT JOIN pi_stage_phase ON pi_stage_phase_activity.psp_id = pi_stage_phase.psp_id ";
	$query .= "LEFT JOIN pi_inquiry_stage ON pi_stage_phase.stage_id = pi_inquiry_stage.stage_id ";
	$query .= "SET pi_activity_status.node_function = \"" . $new_function . "\", pi_activity_status.visible_status = \"" . $new_visible_status . "\" ";
	$query .= "WHERE pi_inquiry_stage.inquiry_id = " . $inquiry_id . " ";
	if ($valence) {
		$query .= "AND pi_stage_phase.stage_id = " .  $stage_id . " ";
	}
	else {
		$query .= "AND NOT (pi_stage_phase.stage_id = " .  $stage_id . ") ";
	}
	$query .= "AND pi_activity_status.visible_status = \"" . $test_visible_status . "\" ";
	db_query($query);
}
