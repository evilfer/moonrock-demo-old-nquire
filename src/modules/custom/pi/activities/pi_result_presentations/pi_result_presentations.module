<?php

// $Id: pi_result_presentations.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "result presentations" node type
 */

/**
 * Implementation of hook_node_info().
 */
function pi_result_presentations_node_info() {
  return array(
      'pi_result_presentations' => array(
          'name' => t('Inquiry result presentations'), // Required.
          'module' => 'pi_result_presentations', // Required.
          'description' => t('A presentation for exploring part of a collected dataset?'), // Required.
          'has_title' => TRUE,
          'title_label' => t('Short title'),
          'has_body' => TRUE,
          'body_label' => t('Conclusion'),
          'locked' => TRUE
      )
  );
}

/**
 * Implementation of hook_perm().
 */
function pi_result_presentations_perm() {
  return array('create pi_result_presentations content', 'edit pi_result_presentations');
}

/**
 * Implementation of hook_access().
 */
function pi_result_presentations_access($op, $node, $account) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  if ($op == 'create') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }

  if ($op == 'update') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
  if ($op == 'delete') {
    if (arg(0) == 'node' && arg(2) == 'delete') {
      //get inquiry for session id and activity
      $nid = arg(1);
      $activity_id = get_activity_id_for_nid($nid);
      $inquiry_id = get_inquiry_id_for_activity_id($activity_id);
      if ($inquiry_id && $activity_id) {
        return check_node_function_of_activity($inquiry_id, $activity_id, $uid, 'edit');
      } else {
        return FALSE;
      }
    } else {
      return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
  }
}

/**
 * Implementation of hook_form().
 */
function pi_result_presentations_form(&$node) {
  $all_key_questions = pi_sort_key_questions_get_options();
  $key_question_options = array();
  foreach ($all_key_questions as $key => $question) {
    $key_question_options[$key] = $question['#title'];
  }

  if (count($key_question_options) > 0) {
    $form['key_question_id'] = array(
        '#type' => 'select',
        '#title' => t('Key question to investigate'),
        '#required' => TRUE,
        '#default_value' => $node->key_question_id,
        '#description' => t('Your graph will display evidence about Moon rocks that can be used to answer your key questions.'),
        '#options' => $key_question_options,
        '#weight' => 0
    );
  };

  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Title'),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#description' => t('Enter a title for your graph'),
      '#weight' => -10
  );

  // ['body_filter']
  $form['body'] = array(
      '#type' => 'textarea',
      '#title' => t('Conclusion'),
      '#required' => FALSE,
      '#default_value' => $node->body,
      '#description' => t('Enter the conclusion you extract from your graph'),
      '#weight' => -9
  );

  $chart_types = array(
      'line-bar' => t('Bar chart'),
      'histogram' => t('Histogram'),
  );

  $form['chart_type'] = array(
      '#type' => 'radios',
      '#title' => t('Chart type'),
      '#options' => $chart_types,
      '#required' => TRUE,
      '#default_value' => strlen($node->chart_type) > 0 ? $node->chart_type : 'line-bar',
      '#description' => t('Histograms are useful to plot any type of measures.</br>In contrast, bar graphs can plot several numeric measurements'),
  );

  $measures = pi_result_presentations_get_options();
  $all_measures = _pi_result_presentations_format_measure_options($measures, 'all');
  $form['abscissa'] = array(
      '#type' => 'select',
      '#options' => $all_measures,
      '#title' => t('Abscissa variable'),
      '#required' => TRUE,
      '#description' => t('Select the variable that will be used in the x asis of the graph'),
      '#default_value' => $node->abscissa,
  );

  $form['ordinate'] = array(
      '#type' => 'hidden',
      '#required' => TRUE,
      '#title' => 'Ordinate variables',
      '#default_value' => $node->ordinate,
  );
  $form['color'] = array(
      '#type' => 'hidden',
      '#required' => FALSE,
      '#default_value' => $node->color,
  );



  $numeric_measures = _pi_result_presentations_format_measure_options($measures, 'numeric');
  $form['measures']['bar_ordinate'] = array(
      '#type' => 'checkboxes',
      '#options' => $numeric_measures,
      '#title' => t('Graph ordinate variables'),
      '#required' => TRUE,
      '#description' => t('Select the variables that will be used in the y asis of the graph')
  );

  $form['measures']['histogram_ordinate'] = array(
      '#type' => 'select',
      '#options' => $all_measures,
      '#title' => t('Histogram ordinate variable'),
      '#required' => TRUE,
      '#description' => t('Select the variable that will be used in the y asis of the graph'),
      '#default_value' => '',
  );

  if (count($measures['color']) == 1) {
    $color_measure = $measures['measures'][$measures['color'][0]];
    $value = array(
        $color_measure->nid => $color_measure->nid == $node->color, // ? $color_measure->nid : '';
    );

    $form['measures']['bar_color'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Graph color'),
        '#options' => array(
            $color_measure->nid => t('Use measure ') . check_plain($color_measure->title) . t(' to paint the graph'),
        ),
        '#description' => t("Decide whether you want to use a measure to select the graph colors"),
        '#default_value' => $value,
    );
  }



  $prefix = '';
  /* 	$hypothesis_param = find_hypothesis_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);

    if ($hypothesis_param) {
    $hypothesis_node = node_load($hypothesis_param);

    $prefix .= theme_pi_hypothesis($hypothesis_node, FALSE, FALSE);
    } */
  //$prefix .= '<p>' . t('Enter a short title, select a set of your measures to generate a data table you can use to answer your question, and enter what you would predict to find.') . '</p>';

  $form['#prefix'] = $prefix;

  return $form;
}

function _pi_result_presentations_format_measure_options($measures, $type) {
  $options = array();
  foreach ($measures[$type] as $nid) {
    $options[$nid] = $measures['measures'][$nid]->title;
  }
  return $options;
}

/**
 * This function validates the presentaion the user wants to create.
 * It checks that non of the selected y axis measures are non numeric.
 * Additionally it checks if at least 2 measures are selected (x+y)
 * @param $form
 * @param $form_state
 */
function __pi_result_presentations_validate(&$form, &$form_state) {
  return;

  global $user;
  $details = get_inquiry_details_from_current_path();

  $is_y_scale_numeric = TRUE;
  $is_numeric = TRUE;
  $selectedMeasure = 0;
  $measure_weight = -99999;
  $measure_id = -1;
  $non_numerics = array();

  $categories = $form->onepageprofile_categories;

  if (is_array($categories)) {
    foreach ($categories as $measure_id => $category) {
      if ($category['status'] != 0) {
        $selectedMeasure++;
        $weights[$selectedMeasure] = $category['weight'];

        $x_axis_labels = get_data_for_inquiry_measure_and_user($details->inquiry_id, $measure_id, $user->uid);

        $is_numeric = TRUE;

        foreach ($x_axis_labels as $x_axis_label) {

          if (!empty($x_axis_label) && !is_numeric($x_axis_label)) {
            $is_numeric = FALSE;
          }
        }

        if ($is_numeric == FALSE) {
          $non_numeric[] = intval($category['weight']);
          $is_y_scale_numeric = FALSE;
        }
      }
    }
  }

  if (count($non_numeric) == 1) {
    //Check if the non numeric selected measure is the first one (x axis)
    //In case it is, the selection is OK.
    if ($non_numeric[0] <= min($weights)) {
      $is_y_scale_numeric = TRUE;
    }
  }

  //	if($is_y_scale_numeric == FALSE)
  //	{
  //		form_set_error('Selected Measure',t('One or more measues can not be displayed because they are not numeric. Only the first selection can be non numeric.'));
  //	}

  if ($selectedMeasure < 2) {
    form_set_error('Selected Measure', t('At least two measures have to be selected'));
  }
}

/**
 * Implementation of hook_insert().
 */
function pi_result_presentations_insert($node) {
  $sql = "INSERT INTO {pi_result_presentations} (nid, vid, key_question_id, chart_type, abscissa, ordinate, color)
      VALUES ( %d, %d, %d, '%s', '%s', '%s', '%s' )";

  db_query($sql, $node->nid, $node->vid, $node->key_question_id, $node->chart_type, $node->abscissa, $node->ordinate, $node->color);
}

/**
 * Implementation of hook_update().
 */
function pi_result_presentations_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    pi_result_presentations_insert($node);
  } else {
    db_query("DELETE FROM {pi_result_presentations} WHERE vid = %d", $node->vid);
    pi_result_presentations_insert($node);
  }
}

/**
 * Implementation of hook_delete().
 */
function pi_result_presentations_delete(&$node) {
  db_query("DELETE FROM {pi_result_presentations} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_result_presentations_load($node) {
  $node = db_fetch_object(db_query('SELECT * FROM {pi_result_presentations} WHERE vid = %d', $node->vid));
  return $node;
}

/**
 * Implementation of hook_view().
 */
function pi_result_presentations_view($node, $teaser = FALSE, $page = FALSE) {

  /*
    //In case standard node view is used, the answer to the key question is
    //displayed first...

    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
   */
  $node->content['pi_result_presentations'] = array(
      '#value' => theme('pi_result_presentations', $node, $teaser),
      '#weight' => 10
  );


  return $node;
}

/**
 * Implementation of hook_theme().
 */
function pi_result_presentations_theme() {
  return array(
      'pi_result_presentations_node_form' => array(
          'arguments' => array('form'),
      ),
      'pi_result_presentations' => array(
          'arguments' => array('node', 'teaser'),
      ),
  );
}

/**
 * implementation of theme_hook().
 */
function theme_pi_result_presentations($node, $teaser) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  $chart_activity_id = $details->activity_id;

  //In case node has activity ID info, use it.
  //This is the case in the summary page
  if ($node->activity_id) {
    $chart_activity_id = $node->activity_id;
  }

  $output = "";

  if (!$teaser) {
    if (isset($node->key_question_id) AND ($node->key_question_id > 0)) {
      $loaded_key_question = node_load($node->key_question_id);
      $output .= "<p><strong>Key question:</strong> " . check_plain($loaded_key_question->title) . "</p>";
    }
    $output .= $node->body;
  } else {
    $output .= $node->teaser;
  }

  $output .= "<p><img class='chart_image' src='?q=activity/" . $chart_activity_id . "/chart.png'></p>";

  if (!$teaser) {
    $output .= '<p>' . l('Download (csv) data file', 'export/' . $details->activity_id . '/csv') . '</p>';
  }

  return $output;
}

function spin_array($data_array) {

  // spin data table
  $row = 0;

  $spin_array = array();
  foreach ($data_array as $data_row) {
    $col = 0;
    foreach ($data_row as $data_value) {
      $spin_array[$col][$row] = $data_value;
      $col++;
    };
    $row++;
  };
  return $spin_array;
}

function Gradient($HexFrom, $HexTo, $ColorSteps) {

  // Gradient function code from - http://www.geekpedia.com/code163_Generate-Gradient-Within-Hex-Range-In-PHP.html


  $FromRGB['r'] = hexdec(substr($HexFrom, 0, 2));

  $FromRGB['g'] = hexdec(substr($HexFrom, 2, 2));

  $FromRGB['b'] = hexdec(substr($HexFrom, 4, 2));


  $ToRGB['r'] = hexdec(substr($HexTo, 0, 2));

  $ToRGB['g'] = hexdec(substr($HexTo, 2, 2));

  $ToRGB['b'] = hexdec(substr($HexTo, 4, 2));


  $StepRGB['r'] = ($FromRGB['r'] - $ToRGB['r']) / ($ColorSteps + 1);

  $StepRGB['g'] = ($FromRGB['g'] - $ToRGB['g']) / ($ColorSteps + 1);

  $StepRGB['b'] = ($FromRGB['b'] - $ToRGB['b']) / ($ColorSteps + 1);


  $GradientColors = array();


  for ($i = 0; $i <= $ColorSteps; $i++) {

    $RGB['r'] = floor($FromRGB['r'] - ($StepRGB['r'] * $i));

    $RGB['g'] = floor($FromRGB['g'] - ($StepRGB['g'] * $i));

    $RGB['b'] = floor($FromRGB['b'] - ($StepRGB['b'] * $i));


    $HexRGB['r'] = sprintf('%02x', ($RGB['r']));

    $HexRGB['g'] = sprintf('%02x', ($RGB['g']));

    $HexRGB['b'] = sprintf('%02x', ($RGB['b']));


    $GradientColors[] = implode(NULL, $HexRGB);
  }

  return $GradientColors;
}

function result_presentations_teaser_view($node) {

  global $user;
  $details = get_inquiry_details_from_current_path();

  drupal_set_title(t($node->title));

  $output = "";

  $selected_measures = "";
  $delim = "";

  $sql = "SELECT available_measure FROM {pi_result_presentations} WHERE nid = %d AND vid = %d AND status = '1' ORDER BY weight ASC";

  $measures = db_query($sql, $node->nid, $node->vid);

  while ($measure = db_fetch_object($measures)) {
    $selected_measures .= $delim . $measure->available_measure;
    if ($delim == "") {
      $delim = ",";
    }
  }

  $header = get_selected_measures_headings_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
  $rows = get_selected_measures_data_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);

  $data = spin_array($rows);

  $x_axis_labels_heading = array_shift($header);
  $x_axis_labels = array_shift($data);

  $counter = 0;
  $min_y_value = 99999;
  $max_y_value = -99999;
  $colour_array = Gradient("FF0000", "0000FF", count($x_axis_labels) - 1);

  $scatter_graph_check = 0;
  foreach ($x_axis_labels as $x_axis_label) {
    if (is_numeric($x_axis_label)) {
      $scatter_graph_check = 1;
    };
  };

  // now make the chart
  if ($scatter_graph_check) {

    foreach ($data as $data_row) {

      unset($chart);

      $chart = array(
          '#chart_id' => t($node->title . '-' . $counter),
          '#title' => chart_title(t($header[$counter] . ' versus ' . $x_axis_labels_heading), '444444', 14),
          '#type' => CHART_TYPE_SCATTER,
          '#size' => chart_size(700, 200),
          '#adjust_resolution' => TRUE,
      );

      // $chart['#shape_markers'][] = array('o',$colour_array[$counter],0,0,8);
      $chart['#data'][] = $x_axis_labels;

      $text_data = 0;
      foreach ($data_row as $data_item) {
        if (!(is_numeric($data_item))) {
          $text_data = 1;
        };
      };

      if ($text_data == 0) {

        // add data sets to chart
        $chart['#data'][] = $data_row;

        // add chart legend for each data set
        // $chart['#legends'][] = $header[$counter];
        // colour each data set differently
        $chart['#data_colors'][] = $colour_array[$counter];

        // record minimum data value
        if (min($data_row) < $min_y_value) {
          $min_y_value = min($data_row);
        };
        // record maximum data value
        if (max($data_row) > $max_y_value) {
          $max_y_value = max($data_row);
        };

        // y axis - heading and max value
        $chart['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][0][] = chart_mixed_axis_range_label(0, $max_y_value);
        $chart['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][1][] = chart_mixed_axis_label(t('  '));
        $chart['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][2][] = chart_mixed_axis_label(t($header[$counter]), 95);

        // x axis - heading and values
        $chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][0][] = chart_mixed_axis_range_label(0, max($x_axis_labels));
        $chart['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][1][] = chart_mixed_axis_label(t($x_axis_labels_heading), 50);

        // render chart
        $output .= chart_render($chart);
        $output .= t('<p> </p>');

        $counter++;
      };
    };
  } else {
    $chart_1 = array(
        '#chart_id' => t($node->title),
        '#title' => chart_title(t($node->title), '444444', 14),
        '#type' => CHART_TYPE_BAR_V_GROUPED,
        '#size' => chart_size(700, 200),
        '#adjust_resolution' => TRUE,
    );

    foreach ($data as $data_row) {

      $text_data = 0;
      foreach ($data_row as $data_item) {
        if (!(is_numeric($data_item))) {
          $text_data = 1;
        };
      };

      if ($text_data == 0) {

        // add data sets to chart
        $chart_1['#data'][] = $data_row;

        // add chart legend for each data set
        $chart_1['#legends'][] = $header[$counter];

        // colour each data set differently
        $chart_1['#data_colors'][] = $colour_array[$counter];

        // record minimum data value
        if (min($data_row) < $min_y_value) {
          $min_y_value = min($data_row);
        };
        // record maximum data value
        if (max($data_row) > $max_y_value) {
          $max_y_value = max($data_row);
        };

        $counter++;
      };
    };

    // y axis - heading and max value
    $chart_1['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][1][] = chart_mixed_axis_label(t('Value'), 95);
    $chart_1['#mixed_axis_labels'][CHART_AXIS_Y_LEFT][0][] = chart_mixed_axis_range_label($min_y_value, $max_y_value);

    // x axis - heading and values
    $chart_1['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][2][] = chart_mixed_axis_label(t($x_axis_labels_heading), 50);
    foreach ($x_axis_labels as $x_axis_label) {
      $chart_1['#mixed_axis_labels'][CHART_AXIS_X_BOTTOM][1][] = chart_mixed_axis_label(t(substr($x_axis_label, 0, 3)));
    };

    // render chart
    $output .= chart_render($chart_1);
  };

  return $output;
}

/**
 * Theme pi_results_presentations form
 */
function theme_pi_result_presentations_node_form($form) {
  drupal_add_css(drupal_get_path('module', 'pi_result_presentations') . '/css/pi_result_presentations.css');
  drupal_add_js(drupal_get_path('module', 'pi_result_presentations') . '/js/pi_result_presentations.js');

  $output = '';
  $output .= drupal_render($form['title']);
  $output .= drupal_render($form['key_question_id']);

  $output .= "<div><b>" . t("Graph configuration:") . "</b></div>";
  $output .= '<div id="pi-result-presentations-measures">';

  $output .= '<div id="pi-result-presentations-select-type" class="pi-result-presentations-measures-block">';
  $output .= drupal_render($form['chart_type']);
  $output .= '</div>';

  $output .= '<div id="pi-result-presentations-select-abscissa" class="pi-result-presentations-measures-block">';
  $output .= drupal_render($form['abscissa']);
  $output .= '</div>';

  $output .= '<div id="pi-result-presentations-select-ordinates" class="pi-result-presentations-measures-block">';
  $output .= '<div id="pi-result-presentations-select-ordinates-bar" class="pi-result-presentations-measures-sub-block">';
  $output .= drupal_render($form['measures']['bar_ordinate']);
  $output .= '</div>';
  $output .= '<div id="pi-result-presentations-select-ordinates-histogram" class="pi-result-presentations-measures-sub-block">';
  $output .= drupal_render($form['measures']['histogram_ordinate']);
  $output .= '</div>';
  $output .= '</div>';

  if (isset($form['measures']['bar_color'])) {
    $output .= '<div id="pi-result-presentations-select-color" class="pi-result-presentations-measures-block">';
    $output .= drupal_render($form['measures']['bar_color']);
    $output .= '</div>';
  }
  $output .= "</div>";

  $output .= "<div style='padding-top: 20px'><b>" . t('Preview') . "</b></div>";
  $output .= "<div id='pi-result-presentations-preview-container'>";
  $output .= "<div id='pi-result-presentations-preview-no' class='messages error'><ul><li>"
          . t("No ordinate variable has been selected.")
          . "</ul></div>";
  $output .= "<img id='pi-result-presentations-preview'></img>";
//  $output .= "<img id='pi-result-presentations-preview-loading' src='" . drupal_get_path('module', 'pi_result_presentations') . '/images/throbber.gif' . "'></img>";
  $output .= "<div id='pi-result-presentations-preview-loading'></div>";
  $output .= "</div>";
  $output .= drupal_render($form);
  return $output;

  // Header
  $header = array(
      t('Measure'),
      t('Status'),
      t('Weight'),
  );

  // Rows for the tabledrag
  $rows = array();
  $tree = &$form['onepageprofile_categories'];
  foreach (element_children($tree) as $key) {
    $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

    $row = array();
    $row[] = drupal_render($tree[$key]['title']);
    $row[] = drupal_render($tree[$key]['status']);
    $row[] = drupal_render($tree[$key]['weight']);

    $rows[] = array('data' => $row, 'class' => 'draggable');
  }

  // Build the output

  if (count($rows) > 0) {
    $output = '<br/><strong>' . t('Select and order  measures for your presentation:') . '</strong>';
    $output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
    $output .= drupal_render($form);
  } else {
    $output = '<p>' . t('No chosen measures are available.') . '</p>';
  }
  return $output;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_result_presentations_get_options() {
  global $user;
  $details = get_inquiry_details_from_current_path();


  $sort_measures_nid = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
  $sort_measures = node_load($sort_measures_nid);

  $measures = array(
      'measures' => array(),
      'all' => array(),
      'numeric' => array(),
      'color' => array(),
  );
  foreach ($sort_measures->categories as $key => $measure_status) {
    if ($measure_status['#status'] == 'key' || $measure_status['#status'] == 'selected') {
      $measure = node_load($key);
      $measures['measures'][$measure->nid] = $measure;
      $measures['all'][] = $measure->nid;
      if ($measure->data_type == 'numeric') {
        $measures['numeric'][] = $measure->nid;
      } else if ($measure->content_options) {
        if (function_exists("{$measure->content_options}_nquire_data_get_numeric_value")) {
          $measures['numeric'][] = $measure->nid;
        } else if (function_exists("{$measure->content_options}_nquire_data_get_color_value")) {
          $measures['color'][] = $measure->nid;
        }
      }
    }
  }

  return $measures;
}

function pi_data_export_csv() {

  global $user;
  $details = get_inquiry_details_from_current_path();

  $nid = get_nid_for_inquiry_activity_and_user($details->inquiry_id, $details->activity_id, $user->uid);
  $node = node_load($nid);

  $selected_measures = "{$node->abscissa},{$node->ordinate}";

  $header = get_selected_measures_headings_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
  $rows = get_selected_measures_data_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
  $types = get_selected_measures_types_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);


  $name = str_replace(' ', '_', $node->title);

  $filename = 'csv_data-' . $name . '.csv';


  header('Content-type: text/csv');

  header('Content-Disposition: attachment; filename=' . $filename);

  echo create_csv_from_table($header, $rows, $types);

  module_invoke_all('exit');
  exit();
}

//
function create_csv_from_table($header, $rows, $types) {

  $output = "";

  // print out headers
  $output .= "\"" . implode("\",\"", $header) . "\"\r\n";

  // now the data
  $count = 1;
  foreach ($rows as $row) {
    $elements = array();
    foreach ($row as $i => $item) {
      $elements[] = pi_chart_get_text_value($item, $types[$i]);
    }
    $output .= "\"" . implode("\",\"", $elements) . "\"\r\n";
    $count++;
  }

  return $output;
}

function pi_data_export_kml() {


  global $user;
  $details = get_inquiry_details_from_current_path();

  $nid = get_nid_for_inquiry_activity_and_user($details->inquiry_id, $details->activity_id, $user->uid);
  $node = node_load($nid);


  $selected_measures = "";
  $delim = "";

  $measures = db_query("SELECT available_measure FROM {pi_result_presentations} WHERE nid = %d AND vid = %d AND status = '1' ORDER BY weight ASC", $node->nid, $node->vid);

  while ($measure = db_fetch_object($measures)) {
    $selected_measures .= $delim . $measure->available_measure;
    if ($delim == "") {
      $delim = ",";
      $first_measure = $measure->available_measure;
    };
  };


  $header = get_selected_measures_headings_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
  $rows = get_selected_measures_data_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);

  $name = str_replace(' ', '_', $node->title);
  $filename = 'kml_data-' . $name . '.kml';

  $lat = array();
  $long = array();

  $first_measure_node = node_load($first_measure);

  header('Content-type: text/kml');
  header('Content-Disposition: attachment; filename=' . $filename);

  // print_r($location_nids);
  echo create_kml_from_table($header, $rows, $first_measure_node->content_options);
  module_invoke_all('exit');
  exit();
}

function create_kml_from_table($header, $rows, $content_type) {
  $output = "";
  $output .= '<?xml version="1.0" encoding="UTF-8"?>';
  $output .= '<kml xmlns="http://earth.google.com/kml/2.2">';
  $output .= '<Document>';
  $x = 0;
  $y = 0;
  $loc_count = 1;
  foreach ($rows as $row) {
    $x = 0;

    $query = "SELECT nid FROM {node} WHERE type = '%s' AND title = '%s' ORDER BY nid DESC LIMIT 1";
    $location_nid = db_result(db_query($query, $content_type, $row[0]));

    $loc = node_load($location_nid);
    if ($loc->field_location_latitude && $loc->field_location_longitude) {
      $lat = $loc->field_location_latitude;
      $long = $loc->field_location_longitude;
    }

    $output .= '<Placemark>';
    $output .= '<name>' . $loc_count . '. ' . $row[0] . '</name>';
    $output .= '<description>';
    foreach ($row as $item) {
      $output .= '<strong>' . $header[$x] . '</strong>: ' . $item . '<br />';
      $x = $x + 1;
    }
    $output .= '</description>';
    $output .= '<Point>';
    $output .= '<coordinates>' . $long[0]['value'] . ',' . $lat[0]['value'] . ',0</coordinates>';
    $output .= '</Point>';
    $output .= '</Placemark>';
    $y = $y + 1;
    $loc_count = $loc_count + 1;
  };
  $output .= '</Document>';
  $output .= '</kml>';
  return $output;
}

