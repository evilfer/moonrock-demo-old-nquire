<?php

// $Id: pi_sort_data.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_data_node_info() {
  return array(
      'pi_sort_data' => array(
          'name' => t('Data sort data'), // Required.
          'module' => 'pi_sort_data', // Required.
          'description' => t('Data sort'), // Required.
          'has_title' => FALSE,
          'title_label' => t('Sorted data'),
          'has_body' => TRUE,
          'body_label' => t('Sort of collected data'),
          'locked' => TRUE,
          'add_node_type' => 'pi_data'
      )
  );
}

function pi_sort_data_perm() {
  
}

function pi_sort_data_access($op, $node, $account) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  if ($op == 'create') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }

  if ($op == 'update') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
}

/**
 * Implementation of hook_theme().
 */
function pi_sort_data_theme() {
  return array(
      'pi_sort_data_node_form' => array(
          'arguments' => array('form'),
      ),
      'pi_sort_data' => array(
          'arguments' => array('node', 'teaser', 'question_data'),
      ),
      'pi_sort_data_question_selection' => array(
          'arguments' => array(),
      ),
  );
}

/**
 * hook_form() for pi_sort_data which provides draggable sorting for pi_data nodes in an inquiry
 * @param $node the pi_sort_data node if it is to be edited, as per drupal 6 API
 */
function pi_sort_data_form(&$node) {
  global $user;
  $node_details = get_inquiry_details_from_current_path();

  $current_activity = NULL;
  if (is_numeric($node_details->activity_id)) {
    $current_activity = load_activity($node_details->activity_id);
  }

  if ($current_activity->name) {
    $users_group = get_group_of_type($user->uid, $current_activity->audience, $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);
    if ($users_group != false) {
      $group = node_load($users_group);
      $sort_for = $group->title;
    } else {
      $sort_for = $user->name;
    }
    $node_title = check_plain(t('Data for ') . $sort_for);
  } else {
    $type = node_get_types('type', $node);
    $node_title = $type->name;
  }

  // Build the form
  $form = array();
  if ($current_activity->description) {
    $form['#prefix'] = $current_activity->description;
  }

  $form['title'] = array(
      '#type' => 'hidden',
      '#value' => $node_title,
  );

  $form['autosort'] = array(
      '#type' => 'checkbox',
      '#title' => t('Sort automatically using menu order'),
      '#default_value' => $node->autosort,
  );

  // onepageprofile_categories and tree used for draggable menu items
  $form['onepageprofile_categories'] = array(
      '#tree' => TRUE,
  );

  // Add the sorted data for this node and the unsorted ones to the end
  if (isset($node->nid)) {
    $sorted_collected_data = $node->categories;
  } else {
    $sorted_collected_data = array();
  }

  $all_collected_data = pi_sort_data_get_options();

  $data_to_show = pi_merge_content_item_lists($sorted_collected_data, $all_collected_data);

  // set $tree to point to the above $form['onepageprofile_categories'] object
  $tree = &$form['onepageprofile_categories'];
  foreach ($data_to_show as $data_nid => $data_item) {
    // if data item doesn't exist anymore, the don't add it to the form!
    $data_item_node = node_load($data_nid);
    if ($data_item_node) {
      $title = $data_item_node->title;
      //Overrride the data item title with activity title for node
      $data_activity_id = get_activity_id_for_nid($data_item_node->nid);
      if ($data_activity_id) {
        $data_activity = load_activity($data_activity_id);
        if ($data_activity) {
          if (strlen($data_activity->name) > 0) {
            $title = $data_activity->name;
          }
        }
      }
      // add $tree entries for current category (i.e. $key)
      $tree[$data_nid]['title'] = array(
          '#value' => check_plain($title),
      );

      $tree[$data_nid]['description'] = array(
          '#value' => node_view($data_item_node, TRUE, TRUE),
      );

      $tree[$data_nid]['weight'] = array(
          '#type' => 'weight',
          '#delta' => count($data_to_show),
          '#default_value' => $data_to_show[$data_nid]['#weight'],
      );
    }
  }
  return $form;
}

function pi_sort_data_insert($node) {
  if (count($node->onepageprofile_categories) > 0) {
    foreach ($node->onepageprofile_categories as $key => $measure) {
      db_query("INSERT INTO {pi_sort_data} (nid, vid, data, weight) VALUES (%d, %d, '%s', %d)", $node->nid, $node->vid, $key, $measure['weight']);
    }
  }
  db_query("INSERT INTO {pi_auto_sort} (nid, vid, autosort) VALUES (%d, %d, %d)", $node->nid, $node->vid, $node->autosort);
}

function pi_sort_data_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    pi_sort_data_insert($node);
  } else {
    db_query("DELETE FROM {pi_sort_data} WHERE vid = %d", $node->vid);
    db_query("DELETE FROM {pi_auto_sort} WHERE vid = %d", $node->vid);
    pi_sort_data_insert($node);
  }
}

function pi_sort_data_delete(&$node) {
  db_query("DELETE FROM {pi_sort_data} WHERE nid = %d", $node->nid);
  db_query("DELETE FROM {pi_auto_sort} WHERE nid = %d", $node->nid);
}

function pi_sort_data_load($node) {
  $autosort = db_result(db_query("SELECT autosort FROM pi_auto_sort WHERE vid = %d", $node->vid));
  $result = new stdClass;
  $result->autosort = $autosort;
  $result->categories = pi_sort_data_get_choice($node);
  return $result;
}

function pi_get_titles_of_nodes_of_type($type) {
  $result = db_query("SELECT title FROM node WHERE type = '%s'", $type);
  $count = 0;
  $result_list = array();
  while ($object = db_fetch_object($result)) {
    $result_list[$object->title] = $count++;
  }
  return $result_list;
}

function pi_get_measure_value_list($measure_node) {
  if ($measure_node->list_options) {
    $explode = explode("\n", $measure_node->list_options);
    $measure_values = array();
    foreach ($explode as $key => $value) {
      $measure_values[rtrim($value)] = $key;
    }
  } elseif ($measure_node->content_options) {
    $measure_values = pi_get_titles_of_nodes_of_type($measure_node->content_options);
  }
  return $measure_values;
}

function pi_sort_data_items_around_key_measures($sorted_data_items, $key_measures, $selected_measure_nid) {
  $key_measure_value_array = array();
  if ($key_measures) {
    foreach ($key_measures as $key => $key_measure) {
      $measure_node = node_load($key);
      if ($measure_node->list_options || $measure_node->content_options) {
        $key_measure_value_array[$key] = pi_get_measure_value_list($measure_node);
      } else {
        return $sorted_data_items;
      }
    }
  }

  $key_measure_data_keys = array();
  $count = 0;
  if ($key_measures) {
    foreach ($key_measures as $key => $key_measure) {
      $key_measure_data_keys[$key] = $selected_measure_nid . '-' . $key;
      $testnode = node_load($key);
    }
  }

  $km_values = array();
  foreach ($sorted_data_items as $data_key => $info) {
    $data_node = node_load($data_key);
    //$km_values[$data_key] = array();
    $km_values['nid'][] = $data_key;
    foreach ($key_measure_data_keys as $key_measure => $key_measure_data_key) {
      $value = $data_node->categories[$key_measure_data_key]["#value"];
      //$km_values[$data_key][$key_measure] = $key_measure_value_array[$key_measure][$value];
      $km_values[$key_measure][] = $key_measure_value_array[$key_measure][$value];
    }
  }
  $eval_string = 'array_multisort(';
  foreach ($key_measures as $key => $value) {
    $eval_string .= '$km_values[' . $key . '],SORT_ASC,';
  }
  $eval_string .= '$km_values[\'nid\'],SORT_ASC);';
  eval($eval_string);

  /**
   * FIX (eloy)
   * sort by descending creation date   
   */
  //$count = 0;
  foreach ($km_values['nid'] as $km_nid) {
    //$sorted_data_items[$km_nid]["#weight"] = $count++;
    $sorted_data_items[$km_nid]["#weight"] = $count++;
  }

  uasort($sorted_data_items, my_weight_compare);
  return $sorted_data_items;
}

function pi_sort_data_get_measure_information() {
  global $user;
  $node_details = get_inquiry_details_from_current_path();


  $selected_measure_nid = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);
  $selected_measure_node = node_load($selected_measure_nid);

  $measures = array();
  $content_measures = array();
  if (is_array($selected_measure_node->categories)) {
    foreach ($selected_measure_node->categories as $nid => $category) {
      $measure = node_load($nid);
      $measures[$nid] = $measure;
      if ($measure->content_options) {
        $content_measures[$measure->content_options] = $nid;
      }
    }
  }

  return array(
      'measures' => $measures,
      'content_measures' => $content_measures,
      'selected_measures_nid' => $selected_measure_nid,
  );
}

function pi_sort_data_get_process_item($node, $measures_info) {
  $item = array();
  foreach ($measures_info['measures'] as $nid => $_) {
    $key = "{$measures_info['selected_measures_nid']}-{$nid}";
    $item[$nid] = $node->categories[$key]['#value'];
  }
  return $item;
}


function pi_sort_data_view($node, $teaser, $page = FALSE) {
  global $user;
  $node_details = get_inquiry_details_from_current_path();

  $node = node_prepare($node, $teaser);

  if (is_numeric($node_details->activity_id)) {
    $current_activity = load_activity($node_details->activity_id);
    if ($current_activity->name) {
      drupal_set_title(check_plain($current_activity->name));
    }
  }

  $questions = pi_sort_key_questions_get_options();
  $questions['0'] = array('#title' => t('unasigned'));
  $question_data = array();

  // Assemble an array of key questions in the output format (build_activity_link makes this a link with icon)
  $already_sorted_data_items = $node->categories;
  $unsorted_data_items = pi_sort_data_get_options();
  $sorted_data_items = pi_merge_content_item_lists($already_sorted_data_items, $unsorted_data_items);
  $node->key_measures = array();

  $selected_measure_nid = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);
  if ($selected_measure_nid) {
    $selected_measures_node = node_load($selected_measure_nid);
    if ($selected_measures_node) {
      $selected_measures = $selected_measures_node->measures_list;

      foreach ($questions as $question_nid => $question) {
        $use_measure = $question_nid == '0' ?
                moonrock_sample_utils_filter_visible_measures($selected_measures) :
                moonrock_sample_utils_filter_visible_measures_for_question($selected_measures, $question_nid);

        $measure_headers = array(t('Data'));

        foreach ($selected_measures as $key => $measure) {
          if ($use_measure[$key]) {
            $measure_node = node_load($key);
            $measure_text = check_plain($measure_node->title);
            if (strlen($measure_node->units_short) > 0) {
              $measure_text .= " ({$measure_node->units_short})";
            }
            $measure_headers[] = $measure_text;
          }
        }

        $question_data[$question_nid]['title'] = $question['#title'];
        $question_data[$question_nid]['measures'] = $use_measure;
        $question_data[$question_nid]['header'] = $measure_headers;
        $question_data[$question_nid]['values'] = array();
      }
    }
  }


  //sort  combined list according to measures
  //comment this out to return to standard sort order
  /* if ($node->autosort && count($sorted_data_items) > 1) {
    $sorted_data_items = pi_sort_data_items_around_key_measures($sorted_data_items, $node->key_measures, $selected_measure_nid);
    } */


  foreach (array_keys($sorted_data_items) as $sorted_data_items_nid) {
    $data_item_activity_id = get_activity_id_for_nid($sorted_data_items_nid);
    if ($data_item_activity_id) {
      $data_item_node = node_load($sorted_data_items_nid);

      $question_nid = $data_item_node->key_question;
      $group = isset($question_data[$question_nid]) ? $question_nid : '0';

      $values = pi_data_table_row_values($data_item_node, $node_details, $data_item_activity_id, $question_data[$group]['measures']);
      $created = t('Created: ') . '<br />' . format_date($data_item_node->created, 'custom', 'Y/m/d H:i');

      $created .= '<br/>'
              . l('edit', 'activity/' . $data_item_activity_id . '/edit') . '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'
              . l('delete', 'node/' . $sorted_data_items_nid . '/delete', array('query' => 'destination=phase/' . $node_details->phase_id));

      array_unshift($values, $created);
      array_unshift($question_data[$group]['values'], array(
          'data' => $values,
          'class' => 'pi-sort-data-row',
          'key_question_id' => $question_nid,
      ));
    }
  }

  if ($teaser) {
//Link to add a new key question
    //cannot get activity id from $node_details when viewing a list of activity teasers
    $activity_id_for_this_node = get_activity_id_for_nid($node->nid);
    $link_output = make_add_activity_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $activity_id_for_this_node, $user->uid);
    $node->content['pi_sort_data_add_link'] = array(
        '#value' => $link_output,
        '#weight' => -3
    );
  }

  $node->content['pi_sort_data'] = array(
      '#value' => theme('pi_sort_data', $node, $teaser, $question_data),
      '#weight' => 2
  );

  return $node;
}

function theme_pi_sort_data_question_selection() {
  moonrock_sample_utils_load_javascript_modules_support();
  moonrock_sample_utils_load_cookie_support();
  drupal_add_js(drupal_get_path('module', 'pi_sort_data') . '/js/filter.js');

  $questions = pi_sort_key_questions_get_options();

  $output = '<select id="pi-sort-data-key-question" name="key_questions">';
  foreach ($questions as $nid => $question) {
    $output .= '<option value="' . $nid . '">' . $question['#title'] . '</option>';
  }
  $output .= '<option value="0" style="font-style: italic;">unasigned</option>';
  $output .= '</select>';

  return $output;
}

function theme_pi_sort_data($node, $teaser, $question_data) {
  drupal_add_js(drupal_get_path('module', 'pi_sort_data') . '/js/sorttable.js');
  drupal_add_css(drupal_get_path('module', 'pi_sort_data') . '/css/sorttable.css');

  $output = '';

  $output .= theme('pi_sort_data_question_selection');


  foreach ($question_data as $question_nid => $data) {
    $output .= '<div class="pi-sort-data-list" key_question_id="' . $question_nid . '">'
            . t('Data for question: <i>') . $data['title'] . '</i>'
            . theme('table', $data['header'], $data['values'], array(
                'class' => 'sortable'
            ));

    $output .= '</div>';
  }

  return $output;
}

/**
 * Theme for sort data form
 */
function theme_pi_sort_data_node_form($form) {
  $output = '';

  drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

  /* 	// Header
    $header = array(
    t('Data'),
    t('Weight')
    );
   */
  // Rows for the tabledrag
  $rows = array();

  $tree = &$form['onepageprofile_categories'];
  foreach (element_children($tree) as $key) {
    $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

    $row = array();
    $tree[$key]['title']['#prefix'] = '<span style="white-space:nowrap;font-size:130%;font-weight:bold;margin-right:15px;">';
    $tree[$key]['title']['#suffix'] = '</span>';

    $tree[$key]['description']['#prefix'] = '<span style="font-size:90%;">';
    $tree[$key]['description']['#suffix'] = '</span>';

    $modified_description = str_replace(array('<div', '</div', 'class="submitted"'), array('<span', '</span', 'class="submitted" style="display:none"'), $tree[$key]['description']['#value']);
    $tree[$key]['description']['#value'] = $modified_description;

    $row[] = array('data' => drupal_render($tree[$key]['title']),
        'style' => 'white-space:nowrap;'
    );
    $row[] = drupal_render($tree[$key]['description']);
    $row[] = drupal_render($tree[$key]['weight']);

    $rows[] = array('data' => $row, 'class' => 'draggable');
  }

  if (count($rows) == 0) {
    if (arg(2) == 'add') {
      $output .= '<p> Press <strong>Save</strong> to start adding your data.</p>';
    } else {
      $output .= "<p>No data is available.</p>";
    }
  } else {
    $output .= theme('table', NULL, $rows, array('id' => 'onepageprofile-categories'));
  }
  $output .= drupal_render($form);

  return $output;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_data_get_choice($node) {
  $query = "SELECT * FROM {pi_sort_data} AS pi_sort_data "
          . "WHERE pi_sort_data.nid = %d "
          . "AND pi_sort_data.vid = %d "
          . "ORDER BY weight ASC";
  $result = db_query($query, $node->nid, $node->vid);
  $data = array();
  while ($row = db_fetch_object($result)) {
    $loaded_node = node_load($row->data);
    if ($loaded_node != false) {
      $activity_nid = get_activity_id_for_nid($loaded_node->nid);
      $activity = load_activity($activity_nid);
      $title = $loaded_node->title;
      // Activity title is better here, so if it's set, use that
      if ($activity) {
        if ($activity->name) {
          $title = $activity->name;
        }
      }
      $data[$row->data] = array(
          '#weight' => count($data),
          '#title' => check_plain($title)
      );
    }
  }
  return $data;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_data_get_options() {
  global $user;
  $details = get_inquiry_details_from_current_path();

  $nids = pi_activity_get_available_nids_of_type($user->uid, $details->inquiry_id, 'pi_data');
  $items = pi_activity_map_fields_from_nids($nids, array('title' => '#title'));
  foreach (array_keys($items) as $nid) {
    $items[$nid]['#weight'] = 0;
  }
  return $items;
}
