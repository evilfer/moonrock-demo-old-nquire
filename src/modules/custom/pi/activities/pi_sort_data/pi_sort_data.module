<?php
// $Id: pi_sort_data.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_data_node_info() {
	return array(
	    'pi_sort_data' => array(
		    'name' => t('Data sort data'), // Required.
		    'module' => 'pi_sort_data',  // Required.
		    'description' => t('Data sort'), // Required.
		    'has_title' => FALSE,
		    'title_label' => t('Sorted data'),
		    'has_body' => TRUE,
		    'body_label' => t('Sort of collected data'),
		    'locked' => TRUE,
		    'add_node_type' => 'pi_data'
		    )
		    );

}

function pi_sort_data_perm() {
}

function pi_sort_data_access($op, $node, $account) {
	global $user;
	$details = get_inquiry_details_from_current_path();

	if ($op == 'create') {
		return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
	}

	if ($op == 'update') {
		return check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
	}
}


/**
 * Implementation of hook_theme().
 */
function pi_sort_data_theme() {
	return array(
	    'pi_sort_data_node_form' => array(
	    	'arguments' => array('form'),
	),
	    'pi_sort_data' => array(
	   		'arguments' => array('node', 'teaser', 'data_items_to_show'),
	),
	);
}


/**
 * hook_form() for pi_sort_data which provides draggable sorting for pi_data nodes in an inquiry
 * @param $node the pi_sort_data node if it is to be edited, as per drupal 6 API
 */
function pi_sort_data_form(&$node) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();

	$current_activity = NULL;
	if (is_numeric($node_details->activity_id))
	{
		$current_activity = load_activity($node_details->activity_id);
	}

	if ($current_activity->name)
	{
		$users_group = get_group_of_type($user->uid, $current_activity->audience,
		$node_details->inquiry_id, $node_details->stage_id,
		$node_details->phase_id, $node_details->activity_id);
		if($users_group!=false)
		{
			$group = node_load($users_group);
			$sort_for = $group->title;
		}
		else
		{
			$sort_for = $user->name;
		}
		$node_title = check_plain(t('Data for ') . $sort_for);
	}
	else
	{
		$type = node_get_types('type', $node);
		$node_title = $type->name;
	}

	// Build the form
	$form = array();
	if($current_activity->description)
	{
		$form['#prefix'] = $current_activity->description;
	}

	$form['title'] = array (
        '#type' => 'hidden',
        '#value' => $node_title,
	);

	 $form['autosort'] = array (
        '#type' => 'checkbox',
        '#title' => t('Sort automatically using menu order'),
	      '#default_value' => $node->autosort,
  );
  
	// onepageprofile_categories and tree used for draggable menu items
	$form['onepageprofile_categories'] = array(
        '#tree'   => TRUE,
	);

	// Add the sorted data for this node and the unsorted ones to the end
	if(isset($node->nid))
	{
		$sorted_collected_data = $node->categories;
	}
	else
	{
		$sorted_collected_data = array();
	}

	$all_collected_data = pi_sort_data_get_options();

	$data_to_show = pi_merge_content_item_lists($sorted_collected_data, $all_collected_data);

	// set $tree to point to the above $form['onepageprofile_categories'] object
	$tree = &$form['onepageprofile_categories'];
	foreach($data_to_show as $data_nid => $data_item)
	{
		// if data item doesn't exist anymore, the don't add it to the form!
		$data_item_node = node_load($data_nid);
		if($data_item_node)
		{
			$title = $data_item_node->title;
			//Overrride the data item title with activity title for node
			$data_activity_id = get_activity_id_for_nid($data_item_node->nid);
			if($data_activity_id)
			{
				$data_activity = load_activity($data_activity_id);
				if($data_activity)
				{
					if(strlen($data_activity->name)>0)
					{
						$title = $data_activity->name;
					}
				}
			}
			// add $tree entries for current category (i.e. $key)
			$tree[$data_nid]['title'] = array(
	            '#value' => check_plain($title),
			);

			$tree[$data_nid]['description'] = array(
				'#value' => node_view($data_item_node, TRUE, TRUE),
			);

			$tree[$data_nid]['weight'] = array(
	            '#type'          => 'weight',
	            '#delta'         =>count($data_to_show),
	            '#default_value' => $data_to_show[$data_nid]['#weight'],
			);
		}
	}
	return $form;
}

function pi_sort_data_insert($node) {
	if(count($node->onepageprofile_categories) > 0)
	{
		foreach($node->onepageprofile_categories as $key => $measure)
		{
			db_query("INSERT INTO {pi_sort_data} (nid, vid, data, weight) VALUES (%d, %d, '%s', %d)",
			$node->nid, $node->vid, $key, $measure['weight']);
		}
	}
	db_query("INSERT INTO {pi_auto_sort} (nid, vid, autosort) VALUES (%d, %d, %d)", $node->nid, $node->vid, $node->autosort);
}

function pi_sort_data_update($node) {
	// if this is a new node or we're adding a new revision,
	if ($node->revision)
	{
		pi_sort_data_insert($node);
	}
	else
	{
		db_query("DELETE FROM {pi_sort_data} WHERE vid = %d", $node->vid);
		db_query("DELETE FROM {pi_auto_sort} WHERE vid = %d", $node->vid);
		pi_sort_data_insert($node);
	}
}

function pi_sort_data_delete(&$node) {
	db_query("DELETE FROM {pi_sort_data} WHERE nid = %d", $node->nid);
	db_query("DELETE FROM {pi_auto_sort} WHERE nid = %d", $node->nid);
}


function pi_sort_data_load($node) {
  $autosort = db_result(db_query("SELECT autosort FROM pi_auto_sort WHERE vid = %d", $node->vid));
	$result = new stdClass;
	$result->autosort = $autosort;
	$result->categories = pi_sort_data_get_choice($node);
	return $result;
}

function pi_get_titles_of_nodes_of_type($type) {
	$result = db_query("SELECT title FROM node WHERE type = '%s'", $type);
	$count = 0;
	$result_list = array();
	while($object = db_fetch_object($result)) {
		$result_list[$object->title] = $count++;
	}
	return $result_list;
}

function pi_get_measure_value_list($measure_node) {
	if($measure_node->list_options) {
		$explode = explode("\n", $measure_node->list_options);
		$measure_values = array();
		foreach($explode as $key => $value) {
			$measure_values[rtrim($value)] = $key;
		}
	}
	elseif($measure_node->content_options) {
		$measure_values = pi_get_titles_of_nodes_of_type($measure_node->content_options);
	}
	return $measure_values;
}

function pi_sort_data_items_around_key_measures($sorted_data_items, $key_measures, $selected_measure_nid) {
	$key_measure_value_array = array();
	if($key_measures) {
		foreach ($key_measures as $key => $key_measure) {
			$measure_node = node_load($key);
			if($measure_node->list_options || $measure_node->content_options) {
				$key_measure_value_array[$key] = pi_get_measure_value_list($measure_node);
			}
			else {
				return $sorted_data_items;
			}
		}
	}

	$key_measure_data_keys = array();
	$count = 0;
	if($key_measures) {
		foreach ($key_measures as $key => $key_measure) {
			$key_measure_data_keys[$key] = $selected_measure_nid.'-'.$key;
			$testnode = node_load($key);
		}
	}

	$km_values = array();
	foreach($sorted_data_items as $data_key => $info) {
		$data_node = node_load($data_key);
		//$km_values[$data_key] = array();
		$km_values['nid'][] = $data_key;
		foreach($key_measure_data_keys as $key_measure => $key_measure_data_key) {
			$value = $data_node->categories[$key_measure_data_key]["#value"];
			//$km_values[$data_key][$key_measure] = $key_measure_value_array[$key_measure][$value];
			$km_values[$key_measure][] = $key_measure_value_array[$key_measure][$value];
		}
	}
	$eval_string = 'array_multisort(';
	foreach($key_measures as $key => $value) {
		$eval_string .= '$km_values[' . $key . '],SORT_ASC,';
	}
	$eval_string .= '$km_values[\'nid\'],SORT_ASC);';
	eval($eval_string);

	$count = 0;
	foreach($km_values['nid'] as $km_nid) {
		$sorted_data_items[$km_nid]["#weight"] = $count++;
	}

	uasort($sorted_data_items,my_weight_compare);
	return $sorted_data_items;
}

function pi_sort_data_view($node, $teaser, $page = FALSE) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();

	$node = node_prepare($node, $teaser);

	if (is_numeric($node_details->activity_id))
	{
		$current_activity = load_activity($node_details->activity_id);
		if ($current_activity->name)
		{
			drupal_set_title(check_plain($current_activity->name));
		}
	}

	// Assemble an array of key questions in the output format (build_activity_link makes this a link with icon)
	$already_sorted_data_items = $node->categories;

	$unsorted_data_items = pi_sort_data_get_options();

	$sorted_data_items = pi_merge_content_item_lists($already_sorted_data_items, $unsorted_data_items);

	$node->key_measures = array();

	$selected_measure_nid = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);
	if($selected_measure_nid)
	{
		$selected_measures_node = node_load($selected_measure_nid);
		if($selected_measures_node)
		{
			$selected_measures = $selected_measures_node->measures_list;
			foreach($selected_measures as $key => $measure)
			{
				if($measure['#status']=='key')
				{
					$node->key_measures[$key] = $measure['#title'];
				}
			}
		}
	}

	//sort  combined list according to measures
	//comment this out to return to standard sort order
	if($node->autosort && count($sorted_data_items) > 1) {
		$sorted_data_items = pi_sort_data_items_around_key_measures($sorted_data_items, $node->key_measures, $selected_measure_nid);
	}
	
	
	$data_items_to_show = array();

	foreach(array_keys($sorted_data_items) as $sorted_data_items_nid)
	{
		$data_item_activity_id = get_activity_id_for_nid($sorted_data_items_nid);
		if ($data_item_activity_id)
		{
			$data_item_node = node_load($sorted_data_items_nid);
			$data_item_activity = pi_activity_load($data_item_activity_id);
			$activity_link = build_activity_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $data_item_activity_id, $user->uid, 'heading');
			$activity_teaser = pi_activity_teaser($data_item_node, $data_item_activity, 'view');
			$data_items_to_show[] = array(	'title' => $activity_link,
											'description' => $activity_teaser );
		}
	}

	if($teaser)
	{
		//Link to add a new key question
		//cannot get activity id from $node_details when viewing a list of activity teasers
		$activity_id_for_this_node = get_activity_id_for_nid($node->nid);
		$link_output = make_add_activity_link($node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $activity_id_for_this_node, $user->uid);
		$node->content['pi_sort_data_add_link'] =  array(
            '#value' =>$link_output,
            '#weight' => -3
		);
	}

	$node->content['pi_sort_data'] = array(
            '#value' => theme('pi_sort_data', $node, $teaser, $data_items_to_show),
            '#weight' => 2
	);

	return $node;
}

function theme_pi_sort_data($node, $teaser, $data_items_to_show)
{
	global $user;

	$output = '';

	$header = array( t("Data") );

	$rows = array();
	if (is_array($data_items_to_show))
	{
		foreach($data_items_to_show as $data_item)
		{
			$title_for_row = $data_item['title'];
			$description_for_row = $data_item['description'];

			$rows[] = array('data' => $title_for_row . ' ' . $description_for_row, 'class' => 'activity');
		}
	}

	if(count($rows) > 0)
	{
		$key_measures_count = count($node->key_measures);
		if($key_measures_count > 0)
		{
			// $measures_text = t(' for your key %measures ', array( '%measures' =>  format_plural( count($node->key_measures), t('measure'), t('measures') ) ) );
			if ($key_measures_count > 1) {
				$measures_text = t(' for your key measures ');
			}
			else {
				$measures_text = t(' for your key measure ');
			}
			foreach($node->key_measures as $key => $measure_name)
			{
				unset($node->key_measures[$key]);
				switch(count($node->key_measures))
				{
					case 0:
						$measures_text .= $measure_name;
						break;
					case 1:
						$measures_text .= $measure_name . t(' and ');
						break;
					default:
						$measures_text .= $measure_name . ', ';
				}
			}
		}
		$output .= '<p>';
		$output .= t('You have collected the following data ' . $measures_text . '.');
		$output .= t(' Click the activity to sort them or add new data.');
		$output .= '</p>';
		$output .= theme('item_list', $rows, NULL, 'ul', array('class' => 'activity'));

		//$output .= theme('table', $header, $rows);
	}
	else {
		$output .= '<p>No data entries are available</p>';
	}
	return $output;
}



/**
 * Theme for sort data form
 */
function theme_pi_sort_data_node_form($form) {
	$output = '';

	drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

	/*	// Header
	 $header = array(
		t('Data'),
		t('Weight')
		);
		*/
	// Rows for the tabledrag
	$rows = array();

	$tree = &$form['onepageprofile_categories'];
	foreach (element_children($tree) as $key) {
		$tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

		$row = array();
		$tree[$key]['title']['#prefix'] = '<span style="white-space:nowrap;font-size:130%;font-weight:bold;margin-right:15px;">';
		$tree[$key]['title']['#suffix'] =  '</span>';

		$tree[$key]['description']['#prefix'] = '<span style="font-size:90%;">';
		$tree[$key]['description']['#suffix'] = '</span>';

		$modified_description = str_replace(array('<div', '</div', 'class="submitted"'),
		array('<span', '</span', 'class="submitted" style="display:none"'),
		$tree[$key]['description']['#value']);
		$tree[$key]['description']['#value'] = $modified_description;

		$row[] = array('data' => drupal_render($tree[$key]['title']),
					'style' => 'white-space:nowrap;'
					);
					$row[] = drupal_render($tree[$key]['description']);
					$row[] = drupal_render($tree[$key]['weight']);

					$rows[] = array('data' => $row, 'class' => 'draggable');
	}

	if (count($rows) == 0)
	{
		if(arg(2) == 'add')
		{
			$output  .= '<p> Press <strong>Save</strong> to start adding your data.</p>';
		}
		else
		{
			$output .= "<p>No data is available.</p>";
		}
	}
	else
	{
		$output .= theme('table', NULL, $rows, array('id' => 'onepageprofile-categories'));
	}
	$output .= drupal_render($form);

	return $output;
}

/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_data_get_choice($node) {
	$query = "SELECT * FROM {pi_sort_data} AS pi_sort_data "
	. "WHERE pi_sort_data.nid = %d "
	. "AND pi_sort_data.vid = %d "
	. "ORDER BY weight ASC";
	$result = db_query($query, $node->nid, $node->vid);
	$data = array();
	while ($row = db_fetch_object($result))
	{
		$loaded_node = node_load($row->data);
		if($loaded_node!=false)
		{
			$activity_nid = get_activity_id_for_nid($loaded_node->nid);
			$activity = load_activity($activity_nid);
			$title = $loaded_node->title;
			// Activity title is better here, so if it's set, use that
			if($activity)
			{
				if($activity->name)
				{
					$title = $activity->name;
				}
			}
			$data[$row->data] = array(
	            '#weight' => count($data),
	            '#title'  => check_plain($title)
			);
		}
	}
	return $data;
}


/**
 * Load the user edit form and grab all of the fieldsets
 */
function pi_sort_data_get_options() {
	global $user;
	$details = get_inquiry_details_from_current_path();

	$items = array();
	$nids = pi_activity_get_available_nids_of_type($user->uid, $details->inquiry_id, 'pi_data');
	$items = pi_activity_map_fields_from_nids($nids, array('title' => '#title'));
	foreach(array_keys($items) as $nid)
	{
		$items[$nid]['#weight'] = 0;
	}
	return $items;
}
