<?php
// $Id: pi_sort_measures.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

/**
 * hook_node_info()
 * @return array of node data as per hook_node api
 */
function pi_sort_measures_node_info() {
	return array(
			'pi_sort_measures' => array(
					'name' => t('Inquiry measures selection'), // Required.
					'module' => 'pi_sort_measures',  // Required.
					'description' => t('Inquiry measures selection: selection of which measures to record and which of these are key measures.'), // Required.
					'has_title' => TRUE,
					'title_label' => t('Selected measures'),
					'has_body' => FALSE,
					'locked' => TRUE,
					'add_node_type' => 'pi_available_measures')
	);
}

/**
 * Hook node_perm()
 * @return unknown_type
 */
function pi_sort_measures_perm() {
}

/*
 * hook_access()
* @return unknown
*/
function pi_sort_measures_access($op, $node) {
	global $user;
	$details = get_inquiry_details_from_current_path();

	if ($op == 'create') {
		return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
	}
	if ($op == 'update') {
		return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
	}
}

/**
 * Implementation of hook_theme()
 * @return unknown_type
 */
function pi_sort_measures_theme() {
	return array(
			'pi_sort_measures_node_form' => array(
			//      		'template' => 'pi_sort_measures-display-form',
					'arguments' => array('form'),
			),
			'pi_sort_measures' => array(
					'arguments' => array('node','teaser'),
			),
			'pi_sort_measures_region' => array(
					'arguments' => 'title', 'description', 'empty', 'measures'
			)
	);
}


/**
 * Admin page to change measure weights
 * @param $node
 * @return unknown_type
 */
function pi_sort_measures_form(&$node) {
	global $user;
	$node_details = get_inquiry_details_from_current_path();

	$current_activity = NULL;
	if(is_numeric($node_details->activity_id))
	{
		$current_activity = load_activity($node_details->activity_id);
	}
	if ($current_activity->name)
	{
		$users_group = get_group_of_type($user->uid, $current_activity->audience,
				$node_details->inquiry_id, $node_details->stage_id,
				$node_details->phase_id, $node_details->activity_id);
		if($users_group!=false)
		{
			$group = node_load($users_group);
			$sort_for = $group->title;
		}
		else
		{
			$sort_for = $user->name;
		}
		$node_title = check_plain(t('Selected measures for ') . $sort_for);

	}
	else
	{
		$type = node_get_types('type', $node);
		$node_title = $type->name;
	}

	// Build the form
	$form = array();
	if($current_activity->description)
	{
		$form['#prefix'] = $current_activity->description;
	}

	$type = node_get_types('type', $node);
	$form['title'] = array (
			'#type' => 'hidden',
			'#value' => $node_title,
	);

	// measures_list and tree used for draggable menu items
	$form['measures_list'] = array(
			'#tree'   => TRUE,
	);

	// Get the list of currently selected measures if the node has any
	// they are stored in $node->measures_list and loaded by pi_sort_measures_load()
	if(isset($node->nid))
	{
		$selected_measures = $node->measures_list;
	}
	else
	{
		$selected_measures = array();
	}

	// Get the list of available measures
	$all_measures = pi_sort_measures_get_options();
	//$categories = array();
	$sorted_measures = pi_merge_content_item_lists($selected_measures, $all_measures);

	// set $tree to point to the above $form['measures_list'] object
	$tree = &$form['measures_list'];

	if (count($sorted_measures) > 0) {
		foreach ($sorted_measures as $measure_nid => $measure_element)
		{
			//load the measure properly to get the node data from drupal core db,
			//rather than from queries used in pi_sort_measures_get_options()
			// if it doesn't exist and more then don't add it to the form!
			$measure = node_load($measure_nid);
			if($measure)
			{
				$region = $measure_element['#status'];

				$tree[$region][$measure_nid]['title'] = array(
						'#value' => check_plain($measure_element['#title']),
				);

				$tree[$region][$measure_nid]['description'] = array(
						'#value' => node_view($measure, TRUE, TRUE),
				);

				$tree[$region][$measure_nid]['weight'] = array(
						'#type'          => 'weight',
						'#delta'         => count($sorted_measures),
						'#default_value' => $measure_element['#weight'],
				);

				$tree[$region][$measure_nid]['status'] = array(
						'#type'          => 'select',
						'#default_value' => $measure_element['#status'],
						'#options' => array('none' => 'none', 'key' => 'key', 'selected' => 'selected'),
				);
			}
		}
	} else {
		unset($form['measures_list']);
	}
	return $form;
}

/**
 * hook_insert()
 * @param node object $node new draggable_measures node to insert
 * @return null
 */
function pi_sort_measures_insert($node) {
	$default_region_order = array('key', 'selected', 'none');

	$measures_to_save = pi_sort_grouped_item_list($default_region_order, $node->measures_list, 'weight');
	foreach($measures_to_save as $nid => $measure)
	{
		$query = "INSERT INTO {pi_sort_measures} (nid, vid, available_measure, status, weight) VALUES (%d, %d, %d, '%s', %d)";
		db_query($query, $node->nid, $node->vid, $nid, $measure['status'], $measure['weight']);
	}
}

/**
 * hook_update()
 * @param $node
 * @return unknown_type
 */
function pi_sort_measures_update($node) {
	// if this is a new node or we're adding a new revision,
	if ($node->revision) {
		pi_sort_measures_insert($node);
	}
	else {
		db_query("DELETE FROM {pi_sort_measures} WHERE vid = %d", $node->vid);
		pi_sort_measures_insert($node);
	}
}

/**
 * hook_delete()
 * @param $node
 * @return unknown_type
 */
function pi_sort_measures_delete(&$node) {
	//db_query("DELETE FROM pi_selected_measures WHERE nid = '" . $node->nid . "' ");
}

/**
 * hook_load() for pi_sort_measures
 * @param object $node
 * @return object
 */
function pi_sort_measures_load($node) {
	$result = new stdClass;

	$selected_measures = pi_sort_measures_get_choice($node);
	$all_measures = pi_sort_measures_get_options();

	// Add in any new measures as none selected
	// new measures wont exist in the selection
	foreach($all_measures as $measure_to_check_nid => $measure_to_check)
	{
		if(!array_key_exists($measure_to_check_nid, $selected_measures))
		{
			$selected_measures[$measure_to_check_nid] = $measure_to_check;
		}
	}

	$node->measures_list = $selected_measures;
	//To maintain compatability with older code
	$node->categories = $node->measures_list;
	return $result;
}

/**
 * hook_view()
 * @param unknown_type $node
 * @param unknown_type $teaser
 * @param unknown_type $page
 * @return unknown_type
 */
function pi_sort_measures_view($node, $teaser, $page = FALSE) {
	global $user;
	$details = get_inquiry_details_from_current_path();

	$node = node_prepare($node, $teaser);

	$node->content['pi_sort_measures'] = array(
			'#value' => theme('pi_sort_measures', $node, $teaser),
			'#weight' => 2
	);

	return $node;
}

/**
 * Theme function
 * @param unknown_type $node
 * @return unknown_type
 */
function theme_pi_sort_measures($node, $teaser) {
	global $user;
	$details = get_inquiry_details_from_current_path();

	$output = '';

	//Link to add a new key question
	//cannot get activity id from $details when viewing a list of activity teasers
	$activity_id_for_this_node = get_activity_id_for_nid($node->nid);
	$output .= make_add_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $activity_id_for_this_node, $user->uid);

	if (is_array($node->measures_list))
	{
		$regions = array('key','selected','none');
		foreach($regions as $region)
		{
			$regions_list = array();
				
			$region_title = pi_sort_measures_get_region_label($region);
			$region_description = pi_sort_measures_get_region_description($region);
			$regions_list[0] = array('data' => '<span class="heading">' . t($region_title) . '</span> - ' . t($region_description), 'class' => 'activity');

			foreach($node->measures_list as $nid => $measure)
			{
				$measure_activity_id = get_activity_id_for_nid($nid);
				if ($measure_activity_id && ($measure['#status'] == $region))
				{
					$loaded_node = node_load($nid);
					$regions_list[0]['children'][] = array('data' => build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $measure_activity_id, $user->uid, 'heading') . node_view($loaded_node, TRUE, TRUE), 'class' => 'activity');
				}
			}
				
			$region_empty = pi_sort_measures_get_empty_region_label($region);
				
			if (!$node->measures_list) {
				$regions_list[0]['children'][] = array('data' => $region_empty, 'class' => 'activity');
			}
				
			$output .= theme('item_list', $regions_list, NULL, 'ul', array('class' => 'region'));
		}
	}
	return $output;
}


/**
 * Returns the label of a given measure region (key, selected, none)
 * @param string $region key, selected, none
 * @return string Translated string using t()
 */
function pi_sort_measures_get_region_label($region) {
	$labels = array(
			'key' => t('Key measures') ,
			'selected' => t('Selected measures') ,
			'none' => t('Not used')
	);
	return $labels[$region];
}

/**
 * Returns the description of a given measure region (key, selected, none)
 * @param string $region key, selected, none
 * @return string Translated string using t()
 */
function pi_sort_measures_get_region_description($region)
{
	$region_descriptions = array(
			'key' => t('Key measures are how you organise the data you collect.'),
			'selected' => t('Selected measures are collected with key measures.'),
			'none' => t('These measurements will not be collected.'));
	return $region_descriptions[$region];
}

/**
 * Returns the 'empty' description of a given measure region (key, selected, none)
 * @param string $region key, selected, none
 * @return string Translated string using t()
 */
function pi_sort_measures_get_empty_region_label($region) {

	$labels = array(
			'key' => t('No key measures have been chosen') ,
			'selected' => t('No measures have been selected') ,
			'none' => t('All available measures are being used')
	);
	return $labels[$region];
}

/**
 * Theme admin settings form
 * @param unknown_type $form
 * @return unknown_type
 */
function theme_pi_sort_measures_node_form($form) {
	$output = '';
	/*
	 $regions = array('none', 'key', 'selected');
	foreach ($regions as $region) {
	drupal_add_tabledrag('measures_list', 'order', 'sibling', 'measures_list-element', 'measures_list-element-' . $region);
	};
	*/

	// Header
	$header = array(	array( 'theading' => t('Measure'), 'class' => '' ),
			array( 'theading' => t('Description'), 'class' => '' ),
			array( 'theading' => t('Status'), 'class' => 'measures_theading_status' ),
			array( 'theading' => t('Weight'), 'class' => 'measures_theading_weight' )
	);

	// Rows for the tabledrag
	$rows = array();

	$tree = &$form['measures_list'];

	$rows = array();
	foreach (element_children($tree) as $region)
	{
		foreach (element_children($tree[$region]) as $key)
		{
			$tree[$region][$key]['weight']['#attributes']['class'] = 'measures_list-weight measures_list-weight-'. $region;
			$tree[$region][$key]['status']['#attributes']['class'] = 'measures_list-region-select measures_list-region-'. $region;

			$rows[$region][$key]['title'] = drupal_render($tree[$region][$key]['title']);
			$rows[$region][$key]['description'] = drupal_render($tree[$region][$key]['description']);
			$rows[$region][$key]['status'] = drupal_render($tree[$region][$key]['status']);
			$rows[$region][$key]['weight'] = drupal_render($tree[$region][$key]['weight']);

		}
	}

	// Build the output
	$activity = load_activity($details->activity_id);
	if ($activity->description)
	{
		$output  .= '<p>' . $activity->description . '</p>';
	}
	else
	{
		$output  .= '<p>' . t('Choose which measures you will use.') . '</p>';
	}

	if(count($rows) == 0)
	{
		if(arg(2) == 'add')
		{
			$output  .= '<p> Press <strong>Save</strong> to start adding your measures.</p>';
		}
		else
		{
			$output .= "No measures available";
		}
	}
	//else
	{
		// $output .= theme('table', $header, $rows, array('id' => 'measures_list'));
		$output .= pi_sort_measures_display_table($header, $rows, array('id' => 'measures_list'));
		$output .= drupal_render($form);
	}
	return $output;
}

function pi_sort_measures_display_table($header, $rows, $attributes) {

	// Add table javascript.

	drupal_add_js('misc/tableheader.js');
	drupal_add_js(drupal_get_path('module', 'pi_sort_measures') .'/pi_sort_measures.js');

	//drupal_add_tabledrag('measures_list', 'match', 'sibling', 'measures_list-element');
	$regions = array('key', 'selected', 'none');
	// $regions = array('key','selected','none');
	foreach ($regions as $region) {
		//drupal_add_tabledrag('measures_list', 'match', 'sibling', 'measures_list-element', 'measures_list-region-' . $region, NULL, FALSE);
		drupal_add_tabledrag('measures_list', 'match', 'sibling', 'measures_list-region-select', 'measures_list-region-' . $region, NULL, FALSE);
		drupal_add_tabledrag('measures_list', 'order', 'sibling', 'measures_list-weight', 'measures_list-weight-' . $region, NULL, FALSE);
	};

	$output = "";
	$output .= '<table id="' . $attributes['id'] . '" class="sticky-enabled">';
	/* //don't show the table header
	 $output .= '<thead>';
	$output .= '<tr>';
	foreach($header as $heading) {
	$output .= '<th class="' . $heading['class'] . '">' . $heading['theading'] . '</th>';
	}
	$output .= '</tr>';
	$output .= '</thead>';
	*/
	$output .= '<tbody>';
	foreach ($regions as $region) {
		$output .= '<tr class="region region-' . $region . '">';
		$output .= '<td class="region" colspan="4"><span style="font-size:130%;font-weight:bold;margin-right:15px;">' . pi_sort_measures_get_region_label($region) . '</span>';
		$output .= '<span style="font-size:90%;font-weight:normal">' . pi_sort_measures_get_region_description($region) . '</span></td>';
		$output .= '</tr>';

		$region_style = empty($rows[$region]) ? 'region-empty' : 'region-populated';
		$output .= '<tr class="region-message region-' . $region . '-message ' . $region_style . '">';
		$output .= '<td colspan="4"><em>' . t( pi_sort_measures_get_empty_region_label($region) ) . '</em></td>';
		$output .= '</tr>';

		$row = 0;

		if (is_array($rows[$region]))
		{
			foreach ($rows[$region] as $key => $data)
			{
				$modified_description = str_replace(
						array('<div', '</div', 'class="submitted"'),
						array('<span', '</span', 'class="submitted" style="display:none"'),
						$data['description']);
				$style = $row % 2 == 0 ? 'odd' : 'even';
				$row_class = $data->row_class ? ' '. $data->row_class : '';
				$output .= '<tr class="draggable ' . $style . $row_class . '">';
				$output .= '<td class="measures_title"><span style="font-size:115%;font-weight:bold;">' . $data['title'] . '</td>';
				$output .= '<td class="measures_title">' .  $modified_description . '</td>';
				$output .= '<td class="measures_status">' . $data['status'] . '</td>';
				$output .= '<td class="measures_weight">' . $data['weight'] . '</td>';
				$output .= '</tr>';
				$row++;
			}
		}
	}
	$output .= '</tbody>';
	$output .= '</table>';

	return $output;
}


/**
 * Load the selected measures indexed by status and nid, ordered by weight
 * @param unknown_type $node
 * @return unknown_type
 */
function pi_sort_measures_get_choice($node) {
	$query = "SELECT * FROM {pi_sort_measures} WHERE {pi_sort_measures}.nid = %d AND {pi_sort_measures}.vid = %d ORDER BY status ASC, weight ASC";
	$result = db_query($query, $node->nid, $node->vid);

	$measures = array();
	while ($row = db_fetch_object($result))
	{
		$loaded_node = node_load($row->available_measure, NULL, TRUE);
		if($loaded_node)
		{
			$status = $row->status;
			if(!array_key_exists($status, $measures))
			{
				$measures[$status] = array();
			}
			$measures[$status][$row->available_measure] = array(
					'#weight' => count($measures[$status]),
					'#title'  => $loaded_node->title,
					'#status'  => $status
			);
		}
	}

	$group_order = array('key', 'selected', 'node');
	$sorted_measures = pi_sort_grouped_item_list($group_order, $measures, '#weight');
	return $sorted_measures;
}

/**
 * Get all available measures for the inquiry (derived from current path).
 * @return array of db_fetch_objects() for the measures available in db
 */
function pi_sort_measures_get_options() {
	global $user;
	$details = get_inquiry_details_from_current_path();

	$nids = pi_activity_get_available_nids_of_type($user->uid, $details->inquiry_id, 'pi_available_measures');
	$items = pi_activity_map_fields_from_nids($nids, array('title' => '#title'));
	foreach(array_keys($items) as $nid)
	{
		$items[$nid]['#status'] = 'none';
		$items[$nid]['#weight'] = 0;
	}
	return $items;
}

function theme_pi_sort_measures_region($title, $description, $empty, $measures)
{
	global $user;
	$details = get_inquiry_details_from_current_path();

	$output = '';
	$output .= '<p><span class="heading">' . $title . '</span> - ' . $description . '</p>';

	if(count($measures) == 0)
	{
		$output .= $empty;
	}
	else
	{
		$rows = array();
		foreach($measures as $measure)
		{
			// this section replaces some hardcoded html from the node teaser view to make it fit in this
			// theme layout better, since the default teaser theme isn't quite suited to this layout.
			// it does break the encapsulation of 'node' functionality by messing with another
			// object's data but since in a template is making changes on the html display level
			// this isn't so bad - and the functionality is hardcoded into 'node' rather than
			// available_mesaure.  The correct way would probably be to write a new theme within
			// available measure and render that
			/*
			$modified_description = str_replace(
					array('<div', '</div', 'class="submitted"'),
					array('<span', '</span', 'class="submitted" style="display:none"'),  $measure['description']);
			$rows[] = '<div style="padding-left:40px; text-indent: -40px;margin-bottom:6px;"><span style="font-size:115%;font-weight:bold;padding-right:10px;">' . $measure['title'] . '</span>' .
			'<span>' . $modified_description . '</span>' .
			'</div>';
			*/
			// $rows[] = array('data' => $measure['title'] . ' ' . $measure['description'], 'class' => 'activity');
			// $rows[] = array('data' => pi_available_measures_view (), 'class' => 'activity');
			// $rows[] = array('data' => build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $measure['nid'], $user->uid, 'heading'), 'class' => 'activity');
				
			$measure_activity = load_activity($measure['nid']);
			$measure_node = node_load($measure_activity->nid);
			print_r($measure_activity);//->nid . 'XX<br />';
			$rows[] = array('data' => node_view($measure_activity, TRUE, TRUE), 'class' => 'activity');
		}
		$output .= theme('item_list', $rows, NULL, 'ul', array('class' => 'activity'));
	}
	return $output;
}
