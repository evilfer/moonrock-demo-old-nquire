<?php

// $Id: pi_key_answers.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "key questions" node type
 */

/**
 * Implementation of hook_node_info().
 */
function pi_key_answers_node_info() {
  return array(
      'pi_key_answers' => array(
          'name' => t('Key answer'), // Required.
          'module' => 'pi_key_answers', // Required.
          'description' => t('What are the answers to the key questions of your inquiry?'), // Required.
          'has_title' => TRUE,
          'title_label' => t('Short title'),
          'has_body' => FALSE,
          'body_label' => t('Key question answer'),
          'locked' => TRUE
      )
  );
}

/**
 * Implementation of hook_perm().
 */
function pi_key_answers_perm() {
  return array('create pi_key_answers content', 'edit pi_key_answers');
}

/**
 * Implementation of hook_access().
 */
function pi_key_answers_access($op, $node, $account) {
  global $user;
  $uid = $user->uid;
  $details = get_inquiry_details_from_current_path();
  if ($op == 'create') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }
  if ($op == 'update') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
  if ($op == 'delete') {
    if (arg(0) == 'node' && arg(2) == 'delete') {
      //get inquiry for session id and activity
      $nid = arg(1);
      $activity_id = get_activity_id_for_nid($nid);
      $inquiry_id = get_inquiry_id_for_activity_id($activity_id);
      if ($inquiry_id && $activity_id) {
        return check_node_function_of_activity($inquiry_id, $activity_id, $uid, 'edit');
      } else {
        return FALSE;
      }
    } else {
      return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
  }
}

/**
 * Implementation of hook_form().
 */
function pi_key_answers_form(&$node) {
  global $user;
  $node_details = get_inquiry_details_from_current_path();

  // Add the categories of existing nodes and the options list for new nodes
  $key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);

  $sorted_key_questions = array();
  if (isset($key_questions_nid)) {
    $key_questions_node = node_load($key_questions_nid);
    if ($key_questions_node) {
      $sorted_key_questions = $key_questions_node->categories;
    }
  }

  $all_key_questions = pi_sort_key_questions_get_options();
  $key_questions_to_show = pi_merge_content_item_lists($sorted_key_questions, $all_key_questions);

  if (count($key_questions_to_show) > 0) {
    $key_question_options = array();
    foreach ($key_questions_to_show as $question_nid => $question) {
      $key_question_options[$question_nid] = $question['#title'];
    }

    $form['key_question_id'] = array(
        '#type' => 'select',
        '#title' => t('Key question'),
        '#required' => TRUE,
        '#default_value' => $node->key_question_id,
        '#description' => t('Select a key question to answer'),
        '#options' => $key_question_options,
        '#weight' => -6
    );

    $form['title'] = array(
        '#type' => 'hidden',
        '#value' => t('Key answer')
    );

    $form['body_filter']['key_answer'] = array(
        '#type' => 'textarea',
        '#title' => t('Answer'),
        '#required' => TRUE,
        '#default_value' => $node->key_answer,
        '#description' => t('Enter an answer to your selected key question'),
        '#resizable' => FALSE,
        '#rows' => 4,
        '#cols' => 40,
        '#weight' => -2
    );
  }

  $hypothesis_nid = find_hypothesis_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);
  if ($hypothesis_nid) {
    $hypothesis_node = node_load($hypothesis_nid);
    $hypothesis_activity_nid = get_activity_id_for_nid($hypothesis->nid);
    if ($hypothesis_activity_nid) {
      $hypothesis_activity = load_activity($hypothesis_activity_nid);
      if ($hypothesis_activity) {
        $form['#prefix'] = node_view($hypothesis_node, TRUE, TRUE);
      }
    }
  }
  return $form;
}

/**
 * Implementation of hook_insert().
 */
function pi_key_answers_insert($node) {
  db_query("INSERT INTO {pi_key_answers} (nid, vid, key_question_id, key_answer) VALUES (%d, %d, %d, '%s')", $node->nid, $node->vid, $node->key_question_id, $node->key_answer);
}

/**
 * Implementation of hook_update().
 */
function pi_key_answers_update($node) {

  if ($node->revision) {
    pi_key_answers_insert($node);
  } else {
    db_query("UPDATE {pi_key_answers} SET key_question_id = %d, key_answer = '%s' WHERE vid = '%d'", $node->key_question_id, $node->key_answer, $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function pi_key_answers_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_key_answers} WHERE nid = %d', $node->nid);

  //Delete the corresponding data in the sort tabe if exists
  db_query('DELETE FROM {pi_sort_key_answers} WHERE key_answer = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_key_answers_load($node) {

  $node = db_fetch_object(db_query('SELECT * FROM {pi_key_answers} WHERE vid = %d', $node->vid));

  return $node;
}

/**
 * Implementation of hook_view().
 */
function pi_key_answers_view($node, $teaser = FALSE, $page = FALSE) {

  // Use Drupal's default node view.
  $node = node_prepare($node, $teaser);

  if (!$teaser) {
    $key_question_node = node_load($node->key_question_id);
    if ($key_question_node) {
      $node->content['pi_key_question'] = array(
          '#value' => node_view($key_question_node, TRUE, TRUE),
          '#weight' => -1
      );
    }
  }

  $node->content['pi_key_answers'] = array(
      '#value' => theme('pi_key_answers', $node, $teaser),
      '#weight' => 0
  );

  return $node;
}

/**
 * MISSING
 * 
 * @return multitype:multitype:multitype:string   
 */
function pi_key_answers_theme() {
  return array(
      'pi_key_answers_node_form' => array(
          'arguments' => array('form'),
      ),
      'pi_key_answers' => array(
          'arguments' => array('node', 'teaser'),
      ),
  );
}

function theme_pi_key_answers_node_form($form) {
  moonrock_sample_utils_load_javascript_modules_support();
  drupal_add_js(drupal_get_path('module', 'pi_key_answers') . '/js/PiKeyAnswers.js');

  global $user;
  $details = get_inquiry_details_from_current_path();
  $activity = load_activity($details->activity_id);

  if ($activity->description) {
    $output .= '<p>' . t($activity->description) . '</p>';
  } else {
    $output .= '<p>' . t('Add a key answer.') . '</p>';
  }
  /*
    $key_questions_nid = find_sort_key_questions_nid_for_uid_and_inquiry($uid, $node_details->inquiry_id);

    // Add the categories of existing nodes and the options list for new nodes
    if(isset($key_questions_nid)) {
    $key_questions_node = node_load($key_questions_nid);
    $categories = $key_questions_node->categories;
    } */
  $option_categories = pi_sort_key_questions_get_options();
  if (count($option_categories) > 0) {
//    $output .= drupal_render($form['key_question_id']);
    $output .= drupal_render($form);

    $query = 'SELECT DISTINCT {node}.nid FROM {pi_result_presentations} '
            . 'LEFT JOIN {node} on {node}.nid={pi_result_presentations}.nid '
            . 'WHERE {node}.uid=%d';

    $result = db_query($query, $user->uid);
    while ($object = db_fetch_object($result)) {
      $presentation = node_load($object->nid);
      $activity_id = get_activity_id_for_nid($presentation->nid);
      $output .= "<div>"
              . "<img style='display:none;' question='{$presentation->key_question_id}' src='?q=activity/{$activity_id}/chart.png'>"
              . "</div>";
    }


  } else {
    $output .= "<p>No key questions are available to answer.</p>";
  }
  return $output;
}

/**
 * MISSING
 * 
 * @param unknown_type $node
 * @return string
 */
function theme_pi_key_answers($node, $teaser) {
  $output = '<strong>' . t('Key answer:') . '</strong> ' . nl2br($node->key_answer);
  return $output;
}

