<?php

module_load_include('inc', 'pi_fooddiary', 'pi_fooddiary.form_render_functions');

/**
 * Implementation of hook_node_info().
 */
function pi_fooddiary_analysis_node_info() 
{
	$node_info = array(	'pi_fooddiary_analysis' => array(
								'name' 			=> t('Fooddiary result presentations'), // Required.
								'module' 		=> 'pi_fooddiary_analysis',  // Required.
								'description' 	=> t('A presentation for exploring part of a collected dataset?'), // Required.
								'has_title' 	=> TRUE,
								'title_label' 	=> t('Short title'),
								'has_body' 		=> TRUE,
								'body_label' 	=> t('Prediction'),
    							'locked' 		=> TRUE )
						);
	
	return $node_info;
}


function pi_fooddiary_analysis_perm()
{
	return array('access fooddiary_analysis content');
}

/**
 * Implementation of hook_access().
 */
function pi_fooddiary_analysis_access($op, $node, $account)
{
	global $user;
	$access = FALSE;

	$details = get_inquiry_details_from_current_path();

	switch($op)
	{
		case 'create' :	$access = check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
		break;
		case 'update':	$access = check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
		break;
		case 'delete':	if (arg(0) == 'node' && arg(2) == 'delete')
		{
			//get inquiry for session id and activity
			$nid = arg(1);
			$activity_id = get_activity_id_for_nid($nid);
			$inquiry_id = get_inquiry_id_for_activity_id($activity_id);
			if($inquiry_id && $activity_id)
			{
				$access = check_node_function_of_activity ($inquiry_id, $activity_id, $uid, 'edit');
			}
		}
		else
		{
			$access = check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
		}
	}

	return $access;
}

function pi_fooddiary_analysis_menu()
{
	$items = array();

	$items['activity/%/food_analysis.png'] = array(
    		'page callback' => '_pi_fooddiary_analysis_chart_as_png',
			'page arguments' => array(1, 2),
    		'access arguments' => array('access content'),
    		'type' => MENU_CALLBACK,
	);

	return $items;
}

/**
 * Implementation of hook_view().
 */
function pi_fooddiary_analysis_view($node, $teaser = FALSE, $page = FALSE)
{
	// Use Drupal's default node view.
	$node = node_prepare($node, $teaser);

	$node->content['pi_fooddiary_analysis'] = array(
            '#value' => theme('pi_fooddiary_analysis', $node,$teaser),
            '#weight' => 10
	);

	return $node;
}


/**
 * Implementation of hook_theme().
 */
function pi_fooddiary_analysis_theme()
{
	$themes = array(	'pi_fooddiary_analysis_node_form' 	=> array( 'arguments' => array('form'), ),
    					'pi_fooddiary_analysis' 			=> array( 'arguments' => array('node','teaser') ) );

	return $themes;
}

/**
 * implementation of theme_hook().
 */
function theme_pi_fooddiary_analysis($node,$teaser)
{
	global $user;
	$details = get_inquiry_details_from_current_path();

	$output = '';
	$nids = _pi_fooddiary_get_user_nids();
	$nids = _pi_fooddiary_sort_nids($nids);

	drupal_add_css( drupal_get_path('module', 'pi_fooddiary') . '/pi_fooddiary.css');

	drupal_set_title(t($node->title));
	
	if(function_exists('pi_chart_show_chart_as_png'))
	{
		foreach($nids as $nid)
		{
			$activity_id = get_activity_id_for_nid($nid);

			$node = node_load($nid);
			$nutritional = _pi_fooddiary_analysis_get_nutritional($node);
			
			$date = $node->content['day'];
			
			$output .= "<p><strong>" . t('Graph for') . " " . $date . "</strong></>";
			$output .= "<p><img src='?q=activity/" . $activity_id . "/food_analysis.png'></p>";
			if(!$teaser)
			{
				$output .= _pi_fooddiary_render_nutrinal_table($nutritional);

			}
		}
	}

	return $output;
}

function theme_pi_fooddiary_analysis_node_form($form)
{
}

function _pi_fooddiary_analysis_chart_as_png($activity_id)
{
	global $user;

	$uid = $user->uid;

	$details = get_inquiry_details_from_current_path();

	$nid = get_nid_for_inquiry_activity_and_user($details->inquiry_id, $activity_id, $uid);

	$node = node_load($nid);

	$nutritional = _pi_fooddiary_analysis_get_nutritional($node);
	$rmi = _pi_fooddiary_analysis_get_RDI();

	$header[] = t('My data');
	$header[] = t('RDI');

	$data_x  = array_keys($rmi);

	$data[0] = array_values($nutritional);
	$data[1] = array_values($rmi);

	$x_axis_labels_heading = $header;
	$x_axis_labels = $data_x;

	$counter = 0;


	$counter = 0;
	$data_set = new pData;
	$chart['height'] = 230;
	$chart['width'] = 700;
	$chart['title'] = t($node->title);

	$x_axis_labels = shorten_lables($x_axis_labels, 7);
	$x_axis_labels = check_labels($x_axis_labels);

	foreach($data as $data_row)
	{
		$data_set->AddPoint($data_row, 'Serie_' . $counter );
		$serie_names['Serie_' . $counter] = array( 	'label' => $header[$counter],
													'color' => get_color( $counter ) 
		);

		$counter++;
	}

	$chart['title'] = t($node->title);
	$graph_type = 'bar_graph';

	$graph = pi_chart_generate($graph_type, $chart, $data_set, $serie_names, $x_axis_labels);
	$graph->Render();

	exit;
}

function _pi_fooddiary_analysis_get_nutritional($node)
{
	$food = $node->content['food'];

	$nutritional = array();

	foreach( $food as $food_item )
	{
		$nutritional = _pi_fooddiary_calcuate_nutritional_info($food_item['food'], $nutritional );
	}

	return $nutritional;
}

function _pi_fooddiary_analysis_get_RDI()
{
	$nutritional['Carb'] 		= 300;
	$nutritional['Prot'] 		= 50;
	$nutritional['Fats'] 		= 65;
	$nutritional['Fibre'] 		= 25;
	$nutritional['Water'] 		= 3000;
	$nutritional['Sodium'] 		= 2400;
	$nutritional['Calcium'] 	= 1000;
	$nutritional['Iron'] 		= 18;
	$nutritional['Vit A'] 		= 5000;
	$nutritional['Vit B'] 		= 8;
	$nutritional['Vit C'] 		= 60;
	$nutritional['Vit D'] 		= 400;

	return $nutritional;
}
?>