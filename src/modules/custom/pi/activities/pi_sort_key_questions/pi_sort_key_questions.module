<?php

// $Id: pi_sort_key_questions.module,v 1.2 2010/02/15 09:17:48 ou_pm Exp $

function pi_sort_key_questions_node_info() {
  return array(
      'pi_sort_key_questions' => array(
          'name' => t('Key questions sort'), // Required.
          'module' => 'pi_sort_key_questions', // Required.
          'description' => t('Questions sort'), // Required.
          'has_title' => FALSE,
          'title_label' => t('Sorted key questions'),
          'has_body' => FALSE,
          'body_label' => t('Sort of key questions'),
          'locked' => TRUE,
          'add_node_type' => 'pi_key_questions'
      )
  );
}

function pi_sort_key_questions_perm() {
  
}

function pi_sort_key_questions_access($op, $node, $user) {
  $details = get_inquiry_details_from_current_path();
  if ($op == 'create') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }
  if ($op == 'update') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
}

/**
 * Implementation of hook_theme().
 */
function pi_sort_key_questions_theme() {
  return array(
      'pi_sort_key_questions_node_form' => array(
          'arguments' => array('form'),
      ),
      'pi_sort_key_questions' => array(
          'arguments' => array('node', 'teaser', 'key_questions_to_show'),
      ),
  );
}

/**
 * hook_form() for pi_sort_key_questions which provides draggable sorting for pi_key_questions
 *  nodes in an inquiry
 * @param $node the pi_sort_key_questions node if it is to be edited, as per drupal 6 API
 */
function pi_sort_key_questions_form(&$node) {
  global $user;
  $node_details = get_inquiry_details_from_current_path();
  if (is_numeric($node_details->activity_id)) {
    $current_activity = load_activity($node_details->activity_id);
  }

  if ($current_activity->name) {
    $users_group = get_group_of_type($user->uid, $current_activity->audience, $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);
    if ($users_group != false) {
      $group = node_load($users_group);
      $sort_for = $group->title;
    } else {
      $sort_for = $user->name;
    }
    $node_title = t('Key questions for ') . check_plain($sort_for);
  } else {
    $type = node_get_types('type', $node);
    $node_title = $type->name;
  }

  // Build the form
  $form = array();
  $form['title'] = array(
      '#type' => 'hidden',
      '#value' => $node_title,
  );

  // All key qiestions are collected in this array:
  $form['onepageprofile_categories'] = array(
      '#tree' => TRUE,
  );

  // Add the existing sorted items and add the new new ones to the end
  if (isset($node->nid)) {
    $sorted_key_questions = $node->categories;
  } else {
    $sorted_key_questions = array();
  }

  $unsorted_key_questions = pi_sort_key_questions_get_options();
  $key_questions_to_list = pi_merge_content_item_lists($sorted_key_questions, $unsorted_key_questions);

  // set $tree to point to the above $form['onepageprofile_categories'] object
  $key_question_elements = &$form['onepageprofile_categories'];
  foreach ($key_questions_to_list as $question_nid => $question_item) {
    $key_question = node_load($question_nid);
    $key_question_elements[$question_nid] = array(
        'title' => array('#value' => $question_item['#title']),
        'weight' => array(
            '#type' => 'weight',
            '#delta' => count($key_questions_to_list),
            '#default_value' => $question_item['#weight']
        )
    );
  }
  return $form;
}

/**
 * hook_insert() for pi_sort_key_questions - itereates through the array of key questions in the node
 *  and sets the weights in table pi_sort_key_questions
 *  Weights are renumbered sequentially from 0
 * @param object(pi_sort_key_questions) $node
 */
function pi_sort_key_questions_insert($node) {
  $details = get_inquiry_details_from_current_path();
  $question_weights = array();
  if (count($node->onepageprofile_categories) > 0) {
    foreach ($node->onepageprofile_categories as $question_nid => $question_weight) {
      $question_weights[$question_nid] = $question_weight['weight'];
    }
    asort($question_weights);
  }

  $query = "INSERT INTO {pi_sort_key_questions} (nid, vid, key_question, weight) VALUES (%d, %d, %d, %d)";
  $weight_count = 0;
  foreach (array_keys($question_weights) as $key_question_nid) {
    $key_question = $node->onepageprofile_categories[$key_question_nid];
    db_query($query, $node->nid, $node->vid, $key_question_nid, $weight_count);
    $weight_count++;
  }
}

/**
 * hook_update for pi_sort_key_questions
 * @param object(node->pi_sory_key_questions) $node as per drupal 6 hook_update api
 */
function pi_sort_key_questions_update($node) {
// if this is a new node or we're adding a new revision,
  if ($node->revision) {
    pi_sort_key_questions_insert($node);
  } else {
    db_query("DELETE FROM {pi_sort_key_questions} WHERE vid = %d", $node->vid);
    pi_sort_key_questions_insert($node);
  }
}

function pi_sort_key_questions_delete(&$node) {
  db_query("DELETE FROM {pi_sort_key_questions} WHERE nid = %d", $node->nid);
}

function pi_sort_key_questions_load($node) {
  $result = new stdClass;
  $result->categories = pi_sort_key_questions_get_choice($node);
  return $result;
}

function pi_sort_key_questions_view($node, $teaser, $page = FALSE) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  $node = node_prepare($node, $teaser);

  if (!$teaser) {
    $hypothesis_nid = find_hypothesis_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);
    if ($hypothesis_nid) {
      $hypothesis_node = node_load($hypothesis_nid);
      $hypothesis_activity_nid = get_activity_id_for_nid($hypothesis_node->nid);
      if ($hypothesis_activity_nid) {
        $hypothesis_activity = load_activity($hypothesis_activity_nid);
        if ($hypothesis_activity) {
          $node->content['pi_key_questions_hypothesis'] = array(
              '#value' => node_view($hypothesis_node, TRUE, TRUE),
              '#weight' => -2
          );
        }
      }
    }
  }

  // Assemble an array of key questions in the output format (build_activity_link makes this a link with icon)
  $already_sorted_key_questions = $node->categories;
  $unsorted_key_questions = pi_sort_key_questions_get_options();

  $sorted_key_questions = pi_merge_content_item_lists($already_sorted_key_questions, $unsorted_key_questions);
  $key_questions_to_show = array();
  foreach (array_keys($sorted_key_questions) as $sorted_key_questions_nid) {
    $key_question_activity_id = get_activity_id_for_nid($sorted_key_questions_nid);
    if ($key_question_activity_id) {
      $key_questions_to_show[] = array('data' => build_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $key_question_activity_id, $user->uid, 'heading'), 'class' => 'activity');
    }
  }
  if ($teaser) {
    //Link to add a new key question
    //cannot get activity id from $details when viewing a list of activity teasers
    $activity_id_for_this_node = get_activity_id_for_nid($node->nid);
    $link_output = make_add_activity_link($details->inquiry_id, $details->stage_id, $details->phase_id, $activity_id_for_this_node, $user->uid);
    $node->content['pi_sort_key_questions_add_key_question_link'] = array(
        '#value' => $link_output,
        '#weight' => -3
    );
  }

  $node->content['pi_sort_key_questions'] = array(
      '#value' => theme('pi_sort_key_questions', $node, $teaser, $key_questions_to_show),
      '#weight' => 2
  );

  return $node;
}

function theme_pi_sort_key_questions($node, $teaser, $key_questions_to_show) {
  $output = '';
  /* FIX (eloy)
   * This will need to be changed!
   */
  $output .= '<p>Your goal is to compare three different samples of Moon rock. '
          . 'To guide your investigation, you should write your own key questions.<br />'
          . 'An example of a key question is: <i>Does the average size of the rock grains differ across the three samples?</i>'
          . 'As you can see, it\'s a specific question that can be tested using the measures you have available. </p>'
          . '<p>To help you form the questions, you can select the <a href="?q=activity/1182/view">Explore</a> activity to view, '
          . 'pan and zoom into the three samples of moon rock using the Virtual Microscope. '
          . 'Also try clicking the <img src="' . drupal_get_path('module', 'moonrock_data_form') . '/css/icons/info.png"> icon '
          . 'beside each sample to get extra information, including where on the moon the sample was found, it density and the overall size of the rock sample.</p>' 
          . '<p>We have proposed some measures that geologists use. Read about them in activity '
          .' <a href="?q=activity/1266/view">Moon rock measures</a>.</p>'
          . '<p>Asking interesting questions that can be answered using scientific tools is one of the most important (and challeging) steps '
          . 'in the work of any scientist.</p>';

  $output .= theme('item_list', $key_questions_to_show, NULL, 'ul', array('title' => t('Your questions'), 'class' => 'activity'));

  // When there's key questions to show, show them
  // otherwise show a placeholder text
  if (count($key_questions_to_show) > 0) {
    // Add a title to the list in a nice format, then list the key questions
//		$sentence = format_plural(count($key_questions_to_show), 'Your key question is:', 'Your key questions are:');
//		$output .= '<p>' . $sentence . '</p>';
//		if($teaser)
//		{
  } else {
    // No key questions, so say that.
    $output .= "<ul><li><b>You have not created any question yet.</b></li></ul>";
  }
  return $output;
}

/**
 * THeme for key questions sorting form to provide draggable sorting method
 */
function theme_pi_sort_key_questions_node_form($form) {
  global $user;
  $uid = $user->uid;
  $details = get_inquiry_details_from_current_path();

  drupal_add_tabledrag('onepageprofile-categories', 'order', 'sibling', 'onepageprofile-element');

  // Header
  $header = array(
      t('Key question'),
      t('Weight')
  );

  // Rows for the tabledrag
  $rows = array();

  $tree = &$form['onepageprofile_categories'];
  foreach (element_children($tree) as $key) {
    $tree[$key]['weight']['#attributes']['class'] = 'onepageprofile-element';

    $row = array();
    $row[] = drupal_render($tree[$key]['title']);
    $row[] = drupal_render($tree[$key]['weight']);

    $rows[] = array('data' => $row, 'class' => 'draggable');
  }

  // Build the output
  $activity = load_activity($details->activity_id);
  if ($activity->description) {
    $output = '<p>' . check_plain($activity->description) . '</p>';
  } else {
    $output = '<p>' . t('Order your key questions.') . '</p>';
  }

  //only display form and submit button if there are some entries
  if (count($rows) > 0) {
    $output .= theme('table', $header, $rows, array('id' => 'onepageprofile-categories'));
  } else {
    if (arg(2) == 'add') {
      $output .= '<p> Press <strong>Save</strong> to start adding your key questions.</p>';
    } else {
      $output .= "<p>" . t('No key questions are available') . ".</p>";
    }
  }
  $output .= drupal_render($form);
  return $output;
}

/**
 * Returns the array of key questions that were selected for the sort 
 * indexed by their node ids and with #weight and incremental count starting at 0 
 * @return array [key question node id] #weight=> 1, #title = key question title
 */
function pi_sort_key_questions_get_choice($node) {
  $query = "SELECT key_question FROM {pi_sort_key_questions} WHERE {pi_sort_key_questions}.nid = %d AND {pi_sort_key_questions}.vid = %d ORDER BY weight ASC";
  $result = db_query($query, $node->nid, $node->vid);

  $questions = array();
  while ($row = db_fetch_object($result)) {
    $loaded_node = node_load($row->key_question, NULL, TRUE);
    if ($loaded_node != false) {
      $questions[$row->key_question] = array(
          '#title' => check_plain($loaded_node->key_question),
          '#weight' => count($questions)
      );
    }
  }
  return $questions;
}

/**
 * Returns an array of key question titles indexed by their node ids
 * @return array [key question node id] #weight=> 1, #title = key question title
 */
function pi_sort_key_questions_get_options() {
  global $user;
  $details = get_inquiry_details_from_current_path();

  $nids = pi_activity_get_available_nids_of_type($user->uid, $details->inquiry_id, 'pi_key_questions');
  $items = pi_activity_map_fields_from_nids($nids, array('title' => '#title'));
  foreach (array_keys($items) as $nid) {
    $items[$nid]['#weight'] = 0;
  }
  return $items;
}
