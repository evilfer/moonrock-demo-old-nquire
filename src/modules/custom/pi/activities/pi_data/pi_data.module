<?php

// $Id: pi_data.module,v 1.2 2009/07/13 ou_mbg Exp $

/**
 * @file
 * Module for creating "pi_data" node type
 */

/**
 * Implementation of pi_data_node_info().
 */
function pi_data_node_info() {
  // We return an array since a module can define multiple node types.
  // We're only defining one node type, type 'pi_data'.
  return array(
      'pi_data' => array(
          'name' => t('Data'), // Required.
          'module' => 'pi_data', // Required.
          'description' => t('What is your data?'), // Required.
          'has_title' => FALSE,
          'title_label' => t('Collected Data'),
          'has_body' => FALSE,
          'locked' => TRUE
      )
  );
}

/**
 * Implementation of pi_data_perm().
 */
function pi_data_perm() {
  
}

/**
 * Implementation of pi_data_access().
 */
function pi_data_access($op, $node, $account) {
  global $user;
  $uid = $user->uid;
  $details = get_inquiry_details_from_current_path();
  if ($op == 'create') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }
  if ($op == 'update') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
  
  if ($op == 'delete') {
    if (arg(0) == 'node' && arg(2) == 'delete') {
      //get inquiry for session id and activity
      $nid = arg(1);
      $activity_id = get_activity_id_for_nid($nid);
      $inquiry_id = get_inquiry_id_for_activity_id($activity_id);
      if ($inquiry_id && $activity_id) {
        return check_node_function_of_activity($inquiry_id, $activity_id, $uid, 'edit');
      } else {
        return FALSE;
      }
    } else {
      /* FIX (eloy) 
       * Can remove data from any activity...
       */
      /* $activity_id = (int) get_activity_id_for_nid($node->nid);
        $access = check_node_function_of_activity($details->inquiry_id, activity_id, $user->uid, 'edit');
        return $access; */
      return TRUE;
    }
  }
}


/**
 * hook_form() for pi_data - dynamically generates the add data form based on selected, available measures and their weights
 */
function pi_data_form(&$node) {
  global $user;
  $node_details = get_inquiry_details_from_current_path();
  $form_prefix = '';

  /*
    $form_prefix .= t('Add data to answer your key questions:</p><ul>');
    $query = "SELECT {node}.title FROM {node} WHERE {node}.type='pi_key_questions' and {node}.uid=%d";
    $result = db_query($query, $user->uid);
    while ($obj = db_fetch_object($result)) {
    $form_prefix .= "<li><b>{$obj->title}</b></li>";
    }
    $form_prefix .= '</ul><br/>';
   */

  if (is_numeric($node_details->activity_id)) {
    $current_activity = load_activity($node_details->activity_id);
  }

  if ($current_activity->name) {
    $users_group = get_group_of_type($user->uid, $current_activity->audience, $node_details->inquiry_id, $node_details->stage_id, $node_details->phase_id, $node_details->activity_id);
    if ($users_group != false) {
      $group = node_load($users_group);
      $sort_for = $group->title;
    } else {
      $sort_for = $user->name;
    }
    $node_title = check_plain(t('Data for ') . $sort_for);
  } else {
    $type = node_get_types('type', $node);
    $node_title = $type->name;
  }

  // Build the form
  $form = array();
  $form['title'] = array(
      '#type' => 'hidden',
      '#value' => $node_title,
  );


  $measures_param = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $node_details->inquiry_id);

  if ($measures_param) {
    $measures_node = node_load($measures_param);
    $measure_rows = $measures_node->measures_list;
  }

  $form['onepageprofile_categories'] = array(
      '#tree' => TRUE,
  );

  $tree = &$form['onepageprofile_categories'];

  if (is_array($measure_rows)) {
    $use_measure = moonrock_sample_utils_filter_visible_measures($measure_rows);

    /**
     * Check whether they have custom forms
     */
    $custom_forms = array();

    foreach ($measure_rows as $measure_info_nid => $measure_selection) {
      if ($use_measure[$measure_info_nid]) {
        $measure_info = node_load($measure_info_nid);
        if ($measure_info->content_options) {
          $custom_form_function = "{$measure_info->content_options}_nquire_data_form_prefix";
          if (function_exists($custom_form_function)) {
            $custom_forms[$measure_info->content_options] = array(
                'function' => $custom_form_function,
                'prefix' => TRUE,
                'measure' => $measure_info,
            );
            $form_prefix .= $custom_form_function($measure_info);
          }
        }
      }
    }

    $form['#prefix'] = $form_prefix;

    /**
     * We know all about custom forms now...
     */
    foreach ($measure_rows as $measure_info_nid => $measure_selection) {
      if ($use_measure[$measure_info_nid]) {
        if ($measure_selection['#status'] == 'key' || $measure_selection['#status'] == 'selected') {
          //$key = t($measures_param . "-" . $measure_info_nid);
          $key = $measures_param . '-' . $measure_info_nid;
          $measure_info = node_load($measure_info_nid);

          //format the measure units
          //set as required field if a key measure
          if ($measure_selection['#status'] == 'key') {
            $required_value = TRUE;
          } else {
            $required_value = FALSE;
          }

          $measure_text = theme('moonrock_sample_utils_measure_info', $measure_info);

          switch ($measure_info->field_type) {
            // field_type = textfield
            case 'textfield':
              /* FIX (eloy)
               * to enable VM automatic measures.
               */
              if ($measure_info->data_type === 'numeric') {
                $div = '<div vm_measure="' . $key . '"></div>';

                $tree[$key]['value'] = array(
                    '#type' => 'hidden',
                    '#required' => false,
                    '#attributes' => array('vm_measure' => $key),
                    '#prefix' => $measure_text . $div,
                );
              } else {
                $tree[$key]['value'] = array(
                    '#type' => 'textfield',
                    '#title' => $measure_text,
                    '#required' => $required_value,
                    '#default_value' => $node->measures[$key]['#value'],
                    '#size' => $measure_info->textfield_size,
                    '#weight' => $measure_selection['#weight']
                );
              }
              break;
            case 'textarea':
              //$prefix .= "textarea";
              $tree[$key]['value'] = array(
                  '#type' => 'textarea',
                  '#title' => $measure_text,
                  '#required' => $required_value,
                  '#default_value' => $node->measures[$key]['#value'],
                  '#resizable' => TRUE,
                  '#cols' => $measure_info->textarea_cols,
                  '#rows' => $measure_info->textarea_rows,
                  '#weight' => $measure_selection['#weight']
              );
              break;
            // field_type = select or radios
            case 'select':
            case 'radios':
              $custom_form = FALSE;
              if ($measure_info->list_options) {
                $options = array();
                foreach (explode("\n", $measure_info->list_options) as $opt) {
                  //trim added around item to prevent the following error:
                  //An illegal choice has been detected. Please contact the site administrator.
                  $item = trim(substr($opt, 0, 64)); //**now use value as key
                  $options[$item] = $item;
                };
              } else if ($measure_info->content_options) {
                if (isset($custom_forms[$measure_info->content_options])) {
                  $custom_form = TRUE;
                } else {
                  $options = array();
                  $query = "SELECT nid, title FROM {node} WHERE type = '%s'";
                  $results = db_query($query, $measure_info->content_options);

                  while ($result = db_fetch_object($results)) {
                    $options[$result->title] = $result->title;
                  }
                }
              };

              if ($custom_form) {
                $input_function = "{$measure_info->content_options}_nquire_data_form_elements";
                if (function_exists($input_function)) {
                  $elements = $input_function($node->measures[$key]['#value']);
                  foreach ($elements as $subkey => $value) {
                    $tree[$subkey]['value'] = $value;
                  }
                }

                $tree[$key]['value'] = array(
                    '#type' => 'hidden',
                    '#title' => $measure_text,
                    '#required' => $required_value,
                    '#default_value' => $node->measures[$key]['#value'],
                    '#weight' => $measure_selection['#weight'],
                    '#attributes' => array("measure_content_type" => $measure_info->content_options),
                );


                $after_build_function = "{$measure_info->content_options}_nquire_data_form_after_build";
                if (function_exists($after_build_function)) {
                  $tree[$key]['value']['#after_build'][] = $after_build_function;
                }
              } else {
                $tree[$key]['value'] = array(
                    '#type' => $measure_info->field_type,
                    '#title' => $measure_text,
                    '#required' => $required_value,
                    '#default_value' => $node->measures[$key]['#value'],
                    '#options' => $options,
                    '#weight' => $measure_selection['#weight']
                );
              }

              break;
            // field_type = checkboxes
            case 'checkboxes':
              $options = array();
              if ($measure_info->list_options) {
                foreach (explode("\n", $measure_info->list_options) as $opt) {
                  $option_item = substr($opt, 0, 16);
                  $options[$option_item] = $option_item;
                };
              };

              $select = array();
              if ($node->form_key) {
                foreach (explode(",", $node->$form_key) as $sel) {
                  $select[] = substr($sel, 0, 16);
                };
              };

              $tree[$key]['value'] = array(
                  '#type' => 'checkboxes',
                  '#title' => t($measure_info->title . $units),
                  '#required' => $required_value,
                  '#default_value' => $node->measures[$key]['#value'],
                  '#options' => $options,
                  '#weight' => $measure_selection['#weight']
              );
              break;
            case 'upload-file':
              $form['#attributes'] = array('enctype' => "multipart/form-data");
              $tree[$key]['value'] = array(
                  '#type' => 'file',
                  '#title' => t($measure_info->title),
                  '#options' => $options,
                  '#weight' => $measure_selection['#weight'],
                  '#default_value' => $node->measures[$key]['#value']
              );
              if (isset($node->measures[$key]['#value'])) {
                $tree[$key]['value']['#suffix'] = "<a href='" . file_download_url($node->measures[$key]['#value']) . "'>" . $measure['#value'] . "'</a>";
                $form[$key] = array(
                    '#type' => 'hidden',
                    '#weight' => $measure_selection['#weight'],
                    '#default_value' => $node->measures[$key]['#value']
                );
              }
              break;
            case 'upload-image':
              $form['#attributes'] = array('enctype' => "multipart/form-data");
              $tree[$key]['value'] = array(
                  '#type' => 'file',
                  '#title' => t($measure_info->title),
                  '#options' => $options,
                  '#weight' => $measure_selection['#weight'],
                  '#default_value' => $node->measures[$key]['#value']
              );
              if (isset($node->measures[$key]['#value'])) {
                $image_node = node_load($node->measures[$key]['#value']);
                $tree[$key]['value']['#suffix'] = '<div>' . image_display($image_node) . '</div>';
                $form[$key] = array(
                    '#type' => 'hidden',
                    '#weight' => $measure_selection['#weight'],
                    '#default_value' => $node->measures[$key]['#value']
                );
              }
              break;
          }
        }
      }
    }
  }


  return $form;
}

/*
  //unused
  function get_measure_array($psm_id) {
  $query = "SELECT value FROM pi_collected_data WHERE psm_id = " . $psm_id . " ";
  $db_result = db_fetch_object(db_query($query));
  $db_result = $db_result->value;
  $array = explode(",", $db_result);
  return $array;
  }
 */

/**
 * Implementation of hook_validate().
 */
function pi_data_validate($node) {
  foreach ($node->onepageprofile_categories as $key => $measure) {
    $hyphen_pos = strrpos($key, "-");
    $available_measure_nid = substr($key, $hyphen_pos + 1);
    $value = $measure['value'];
    if (is_array($value)) {
      $value = implode(",", $value);
    }
    $available_measures_node = node_load($available_measure_nid);

    if ($available_measures_node->data_type == 'numeric') {
      if ($value && !is_numeric($value)) {
        form_set_error($key, t('This should be a number.'));
      }
    }
  }

  error_log(var_export($node, TRUE));
}

function _pi_data_measure_title($measure_value, $measure_type) {
  if ($measure_type->content_options) {
    $node = node_load($measure_value);
    if ($node) {
      return check_plain($node->title);
    }
  } else {
    return check_plain($measure_value);
  }
}

/**
 * hook_insert() - add the additional data for a pi_data node to the pi_collected_data table
 * @param $node the node to be inserted
 */
function pi_data_insert($node) {
  $title_array = array();
  $node->categories = &$node->onepageprofile_categories;

  foreach ($node->onepageprofile_categories as $key => $measure) {
    $hyphen_pos = strrpos($key, "-");
    $selected_measure_nid = substr($key, 0, $hyphen_pos);
    $available_measure_nid = substr($key, $hyphen_pos + 1);
    $measure_type = node_load($available_measure_nid);

    $measures_node = node_load($selected_measure_nid);
    $measure_rows = $measures_node->measures_list;

    if ($measure_rows[$available_measure_nid]['#status'] == 'key') {
      $title_array[] = _pi_data_measure_title($measure['value'], $measure_type);
    }

    if (isset($measure_type)) {
      if ($measure_type->type == 'pi_available_measures') {

        $node_data = '';
        // if it's a file or image upload field, then move and store the file
        switch ($measure_type->field_type) {
          case 'upload-image':

            $image_validators = array('file_validate_is_image' => array());
            if ($uploaded_file = file_save_upload("onepageprofile_categories", $image_validators)) {
              error_log($uploaded_file->filepath);

              $image_node = image_create_node_from($uploaded_file->filepath);
              $node_data = $image_node->nid;
            } else {
              if (isset($node->$key)) {
                $node_data = $node->$key;
                drupal_set_message("Keeping existing image for " . check_plain($measure_type->title) . ".");
              } else {
                //drupal_set_message(t('There was a problem saving the image for ') . check_plain($measure_type->title), 'error');
                // usually this is if the file name isn't set...
              }
            }
            break;
          case 'upload-file':
            if ($uploaded_file = file_save_upload("onepageprofile_categories", $image_validators)) {
              file_set_status($uploaded_file, FILE_STATUS_PERMANENT);
              $node_data = $uploaded_file->filepath;
            } else {
              if (isset($node->$key)) {
                $node_data = $node->$key;
                drupal_set_message("Using existing file '" . check_plain($node_data) . '"');
              } else {
                //drupal_set_message(t('There was a problem saving the file for ') . check_plain($measure_type->title), 'error');
              }
            }
            break;
          default:
            $node_data = $measure['value'];
        }
      }
    } else {
      drupal_set_message(t('There was a problem finding measure data for ') . check_plain($measure_type->title) . ". Check is has saved correctly.", 'warning');
      $node_data = $measure['value'];
    }
    db_query("INSERT INTO {pi_collected_data} (nid, vid, selected_measures_nid, available_measure_nid, value) VALUES ( %d, %d, %d, %d, '%s')", $node->nid, $node->vid, $selected_measure_nid, $available_measure_nid, $node_data);

    //echo "\n<br>" . $node->nid . ', ' . $node->vid . ', ' . $selected_measure_nid . ', ' . $available_measure_nid . ', ' . $node_data;
  }

  //values of key measures becomes the activity name
  $activity_name = implode("-", $title_array);

  //if empty give a placeholder name
  if (strlen($activity_name) < 2) {
    $activity_name = "Data";
  }

  $node->title = $activity_name;
}

/**
 * Implementation of hook_update().
 */
function pi_data_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    pi_data_insert($node);
  } else {
    //	this methods removes all data associated with the vid whether or not a current selected/key measure
    //		db_query("DELETE FROM pi_collected_data WHERE vid = '" . $node->vid . "' ");
    //	this method only deletes data associated with current key/selected measures
    foreach ($node->onepageprofile_categories as $key => $measure) {
      $hyphen_pos = strrpos($key, "-");
      $selected_measure_nid = substr($key, 0, $hyphen_pos);
      $available_measure_nid = substr($key, $hyphen_pos + 1);
      //print $node->nid . '*' . $node->vid . '*' . $selected_measure_nid . '*' . $available_measure_nid;
      db_query("DELETE FROM {pi_collected_data} WHERE nid = %d AND vid = %d AND selected_measures_nid = %d AND available_measure_nid = %d", $node->nid, $node->vid, $selected_measure_nid, $available_measure_nid);
    }
    pi_data_insert($node);
  }
}

/**
 * hook_delete() for pi_data, also deletes data values from pi_collected_data and attached images and files
 */
function pi_data_delete(&$node) {
  foreach ($node->onepageprofile_categories as $key => $measure) {
    $hyphen_pos = strrpos($key, "-");
    $selected_measure_nid = substr($key, 0, $hyphen_pos);
    $available_measure_nid = substr($key, $hyphen_pos + 1);
    $measure_type = node_load($available_measure_nid);
    if (isset($measure_type)) {
      if ($measure_type->type == 'pi_available_measures') {
        switch ($measure_type->field_type) {
          case 'upload-image':
            node_delete($measure['#value']);
            break;
          case 'upload-file':
            file_delete($measure['#value']);
            break;
        }
      }
    }
  }

  db_query('DELETE FROM {pi_collected_data} WHERE nid = %d', $node->nid);

  //Remove the data from the sort table if exists
  db_query('DELETE FROM {pi_sort_data} WHERE data = %d', $node->nid);
}

//needs to be reintroduced
function is_checkboxes_measure($id) {
  $query = "SELECT measure_nid FROM {pi_sort_measures} WHERE psm_id = %d";
  $measure_nid = db_fetch_object(db_query($query, $id));
  $measure_nid = $measure_nid->measure_nid;
  $measure = node_load($measure_nid);
  if ($measure->data_type) {
    return $measure->data_type == 3;
  } else {
    return FALSE;
  }
}

/**
 * Implementation of hook_load() - gets the pi_data time and also associated pi_collected_data rows
 */
function pi_data_load($node) {
  $result = new stdClass;
  $result->measures = pi_data_return_results($node);
  // Add pointers to measures to keep compatibility with forms, etc
  $result->categories = &$result->measures;
  $result->onepageprofile_categories = &$result->measures;
  return $result;
}

function pi_data_return_results($node) {
  $measures = array();
  $measure_ids = array();
  $weights = array();

  $query = "SELECT * FROM {pi_collected_data} WHERE nid = %d AND vid = %d";
  $db_result = db_query($query, $node->nid, $node->vid);
  while ($row = db_fetch_object($db_result)) {

    $key = check_plain($row->selected_measures_nid . "-" . $row->available_measure_nid);
    $available_measure_node = node_load($row->available_measure_nid);
    $selected_measure_node = node_load($row->selected_measures_nid);
    $weight = $selected_measure_node->categories[$row->available_measure_nid]['#weight'];
    $status = $selected_measure_node->categories[$row->available_measure_nid]['#status'];
    if ($available_measure_node->data_type == 'checkboxes') {
      $value = explode(",", $row->value);
    } else {
      $value = $row->value;
    }
    if (!array_key_exists($status, $measures)) {
      $measures[$status] = array();
    }
    $measures[$status][$key] = array(
        '#title' => $available_measure_node->title,
        '#value' => $value,
        '#weight' => $weight,
        '#status' => $status,
    );
  }

  // Order  these to ensure key measures are listed first
  // n.b. you may get 'none' measures if selected measures were changed after collecting data.
  $status_order = array('key', 'selected', 'none');
  $sorted_measures = pi_sort_grouped_item_list($status_order, $measures, '#weight');
  return $sorted_measures;
}

/**
 * FIX (eloy)
 * to show data table instead of activity list.
 */
function pi_data_table_row_values($node, $node_details, $data_item_activity_id, $use_measure) {
  global $user;
  $values = array();

  $details = get_inquiry_details_from_current_path();

  // This is actually of type "pi_sort_measures"
  $selected_measures_nid = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

  // If there's no sort_measures then just show all available
  if (isset($selected_measures_nid)) {
    $selected_measures_node = node_load($selected_measures_nid);
    if ($selected_measures_node) {
      $selected_measures_to_show = $selected_measures_node->measures_list;

      if (is_array($selected_measures_to_show)) {
        foreach ($selected_measures_to_show as $measure_nid => $measure) {
          if ($use_measure[$measure_nid]) {
            $key = check_plain($selected_measures_nid . "-" . $measure_nid);
            $measure_type = node_load($measure_nid);

            $measure_value = $node->measures[$key]['#value'];

            $formatted_value = pi_chart_get_html_value($measure_value, $measure_type);            
            $values[] = $formatted_value;
          }
        }
      }
    }
  }
  return $values;
}

/**
 * Implementation of pi_data_view().
 */
function pi_data_view($node, $teaser = FALSE, $page = FALSE, $link = FALSE) {
  global $user;
  $details = get_inquiry_details_from_current_path();

  // Use Drupal's default node view.
  $node = node_prepare($node, $teaser);

  $node->content['pi_data'] = array(
      '#value' => theme('pi_data', $node, $teaser),
      '#weight' => 2
  );

  // This is actually of type "pi_sort_measures"
  $selected_measures_nid = find_selected_measures_nid_for_uid_and_inquiry($user->uid, $details->inquiry_id);

  // If there's no sort_measures then just show all available
  if (isset($selected_measures_nid)) {
    $selected_measures_node = node_load($selected_measures_nid);
    if ($selected_measures_node) {
      $selected_measures_to_show = $selected_measures_node->measures_list;
      $measures_to_show = $node->measures;
      if (is_array($selected_measures_to_show)) {
        foreach ($selected_measures_to_show as $measure_nid => $measure) {
          $key = check_plain($selected_measures_nid . "-" . $measure_nid);
          $measure_type = node_load($measure_nid);
          if (array_key_exists($key, $measures_to_show)) {
            $measure_value = $node->measures[$key]['#value'];
          } else {
            $measure_value = NULL;
          }
          $node->content[$key] = array(
              '#value' => theme('pi_data_measure', $measure, $measure_type, $measure_value, $teaser),
              '#weight' => $measures_count++
          );
        }
      }
    }
  }
  return $node;
}

/**
 * Implementation of hook_theme().
 */
function pi_data_theme() {
  return array(
      'pi_data' => array(
          'arguments' => array('node', 'teaser'),
      ),
      'pi_data_measure' => array(
          'arguments' => array('measure', 'measure_type', 'measure_value', 'teaser'),
      ),
  );
}

function theme_pi_data($node, $teaser) {
  $output = '';
  return $output;
}

/**
 * theme function to display one measure in view mode for pi_data
 * @param node(pi_draggable_measure) $measure the measure selection data for the form
 * @param node(pi_available_measures) $measure_type the description of the measure
 * @param string $measure_value the measure value
 */
function theme_pi_data_measure($measure, $measure_type, $measure_value, $teaser) {
  $output = '';

  $show_status = array('key', 'selected');
  if (in_array($measure['#status'], $show_status)) {
    //format the measure units
    if (isset($measure_type->units_short) AND ($measure_type->units_short != '')) {
      $units = " (" . check_plain($measure_type->units_short) . ")";
    } else {
      if (isset($measure_type->units) AND ($measure_type->units != '')) {
        $units = " (" . check_plain($measure_type->units) . ")";
      } else {
        $units = "";
      }
    }

    switch ($measure_type->field_type) {
      case 'upload-file':
        //pi_debug_message($measure_value);
        if ($teaser) {
          $output .= "" . check_plain($measure_type->title) . ": ";
          $output .= "<a href='" . file_download_path($measure_value) . "'>" . t("Download") . "</a> ";
        } else {
          $output .= "<p>" . check_plain($measure_type->title) . ": ";
          $output .= "<a href='" . file_download_path($measure_value) . "'>" . t("Download") . "</a><p>";
        }
        break;
      case 'upload-image':
        $image_node = node_load($measure_value);
        //pi_debug_message($measure_value);
        if ($image_node->type == 'image') {
          if ($teaser) {
            $output .= "<div>" . check_plain($measure_type->title) . ": </div>";
            $output .= "<div>" . check_plain($image_node->title) . "</div>";
          } else {
            $output .= "<div>" . check_plain($measure_type->title) . ": </div>";
            $output .= "<div>" . image_display($image_node) . "</div>";
          }
        }
        break;
      default:

        if (strlen($measure_value) > 0) {
          if ($teaser) {
            $output .= check_plain($measure_type->title . $units) . ": ";
            $output .= $measure_value . ", ";
          } else {
            $output .= "<li><b>" . check_plain($measure_type->title . $units) . ":</b> "
                    . "<div style='padding-left:20px;'>"
                    . _pi_chart_get_html_value($measure_value, $measure_type)
                    . "</div></li>";
          }
        }
        break;
    }
  }
  return $output;
}

