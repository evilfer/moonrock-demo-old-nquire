<?php
// $Id: pi_default_measure_filter.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "default for available measures filter" node type
 */


/**
 * Implementation of hook_node_info().
 */
function pi_default_measure_filter_node_info() {
  return array(
	'pi_default_measure_filter' => array(
     'name' => t('Inquiry measures default configuration'), // Required.
	 'module' => 'pi_default_measure_filter',  // Required.
	 'description' => t('Select default for the data types that can be used for measures in an inquiry.'), 
	 // Required.
	 'has_title' => FALSE,
	 'has_body' => FALSE,
	 'locked' => TRUE
	)
   );
}

function pi_default_measure_filter_menu() {
  
  $items = array();
  
  $items['admin/nquire/pi-default_measure_configuration'] = array(
    'title' => 'Default measure configuration',
    'description' => 'Define default measure configuration',
    'page callback' => 'pi_default_measure_admin',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,//MENU_CALLBACK,
  );
  
  return $items;
}

function pi_default_measure_admin() {
  $default_filter_measure_nid = find_default_measure_filter_nid();
  if($default_filter_measure_nid) {
    $loaded_node = node_load($default_filter_measure_nid);
    if( !function_exists("node_page_edit")) {
      include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
    }
  
    $output = node_page_edit($loaded_node);
  }
  else {
    if( ! function_exists("node_add")) {
      include_once(drupal_get_path('module', 'node') . '/node.pages.inc');
    }
    $output = node_add(pi_default_measure_filter);
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function pi_default_measure_filter_perm() {
}

/**
 * Implementation of hook_access().
 */
function pi_default_measure_filter_access($op, $node, $account) {
    global $user;

    if ($op == 'create') {
        return TRUE;//check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'add');
    }

    if ($op == 'update') {
        return TRUE;//check_node_function_of_activity ($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
    }
}

/**
 * Implementation of hook_node_form().
 */
function pi_default_measure_filter_form(&$node) {

  	// Get metadata for this node type
  	// (we use it for labelling title and body fields).
  	// We defined this in pi_key_questions_node_info().
  	drupal_set_title('Default setting for measures');
  	
  	$type = node_get_types('type', $node);
    
    $form['title'] = array(
      '#type' => 'hidden',
      '#value' => 'Default setting for measures'
    );
    
    $form['#redirect'] = "admin/";
    
    $form['symbol'] = array(
	  	'#type' => 'fieldset',
	  	'#collapsible' => TRUE,
	  	'#title' => 'Symbol',
	  	'#weight' => 1
  	);
  
  // Fields for 'symbol' parameter
	  $form['symbol']['symbol_test'] = array(
	    '#type' => 'radios',
	    '#title' => t('Symbol shown'),
	    '#required' => FALSE,
	    '#default_value' => $node->symbol_test,
	    '#options' => array(0 => "No", 1 => "Yes"),
	    '#weight' => 1
	  );
	  
	  $form['symbol']['symbol_value'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Symbol default value'),
	    '#required' => FALSE,
	    '#default_value' => $node->symbol_value,
	    '#resizable' => FALSE,
	    '#size' => 2,
	    '#weight' => 2
	  );
  
	$form['units'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'Units',
		'#weight' => 2
  	);

  	// Fields for units parameter
	  $form['units']['units_test'] = array(
	    '#type' => 'radios',
	    '#title' => t('Units shown'),
	    '#required' => FALSE,
	    '#default_value' => $node->units_test,
	    '#options' => array(0 => "No", 1 => "Yes"),
	    '#weight' => 1
	  );
	  $form['units']['units_value'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Units default value'),
	    '#required' => FALSE,
	    '#default_value' => $node->units_value,
	    '#resizable' => FALSE,
	    '#size' => 2,
	    '#weight' => 2
	  );  
	  $form['units']['units_short_test'] = array(
	    '#type' => 'radios',
	    '#title' => t('Units short shown'),
	    '#required' => FALSE,
	    '#default_value' => $node->units_short_test,
	    '#options' => array(0 => "No", 1 => "Yes"),
	    '#weight' => 3
	  );
	  $form['units']['units_short_value'] = array(
	    '#type' => 'textfield',
	    '#title' => t('Units short default value'),
	    '#required' => FALSE,
	    '#default_value' => $node->units_short_value,
	    '#resizable' => FALSE,
	    '#size' => 2,
	    '#weight' => 4
	  );   
	   
	$form['field_type'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'Field type',
		'#weight' => 3
  	);
	  
  	$form['field_type']['field_type_test'] = array(
		'#type' => 'radios',
		'#title' => t('Field type shown'),
		'#required' => FALSE,
		'#default_value' => $node->field_type_test,
		'#options' => array(0 => "No", 1 => "Yes"),
		'#weight' => 1 
  	);
  	$form['field_type']['field_type_value'] = array(
		'#type' => 'select',
		'#title' => t('Field type default value'),
		'#required' => FALSE,
		'#default_value' => $node->field_type_value,
		'#options' => pi_default_measure_filter_available_form_elements(),
		'#description' => t('Select the type of form field you require. This will be used in the data collection interface.'),
		'#weight' => 2
	);

	$form['data_type'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'Data type',
		'#weight' => 4,
  	);
  	
		$form['data_type']['data_type_test'] = array(
			'#type' => 'radios',
			'#title' => t('Data type shown'),
			'#required' => FALSE,
			'#default_value' => $node->data_type_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 1
		);
		$form['data_type']['data_type_value'] = array(
			'#type' => 'select',
			'#title' => t('Data type default value'),
			'#required' => FALSE,
			'#default_value' => $node->data_type_value,
			'#options' => array('numeric' => 'Numeric','text' => 'Text','menu' => 'Menu'),
			'#description' => t('Select the type of data that should be entered. This will be used to validate the submitted form.'),
			'#weight' => 2
		);

	$form['list_options'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'List Options',
		'#weight' => 5,
  	);		
		
		$form['list_options']['list_options_test'] = array(
			'#type' => 'radios',
			'#title' => t('Options shown'),
			'#required' => FALSE,
			'#default_value' => $node->list_options_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 1
		);
		$form['list_options']['list_options_value'] = array(
			'#type' => 'textarea',
			'#title' => t('Options default value'),
			'#required' => FALSE,
			'#default_value' => $node->list_options_value,
			'#description' => t('Enter the set of menu options (putting each option on a new line).'),
			'#weight' => 2
		);
		
	$form['content_options'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'Content Options',
		'#weight' => 6,
  	);	
  			
		 $form['content_options']['content_options_test'] = array(
			'#type' => 'radios',
			'#title' => t('Content options shown'),
			'#required' => FALSE,
			'#default_value' => $node->content_options_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 1
		);
		$query = "SELECT {node_type}.type, {node_type}.name FROM {node_type}, {pi_available_content_types} WHERE {node_type}.type = {pi_available_content_types}.type";
		$results = db_query($query);
		$node_types = array("");
		while($result = db_fetch_object($results))
		{
			$node_types[$result->type] = $result->name;
		}
		$form['content_options']['content_options_value'] = array(
			'#type' => 'select',
			'#title' => t('Content options default value'),
			'#required' => FALSE,
			'#description' => t('Alternatively, enter the content type from which the menu options will be taken.'),
			'#default_value' => $node->content_options_value,
			'#options' => $node_types,
			'#weight' => 2
		);
  
	$form['textfield_size'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'Textfield size',
		'#weight' => 7,
  	);	
		
		$form['textfield_size']['textfield_size_test'] = array(
			'#type' => 'radios',
			'#title' => t('Textfield size shown'),
			'#required' => FALSE,
			'#default_value' => $node->textfield_size_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 1
		);
		$form['textfield_size']['textfield_size_value'] = array(
			'#type' => 'textfield',
			'#title' => t('Textfield size default value'),
			'#required' => FALSE,
			'#size' => 3,
			'#default_value' => $node->textfield_size_value,
			'#weight' => 2
		);

	$form['textarea'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'Textarea',
		'#weight' => 8,
  	);	
		
		 $form['textarea']['textarea_cols_test'] = array(
			'#type' => 'radios',
			'#title' => t('Textarea cols shown'),
			'#required' => FALSE,
			'#default_value' => $node->textarea_cols_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 1
		);
		$form['textarea']['cols_value'] = array(
			'#type' => 'textfield',
			'#title' => t('Textarea cols default value'),
			'#required' => FALSE,
			'#size' => 3,
			'#default_value' => $node->textarea_cols_value,
			'#weight' => 2
		); 
		 $form['textarea']['rows_test'] = array(
			'#type' => 'radios',
			'#title' => t('Textarea rows shown'),
			'#required' => FALSE,
			'#default_value' => $node->textarea_rows_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 3
		);
		$form['textarea']['rows_value'] = array(
			'#type' => 'textfield',
			'#title' => t('Textarea rows default value'),
			'#required' => FALSE,
			'#size' => 3,
			'#default_value' => $node->textarea_rows_value,
			'#weight' => 4
		); 
		
	$form['measurement_device'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'Measurement device',
		'#weight' => 9,
  	);			
		
		$form['measurement_device']['name_test'] = array(
			'#type' => 'radios',
			'#title' => t('Measurement device name shown'),
			'#required' => FALSE,
			'#default_value' => $node->measurement_device_name_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 1
		);
		$form['measurement_device']['measurement_device_name_value'] = array(
			'#type' => 'textfield',
			'#title' => t('Measurement device name default value'),
			'#required' => FALSE,
			'#size' => 3,
			'#default_value' => $node->measurement_device_name_value,
			'#weight' => 2
		);
		 $form['measurement_device']['measurement_device_description_test'] = array(
			'#type' => 'radios',
			'#title' => t('Measurement device description shown'),
			'#required' => FALSE,
			'#default_value' => $node->measurement_device_description_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 3
		);
		$form['measurement_device']['measurement_device_description_value'] = array(
			'#type' => 'textfield',
			'#title' => t('Measurement device description value'),
			'#required' => FALSE,
			'#size' => 3,
			'#default_value' => $node->measurement_device_description_value,
			'#weight' => 4
		);

	$form['image_filename'] = array(
		'#type' => 'fieldset',
		'#collapsible' => TRUE,
		'#title' => 'Image',
		'#weight' => 10,
	);	
		
		$form['image_filename']['image_filename_test'] = array(
			'#type' => 'radios',
			'#title' => t('Image id shown'),
			'#required' => FALSE,
			'#default_value' => $node->image_filename_test,
			'#options' => array(0 => "No", 1 => "Yes"),
			'#weight' => 1
		);
		//image filename
		if (isset($node->image_filename_value))
		{
			$image = node_load($node->image_filename_value);
			$current_text = '(current image = ' . $image->title . ')';
		}
		else
		{
			$current_text = '(no image currently selected)';
		}
		$form['image_filename']['image_filename_value'] = array(
			'#type' => 'file',
			'#title' => t('Picture'),
			'#size' => 48,
			'#description' => t('Select an image to illustrate the measurement or measurement device ' . $current_text . '.'),
			'#default_value' => $node->image_filename_value,
			'#weight' => 2
		);
	  
		$prefix  = '<p>' . t("For the installation specify which fields will be shown when a measure is added and default values for any field.") . '</p>';

	$form['#prefix'] = $prefix;
  
	return $form;
}

/**
 * Implementation of hook_insert().
 */
function pi_default_measure_filter_insert($node) {
	db_query("INSERT INTO {pi_default_measure_filter} (nid, vid, symbol_test, symbol_value, units_test, units_value, units_short_test, units_short_value, field_type_test, field_type_value, data_type_test, data_type_value, list_options_test, list_options_value, content_options_test, content_options_value, textfield_size_test, textfield_size_value, textarea_cols_test, textarea_cols_value, textarea_rows_test, textarea_rows_value, measurement_device_name_test, measurement_device_name_value, measurement_device_description_test, measurement_device_description_value, image_filename_test, image_filename_value) VALUES ('%d', '%d', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%s', '%d', '%d', '%d', '%d', '%d', '%d', '%d', '%s', '%d', '%s', '%d', '%d' )",
		$node->nid, $node->vid, $node->symbol_test, $node->symbol_value, $node->units_test, $node->units_value, $node->units_short_test, $node->units_short_value, $node->field_type_test, $node->field_type_value, $node->data_type_test, $node->data_type_value, $node->list_options_test, $node->list_options_value, $node->content_options_test, $node->content_options_value, $node->textfield_size_test, $node->textfield_size_value, $node->textarea_cols_test, $node->textarea_cols_value, $node->textarea_rows_test, $node->textarea_rows_value, $node->measurement_device_name_test, $node->measurement_device_name_value, $node->measurement_device_description_test, $node->measurement_device_description_value, $node->image_filename_test, $node->image_filename_value);
}

/**
 * Implementation of hook_update().
 */
function pi_default_measure_filter_update($node) {
	if ($node->revision)
	{
		pi_default_measure_filter_insert($node);
	}
	else
	{
		db_query("UPDATE {pi_default_measure_filter} SET symbol_test = '%d', symbol_value = '%s', units_test = '%d', units_value = '%s', units_short_test = '%d', units_short_value = '%s', field_type_test = '%d', field_type_value = '%s', data_type_test = '%d', data_type_value = '%s', list_options_test = '%d', list_options_value = '%s', content_options_test = '%d', content_options_value = '%s', textfield_size_test = '%d', textfield_size_value = '%d', textarea_cols_test = '%d', textarea_cols_value = '%d', textarea_rows_test = '%d', textarea_rows_value = '%d', measurement_device_name_test = '%d', measurement_device_name_value = '%s', measurement_device_description_test = '%d', measurement_device_description_value = '%s', image_filename_test = '%d', image_filename_value = '%d' WHERE vid = '%d'",
		$node->symbol_test, $node->symbol_value, $node->units_test, $node->units_value, $node->units_short_test, $node->units_short_value, $node->field_type_test, $node->field_type_value, $node->data_type_test, $node->data_type_value, $node->list_options_test, $node->list_options_value, $node->content_options_test, $node->content_options_value, $node->textfield_size_test, $node->textfield_size_value, $node->textarea_cols_test, $node->textarea_cols_value, $node->textarea_rows_test, $node->textarea_rows_value, $node->measurement_device_name_test, $node->measurement_device_name_value, $node->measurement_device_description_test, $node->measurement_device_description_value, $node->image_filename_test, $node->image_filename_value, $node->vid);
	}
}

/**
 * Implementation of hook_delete().
 */
function pi_default_measure_filter_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {pi_default_measure_filter} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function pi_default_measure_filter_load($node) {
	return db_fetch_object(db_query('SELECT * FROM {pi_default_measure_filter} WHERE vid = %d', $node->vid));
}

/**
 * Implementation of hook_view().
 */
function pi_default_measure_filter_view($node, $teaser = FALSE, $page = FALSE) {
  if (!$teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);

    $node->content['pi_default_measure_filter'] = array(
    '#value' => theme('pi_default_measure_filter', $node),
    '#weight' => 2
    );
  }

  if ($teaser) {
    // Use Drupal's default node view.
    $node = node_prepare($node, $teaser);
  }

  return $node;
}

/**
 * hook_theme() for pi_default_measure_filter
 * 
 * @return array of theme functions as per drupal 6 api   
 */
function pi_default_measure_filter_theme() {
  return array(
    'pi_default_measure_filter' => array(
      'arguments' => array('node'),
    ),
  );
}


/**
 * theme function to generate the Measure Format view page
 * @param object(node) $node a drupal pi_default_measure_filter node
 * @return string html output 
 */
function theme_pi_default_measure_filter($node) {
  
  drupal_set_title('Default setting for measures');
	$output  .= '<p>For the installation specify which fields will be shown when a measure is added and default values for any field.</p>';

  $header = array(
	    t('Measure attribute'),
	    t('Can be changed by user?'),
	    t('Default value'),
    );
  
  $rows = array();
	
	$row = array();
	$row[] = t('Symbol');
	$row[] = t(pi_default_measure_filter_output_binary($node->symbol_test));
	$row[] = t($node->symbol_value);
	$rows[] = array('data' => $row);
	
	$row = array();
	$row[] = t('Units');
	$row[] = t(pi_default_measure_filter_output_binary($node->units_test));
	$row[] = t($node->units_value);
	$rows[] = array('data' => $row);
	
	$row = array();
	$row[] = t('Units short name');
	$row[] = t(pi_default_measure_filter_output_binary($node->units_short_test));
	$row[] = t($node->units_short_value);
	$rows[] = array('data' => $row);
	
  $row = array();
  $row[] = t('Field type');
  $row[] = t(pi_default_measure_filter_output_binary($node->field_type_test));
  $row[] = t($node->field_type_value);
  $rows[] = array('data' => $row);

  $row = array();
	$row[] = t('Data type');
	$row[] = t(pi_default_measure_filter_output_binary($node->data_type_test));
	$row[] = t($node->data_type_value);
	$rows[] = array('data' => $row);

	//list options list_options_test
  $row = array();
  $row[] = t('List options');
  $row[] = t(pi_default_measure_filter_output_binary($node->list_options_test));
  $row[] = t($node->list_options_value);
  $rows[] = array('data' => $row);

  //content options content_options_test
  $row = array();
  $row[] = t('Content options');
  $row[] = t(pi_default_measure_filter_output_binary($node->content_options_test));
  $row[] = t($node->content_options_value);
  $rows[] = array('data' => $row);
  
	//textfield size textfield_size_test
	$row = array();
  $row[] = t('Textfield size');
  $row[] = t(pi_default_measure_filter_output_binary($node->textfield_size_test));
  $row[] = t($node->textfield_size_value);
  $rows[] = array('data' => $row);
  
	//textarea cols textarea_cols_test
	$row = array();
  $row[] = t('Textarea columns');
  $row[] = t(pi_default_measure_filter_output_binary($node->textarea_cols_test));
  $row[] = t($node->textarea_cols_value);
  $rows[] = array('data' => $row);
  
	//textarea rows textarea_rows_test
  $row = array();
  $row[] = t('Textarea rows');
  $row[] = t(pi_default_measure_filter_output_binary($node->textarea_rows_test));
  $row[] = t($node->textarea_rows_value);
  $rows[] = array('data' => $row);	
	
	$row = array();
	$row[] = t('Measurement device name');
	$row[] = t(pi_default_measure_filter_output_binary($node->measurement_device_name_test));
	$row[] = t($node->measurement_device_name_value);
	$rows[] = array('data' => $row);
	
	$row = array();
	$row[] = t('Measurement device description');
	$row[] = t(pi_default_measure_filter_output_binary($node->measurement_device_description_test));
	$row[] = t($node->measurement_device_description_value);
	$rows[] = array('data' => $row);
	
	$output .= theme('table', $header, $rows);
  
  return $output;
}

/**
 * Returns t("Yes") or t("No") depending on whether $x is true or false will return no if $x is null
 * @param $x
 */
function pi_default_measure_filter_output_binary($x) {
		return($x ? t("Yes") : t("No"));
}


/**
 * List the options for data input filed types
 * @return array of form-element types for pi_data and descriptions 
 */
function pi_default_measure_filter_available_form_elements()
{
	return array(
	    	'textfield' => 'Single text line',
	    	'textarea' => 'Multi-line text area',
	    	'select' => 'Single select pull-down menu',
	    	'radios' => 'Single select radio buttons',
	    	'checkboxes' => 'Multi-select checkboxes', 
	    	'upload-file' => 'Upload a file',
	    	'upload-image' => 'Upload an image',
  		);
}

