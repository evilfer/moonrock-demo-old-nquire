<?php

require_once( 'lib/pChart/pData.class.php');
require_once( 'lib/pChart/pDraw.class.php');
require_once( 'lib/pChart/pImage.class.php');

/*
  require_once( 'lib/pChart/pData.class.1.26.php');
  require_once( 'lib/pChart/pChart.class.1.26.php');
 */

function pi_chart_menu() {
  $items['activity/%/chart.png'] = array(
      'page callback' => 'pi_chart_show_chart_as_png',
      'page arguments' => array(1, 2),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );

  return $items;
}

function pi_chart_show_chart_as_png($activity_id, $arg_node_function) {
  global $user;

  $uid = $user->uid;

  $details = get_inquiry_details_from_current_path();

  $nid = get_nid_for_inquiry_activity_and_user($details->inquiry_id, $activity_id, $uid);
  $node = node_load($nid);

  $selected_measures = "";
  $delim = "";

  $SQL = "SELECT {available_measure} FROM {pi_result_presentations} WHERE nid = %d AND vid = %d AND status = '1' ORDER BY weight ASC";

  $measures = db_query($SQL, $node->nid, $node->vid);

  while ($measure = db_fetch_object($measures)) {
    $selected_measures .= $delim . $measure->available_measure;
    if ($delim == "") {
      $delim = ", ";
    };
  }

  $headers = get_selected_measures_headings_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
  $rows = get_selected_measures_data_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);
  $types = get_selected_measures_types_for_inquiry_and_user($details->inquiry_id, $selected_measures, $user->uid);

  /*
   * Group by key measure
   */

  $key_numeric = $types[0]->data_type == 'numeric';

  $numeric_fields = array();
  $color_field = FALSE;

  for ($i = 1; $i < count($types); $i++) {
    if ($types[$i]->data_type == 'numeric') {
      $numeric_fields[] = $i;
    } else if ($types[$i]->content_options) {
      if (function_exists("{$types[$i]->content_options}_nquire_data_get_numeric_value")) {
        $numeric_fields[] = $i;
      } else if (function_exists("{$types[$i]->content_options}_nquire_data_get_color_value")) {
        $color_field = $i;
      }
    }
  }

  $grouped_rows = array();
  foreach ($rows as $row) {
    $row_has_data = FALSE;
    foreach ($numeric_fields as $field) {
      if (strlen($row[$field]) > 0) {
        $row_has_data = TRUE;
        break;
      }
    }
    if ($row_has_data) {
      $grouped_rows[$row[0]][] = $row;
    }
  }

  /*
   * determine chart type
   */
  if ($key_numeric) {
    $type = 'scatter';
  } else {
    $max_data_count_per_key_field = 0;
    foreach ($grouped_rows as $row_group) {
      if (count($row_group) > $max_data_count_per_key_field) {
        $max_data_count_per_key_field = count($row_group);
      }
    }

    if ($max_data_count_per_key_field > 1) {
      $type = 'plot';
    } else {
      $type = 'bar';
    }
  }

  switch ($type) {
    case 'bar':
      _pi_chart_draw_bar_chart($node->title, $headers, $grouped_rows, $types, $numeric_fields, $color_field);
      break;
    case 'plot':
      _pi_chart_draw_plot_chart($node->title, $headers, $grouped_rows, $types, $numeric_fields, $color_field);
      break;
    default:
      break;
  }

  return;
}

function _pi_chart_get_numeric_value($value, $type) {
  if ($type->content_options) {
    $function_name = "{$type->content_options}_nquire_data_get_numeric_value";
    return $function_name($value);
  } else {
    return strlen($value) > 0 ? floatval($value) : VOID;
  }
}

function _pi_chart_get_color_value($value, $type) {
  if ($type->content_options) {
    $function_name = "{$type->content_options}_nquire_data_get_color_value";
    return $function_name($value);
  } else {
    return array("R" => 255, "G" => 255, "B" => 255, "Alpha" => 127);
  }
}

function _pi_chart_get_text_value($value, $type) {
  if ($type->content_options) {
    $function_name = "{$type->content_options}_nquire_data_get_text_value";
    return $function_name($value);
  } else {
    return check_simple($value);
  }
}

function _pi_chart_draw_bar_chart($title, $headers, $grouped_rows, $types, $numeric_fields, $color_field) {
  /* Create and populate the pData object */
  $MyData = new pData();

  /* Add series. There must be only one row group for each key, so we use only $row_group[0]. */
  foreach ($numeric_fields as $field) {
    $series = array();
    foreach ($grouped_rows as $row_group) {
      if (count($row_group) > 0) {
        $value = $row_group[0][$field];
        $series[] = _pi_chart_get_numeric_value($value, $types[$field]);
      }
    }
    $MyData->addPoints($series, $headers[$field]);
    $MyData->setAxisName(0, $headers[$field]);
  }

  $abscissa_series = array();
  foreach ($grouped_rows as $key => $row_group) {
    if (count($row_group) > 0) {
      $abscissa_series[] = _pi_chart_get_text_value($key, $types[0]);
    }
  }

  $MyData->addPoints($abscissa_series, $headers[0]);
  $MyData->setSerieDescription($headers[0], $headers[0]);
  $MyData->setAbscissa($headers[0]);
  $MyData->setAbscissaName($headers[0]);



  if ($color_field) {
    $palette = array();

    foreach ($grouped_rows as $row_group) {
      $value = $row_group[0][$color_field];
      $palette[] = _pi_chart_get_color_value($value, $types[$color_field]);
    }
  } else {
    $palette = NULL;
  }



  $myPicture = new pImage(700, 250, $MyData);


  /* Add a border to the picture */
  $myPicture->drawRectangle(0, 0, 699, 249, array("R" => 0, "G" => 0, "B" => 0));

  /* Set the default font */
  $myPicture->setFontProperties(array("FontName" => dirname(__FILE__) . '/lib/Fonts/tahoma.ttf', "FontSize" => 10));

  /* Define the chart area */
  $myPicture->setGraphArea(60, 40, 650, 210);

  /* Draw the scale */
  $scaleSettings = array(
      "GridR" => 200,
      "GridG" => 200,
      "GridB" => 200,
      "DrawSubTicks" => TRUE,
      "CycleBackground" => TRUE,
      "Mode" => SCALE_MODE_START0,
  );
  $myPicture->drawScale($scaleSettings);
  $myPicture->drawText(350, 5, $title, array("FontSize" => 12, "Align" => TEXT_ALIGN_TOPMIDDLE));

  /* Write the chart legend */
  //$myPicture->drawLegend(580, 12, array("Style" => LEGEND_NOBORDER, "Mode" => LEGEND_HORIZONTAL));

  /* Turn on shadow computing */
  $myPicture->setShadow(TRUE, array("X" => 1, "Y" => 1, "R" => 0, "G" => 0, "B" => 0, "Alpha" => 10));

  /* Draw the chart */
  $myPicture->setShadow(TRUE, array("X" => 1, "Y" => 1, "R" => 0, "G" => 0, "B" => 0, "Alpha" => 10));

  $settings = array(
      "DisplayPos" => LABEL_POS_TOP,
      "DisplayValues" => TRUE,
      "DisplayR" => 15,
      "DisplayG" => 15,
      "DisplayB" => 15,
      "DisplayShadow" => TRUE,
      //"Rounded" => TRUE,
      "BorderR" => 35,
      "BorderG" => 35,
      "BorderB" => 35,
      "InnerBorderR" => 215,
      "InnerBorderG" => 215,
      "InnerBorderB" => 215,
          //"InnerSurrounding" => 100,
  );

  if ($color_field) {
    $settings["OverrideColors"] = $palette;
  } else {
    $settings["Gradient"] = TRUE;
    $settings["GradientMode"] = GRADIENT_SIMPLE;
  }
  $myPicture->drawBarChart($settings);
  /* Render the picture (choose the best way) */
  $myPicture->Stroke();
}

function _pi_chart_draw_plot_chart($title, $headers, $grouped_rows, $types, $numeric_fields, $color_field) {
  /* Create and populate the pData object */
  $MyData = new pData();

  /**
   * simple processing: one serie per value.
   */
  $series_counter = 1;
  $keys = array_keys($grouped_rows);

  foreach ($numeric_fields as $field) {
    for ($key_index = 0; $key_index < count($keys); $key_index++) {
      $row_group = $grouped_rows[$keys[$key_index]];
      usort($row_group, function($a, $b) {
                if ($a[$field] < $b[$field]) {
                  return 1;
                } else if ($a[field] > $b[field]) {
                  return -1;
                } else {
                  return 0;
                }
              });

      foreach ($row_group as $row) {
        $value = $row[$field];
        $series = $key_index > 0 ? array_fill(0, $key_index, VOID) : array();
        $series[] = _pi_chart_get_numeric_value($value, $types[$field]);
        if ($key_index < count($keys) - 1) {
          $series = array_merge($series, array_fill(0, count($keys) - 1 - $key_index, VOID));
        }
        $MyData->addPoints($series, $series_counter);
        if ($color_field) {
          $MyData->setPalette($series_counter, _pi_chart_get_color_value($row[$color_field], $types[$color_field]));
        }

        $series_counter++;
      }
    }
    $MyData->setAxisName(0, $headers[$field]);
  }

  $abscissa_series = array();
  for ($key_index = 0; $key_index < count($keys); $key_index++) {
    $abscissa_series[] = _pi_chart_get_text_value($keys[$key_index], $types[0]);
  }
  $MyData->addPoints($abscissa_series, $headers[0]);
  $MyData->setSerieDescription($headers[0], $headers[0]);
  $MyData->setAbscissa($headers[0]);
  $MyData->setAbscissaName($headers[0]);


  $myPicture = new pImage(700, 250, $MyData);

  /* Add a border to the picture */
  $myPicture->drawRectangle(0, 0, 699, 249, array("R" => 0, "G" => 0, "B" => 0));

  /* Set the default font */
  $myPicture->setFontProperties(array("FontName" => dirname(__FILE__) . '/lib/Fonts/tahoma.ttf', "FontSize" => 10));

  /* Define the chart area */
  $myPicture->setGraphArea(60, 40, 650, 210);

  /* Draw the scale */
  $scaleSettings = array(
      "GridR" => 200,
      "GridG" => 200,
      "GridB" => 200,
      "DrawSubTicks" => TRUE,
      "CycleBackground" => TRUE,
      "Mode" => SCALE_MODE_START0,
  );
  $myPicture->drawScale($scaleSettings);
  $myPicture->drawText(350, 5, $title, array("FontSize" => 12, "Align" => TEXT_ALIGN_TOPMIDDLE));
  /* Write the chart legend */
  //$myPicture->drawLegend(580, 12, array("Style" => LEGEND_NOBORDER, "Mode" => LEGEND_HORIZONTAL));

  /* Turn on shadow computing */
  $myPicture->setShadow(TRUE, array("X" => 1, "Y" => 1, "R" => 0, "G" => 0, "B" => 0, "Alpha" => 10));

  $settings = array(
      "DisplayPos" => LABEL_POS_TOP,
      "DisplayValues" => TRUE,
      "DisplayR" => 15,
      "DisplayG" => 15,
      "DisplayB" => 15,
      "DisplayShadow" => TRUE,
      //"Rounded" => TRUE,
      "BorderR" => 35,
      "BorderG" => 35,
      "BorderB" => 35,
      "InnerBorderR" => 215,
      "InnerBorderG" => 215,
      "InnerBorderB" => 215,
      "BorderSize" => 2,
      "PlotSize" => 7,
      "PlotBorder" => TRUE,
  );

  $myPicture->drawPlotChart($settings);
  /* Render the picture (choose the best way) */
  $myPicture->Stroke();
}

?>
