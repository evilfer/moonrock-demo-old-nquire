<?php
// $Id: pi_datalogger.module, 2010/04/15 MCP Exp $

/**
 * @file
 * This module adds an activity that allows you to select and add data from ScienceScope
 * dataloggers.  It extends pi_data module with a new form with a java applet.
 */

/**
 * Implementation of hook_node_info() return a type the same as pio_data but with name pi_datalogger
 * This means the structure will always be copied, as it needs to be compatible with pi_data apart from the form
 */
function pi_datalogger_node_info() {
/*	$pi_data_type=pi_data_node_info();
	$type=array();
	$type['pi_datalogger'] = $pi_data_type['pi_data'];
	$type['pi_datalogger']['name'] = t('Datalogger Data');
	$type['pi_datalogger']['module'] = 'pi_datalogger';
	$type['pi_datalogger']['description'] = 'Add data from a ScienceScope Datalogger';*/
	return array(
		'pi_datalogger' => array(
		    'name' => t('Datalogger Data'), // Required.
		    'module' => 'pi_datalogger',  // Required.
		    'description' => t('Upload data from a datalogger.'), // Required.
		    'has_title' => TRUE,
		    'title_label' => t('Datalogger data'),
		    'has_body' => FALSE,
		    'locked' => FALSE)
		);
//	return $type;
}

/**
 * Implementation of hook_perm(), as above return the same as pi_data_perm()
 * presently this is empty, so if pi_data_perm eventually returns something it
 * may be necessary to replace array key ['pi_data'] with ['pi_datalogger']
 */
function pi_datalogger_perm() {
	return pi_data_perm();
}

/**
 * Implementation of hook_access() - once more pass this on to pi_data_access()
 */
function pi_datalogger_access($op, $node) {
	return TRUE;
	//return pi_data_access($op, $node);
}


/**
 * This is executed before every page request and provides the functionality to include particular files,
 * e.g. custom css and javascript files. 
 */
function pi_datalogger_init() {
    drupal_add_js(drupal_get_path('module', 'pi') .'/lib/jquery.json.js');
    drupal_add_js(drupal_get_path('module', 'pi_datalogger') .'/lib/datalogger.js');
}



/**
 * Implementation of hook_theme()
 */
function pi_datalogger_theme() {
	return array(
	    'pi_datalogger_data_form' => array(
			'arguments' => array('form'),
		),
	    'pi_datalogger_applet' => array(
	    	'arguments' => array('applet_location', 'applet_params'),
		),
	);
}

/**
 * 
 * @param $node
 * @param $teaser
 * @param $page
 * @return unknown_type
 */
function pi_datalogger_view($node, $teaser = FALSE, $page = FALSE) {
	global $base_url;
	$path_to_applet =  $base_url . '/' . drupal_get_path('module', 'pi_datalogger') . '/lib/DataLogger.jar';
	
	
	$measures_for_applet = array();
	$measures = array();
	$measure_weights = array();
	
	// First get the pi_data form and copy the measures fields from it
	$pi_data_form_state = array();
	$pi_data_form = drupal_retrieve_form('pi_data_form', $pi_data_form_state);
		
	// Now copy the fields to the measures array: 
	// Collect a list of [id]=>[weight], [id=>[item]
	// Sort [id]=>[weight] by [weight] and assemble ordered list of [item] from [id]=>[item]
	foreach(element_children($pi_data_form['onepageprofile_categories']) as $element_key)
	{
		$measure_weights[$element_key] = $pi_data_form['onepageprofile_categories'][$element_key]['value']['#weight'];
		$measures[$element_key] = array(
    		"id" => $element_key,
    		"title" => $pi_data_form['onepageprofile_categories'][$element_key]['value']['#title'],
		); 
	}
	asort($measure_weights);  // Sort measures so that MAX(weight) is last.
	foreach($measure_weights as $measure_id => $weight)
	{
		$measures_for_applet[] = $measures[$measure_id];
	} 
	
	//Use Drupal's default node view.
	$node = node_prepare($node, $teaser);
	
	$node->content['applet']['#value'] = theme('pi_datalogger_applet', $path_to_applet, $measures_for_applet);
	$node->content['applet']['#weight'] = -5;
	
	$node->content['data_form']['#value'] = drupal_get_form('pi_datalogger_data_form', array(NULL, array()));
	$node->content['data_form']['#weight'] = 5;
	
	return $node;
}


/**
 * pi_datalogger_data_form() - The form for entering the data, with java applet embedded
 */
function pi_datalogger_data_form($form_state) {

	$details = get_inquiry_details_from_current_path();
	
	//Since this is going to be an add-only form, junk the node data.
	
	//Now create a new form to submit the measures.
	$form=array();
	
	ahah_helper_register($form, $form_state); 
	
	$form['#theme'] = 'pi_datalogger_data_form';
	$form['#title'] = 'Add datalogger data';

	$form['datalogger_data'] = array(
		'#tree' => TRUE,
		'#prefix' => "<div id='datalogger-data-wrapper'>",
		'#suffix' => "</div>\n"
	);
	
	/** Get the measures for the form.  This is is done in two ways: when the form is initially built they
	 * can be coped from the original pi_data form.  When the form is submitted via ahah this can't be done
	 * as get_inquiry_details_from_current_path() fails, so they are stored in a hidden field in the form
	 * and retrieved this way. 
	 */ 
	$measures_for_form = array();
	if($form_state['submitted'] != true)
	{
		// If the first time the form is accessed, so get the measures from a pi_data form

		// First get the pi_data form and copy the measures fields from it
		$pi_data_form_state = array();
		$pi_data_form = drupal_retrieve_form('pi_data_form', $pi_data_form_state);
			
		// Now copy the fields to the measues array.
		foreach(element_children($pi_data_form['onepageprofile_categories']) as $element_key)
		{
			// Copy the form element
			$measures_for_form[$element_key] = $pi_data_form['onepageprofile_categories'][$element_key]['value'];
			// Then change it to a hidden element
			$measures_for_form[$element_key]['#type'] = 'hidden';
		}
	}
	else
	{
		//The form has been submitted via ahah, so get measures from the form data instead.
		$measures_for_form = unserialize($form_state['values']['datalogger_data']['datalogger_fields']);
		// Check this has produced something sensible and try ['storage'] if it hasn't
		if(!is_array($measures_for_applet))
		{
			$measures_for_form = unserialize($form_state['storage']['datalogger_data']['datalogger_fields']);
		}
		if(!is_array($measures_for_form))
		{
			$form['datalogger_data']['error_message'] = array(
				'#type' => 'hidden',
				'#value' => 'There was a problem accessing the selected measures for this inquiry.'
			);
		}	
	}
	
	// This is a hidden field where the measures data is added via the javascript, in json format
	// array of data items, each containing an array of measure objects, 
	//measure objects have attributes for "dataField"=>id and "value"=>reading value 
	$form['datalogger_data']['datalogger_values'] = array(
		'#type' => 'hidden',
	);
	
	/**
	 * Since the form uses the ahah helper the nQuire functions can't tell where this activity belongs
	 * when the form is submitted in the background, so the field items can't be dynamically generated.
	 * To work round this they are stored as a hidden field in the form and read back later.
	 * These need to be reset if the form is submitted, as when the form is rebuilt with ahah_helper
	 * the value is not stored.  (Not quite sure why!)  Hence they are part of the ['datalogger_data'] 
	 * fieldset which ahah_helper replaces.
	 */
	$form['datalogger_data']['datalogger_fields'] = array(
		'#type' => 'hidden',
		'#value' => serialize($measures_for_form)
	);

	// Make the form submit and re-render via javascript with ahah_helper
	$form['submit_button'] = array(
		'#type' => 'button',
		'#value' => t('Save data'),
		'#attributes' => array('style' => 'display:none;'),
		'#submit' => array('ahah_helper_submit'),
		'#ahah' => array(
			'event' => 'click',
			'progress' => array('type'=>''),
			'path' => ahah_helper_path(array(t('datalogger_data/'.$details->inquiry_id.'/'.$details->stage_id.'/'.$details->phase_id.'/'.$details->activity_id))),
			'wrapper' => 'datalogger-data-wrapper'
		),
	);

	/** If the form is submitted using ahah_helper then $form_state['submitted'] is set.
	 * In this case there is submitted data and it needs to be saved by calling the form_submit hook.
	 * Default values are always blank, so the data doesn't come back on the form, leaving it clear for new
	 * entries.
	 * 
	 * Here a javascript section is also included to call the next datapoint to be submit  
	 */
	if($form_state['submitted'])
	{
		// This prevents the form elements from being nested when the form item is rebuilt by ahah_helper.
		$form['datalogger_data']['#prefix'] = "";
		$form['datalogger_data']['#suffix'] = "";

		/*ob_start();
		var_dump($form_state);
		$form_data = ob_get_clean();
		$form['datalogger_data']['data'] = array(
				'#type' => 'hidden',
				'#value' => $form_data
		);*/
		pi_datalogger_data_form_submit($form, $form_state);
	}
	return $form;
}

/**
 * handles the data submitted to the datalogger_data form, this should be done in the background 
 * and returns nothing.  It takes the submitted field from the form and loads then into a new 
 * pi_data node object
 * at the moment, as this is submitted via an ajax request.
 */
function pi_datalogger_data_form_submit($form, &$form_state) {
	global $user;
	$json_datalogger_values = $form_state['values']['datalogger_data']['datalogger_values'];
	$datalogger_values = json_decode($json_datalogger_values);
	$serialized_datalogger_fields = $form_state['values']['datalogger_data']['datalogger_fields'];
	$datalogger_fields = unserialize($serialized_datalogger_fields);
	
	/*ob_start();
	var_dump($datalogger_fields);
	$form_data = ob_get_clean();
	drupal_set_message(htmlspecialchars($form_data));*/

	$saved_count = 0;
	/* datalogger data will be an array of data items, so take each and save them
	 */
	if(is_array($datalogger_values))
	{
		foreach($datalogger_values as $reading)
		{
			if(is_array($reading))
			{
				//Each reading is a new pi_data node.
				$data = new stdClass();
				$data->title = 'Inquiry data from datalogger';
				$data->body = '';
				$data->uid = $user->uid;
				$data->type = 'pi_data';
				$data->status = 1;
				$data->promote = 0;
				foreach($reading as $measure)
				{
					$id = $measure->datafield;
					if(array_key_exists($id, $datalogger_fields))
					{
						$value = $measure->value;
						$data->onepageprofile_categories[$id]['value'] = $value;
					}
					else
					{
						drupal_set_message("There was a problem saving data item '$id' with value $value.", 'error');
					}
				}
				node_save($data);
				$saved_count++;
			}
		}
		drupal_set_message("Saved $saved_count items of data.", 'information');
	}
}

/**
 * Theme function to display the add datalogger data form 
 * @param array $form drupal form data
 */
function theme_pi_datalogger_data_form($form) {
	$output .= drupal_render($form);
	return $output;
}


/**
 *  this function provides the themes layout for the datalogger applet
 * @param $applet_location the full url to applet on the server
 * @param $applet_params array('title'=>x,'id'=>y) of measures to provide as parameters to the applet 
 * @todo escape commas in parmeter names
 */
function theme_pi_datalogger_applet($applet_location, $applet_params)
{
	$output = '';
	$output .= "\n<APPLET CODE='uk.org.nquire.applet.LogbookReaderApplet' ARCHIVE='$applet_location' WIDTH=450 HEIGHT=450>\n";
	$param_names = array();
	foreach($applet_params as $param)
	{
		$param_names[] = htmlspecialchars($param['title']);
		$output .= "<param value='" . htmlspecialchars($param['id']) . "' name='dataField" . count($param_names) ."'/>\n";
	}
	$output .= "<param name='dataFields' value='" . implode(',', $param_names) ."'/>\n";
	$output .= "<param name='useDummyLogger' value='true'/>\n";
	$output .= "</APPLET>\n";
	return $output;
}