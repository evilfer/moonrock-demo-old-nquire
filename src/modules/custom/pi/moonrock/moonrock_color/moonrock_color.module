<?php

// $Id: moonrock_color.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "moonrock_color" node type
 */

/**
 * Implementation of hook_node_info().
 */
function moonrock_color_node_info() {

  return array(
      'moonrock_color' => array(
          'name' => t('Moonrock color'), // Required.
          'module' => 'moonrock_color', // Required.
          'description' => t('Moonrock colour'), // Required.
          'has_title' => TRUE,
          'title_label' => t('Moonrock colour'),
          'has_body' => TRUE,
          'body_label' => t('Moonrock colour'),
          'locked' => TRUE)
  );
}

/**
 * Implementation of hook_perm().
 */
function moonrock_color_perm() {
  
}

/**
 * Implementation of hook_access().
 */
function moonrock_color_access($op, $node, $account) {
  global $user;

  if ($op == 'view') {
    return true;
  }

  $details = get_inquiry_details_from_current_path();

  if ($op == 'create') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }

  if ($op == 'update' || $op == 'delete') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
}

/**
 * Implementation of hook_form().
 */
function moonrock_color_form(&$node) {

  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_wiki_notes_node_info().
  $type = node_get_types('type', $node);
  global $user;

  $node_details = get_inquiry_details_from_current_path();
  if (is_numeric($node_details->activity_id)) {
    $current_activity = load_activity($node_details->activity_id);
  }

  if ($current_activity->name) {
    drupal_set_title(t($current_activity->name));
  }

  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => FALSE,
      '#default_value' => $node->title,
      '#weight' => -5
  );

  $form['body_filter']['color'] = array(
      '#type' => 'textfield',
      '#title' => t('Color'),
      '#required' => TRUE,
      '#default_value' => $node->color,
      '#description' => t('Specify colour in format: #rgb'),
      '#weight' => -2
  );


  $prefix = "";
  if ($current_activity->description) {
    $prefix .= "<p>" . check_plain($current_activity->description) . "</p>";
  }

  $form['#prefix'] = $prefix;

  return $form;
}

/**
 * Implementation of hook_insert().
 */
function moonrock_color_insert($node) {
  db_query("INSERT INTO {moonrock_color} (nid, vid, color) VALUES ('%d', '%d', '%s')", $node->nid, $node->vid, $node->color);
}

/**
 * Implementation of hook_update().
 */
function moonrock_color_update($node) {
  if ($node->revision) {
    moonrock_color_insert($node);
  } else {
    db_query("UPDATE {moonrock_color} SET color = '%s', WHERE vid = %d", $node->color, $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function moonrock_color_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {moonrock_color} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function moonrock_color_load($node) {
  return db_fetch_object(db_query('SELECT * FROM {moonrock_color} WHERE vid = %d', $node->vid));
}

function moonrock_color_link_alter(&$links, $node) {
  // remove attachment links from upload.module
  unset($links['upload_attachments']);
}

/**
 * Implementation of hook_view().
 */
function moonrock_color_view($node, $teaser = FALSE, $page = FALSE) {
  // Use Drupal's default node view.
  $node = node_prepare($node, $teaser);

  $node->content['moonrock_color'] = array(
      '#value' => theme('moonrock_color', $node, $teaser),
      '#weight' => 2
  );

  return $node;
}

/**
 * MISSING
 *
 * @return multitype:multitype:multitype:string
 */
function moonrock_color_theme() {
  return array(
      'moonrock_color' => array(
          'arguments' => array('node', 'teaser'),
      ),
      'moonrock_color_options_form' => array(
          'arguments' => array('form'),
      ),
  );
}

/**
 * MISSING
 *
 * @param unknown_type $node
 * @return string
 */
function theme_moonrock_color($node, $teaser) {
  $size = 10;
  $small = $size - 2;
  $style1 = "display: inline-block; width: {$size}px; height: {$size}px; border: 1px solid #aaa;";
  $style2 = "display: block; width: {$small}px; height:{$small}px; background-color: {$node->color}; border: 1px solid #ccc;";

  $output = "<div style='$style1'><div style='$style2'></div></div><span style='padding-left:5px;'>{$node->title}</span>";
  return $output;
}

function moonrock_color_nquire_data_form_prefix() {
  $query = "SELECT nid FROM {node} WHERE {node}.type='moonrock_color' ";
  $result = db_query($query);

  $colors = array();
  $keys = array();
  while ($object = db_fetch_object($result)) {
    $color = node_load($object->nid);
    $colors[$color->nid] = array(
        "color" => $color->color,
        "title" => $color->title,
    );
    $keys[$color->color] = $color->nid;
  }

  $output .= "<script type='text/javascript'>\n";
  $output .= "var MoonrockColorColors = " . json_encode($colors) . ";\n";
  $output .= "var MoonrockColorKeys = " . json_encode($keys) . ";\n";
  $output .= "</script>\n";

  $output .= "<div style='padding-top:20px;'>";
  $output .= "<div><b>Colour:</b></div>";
  $output .= "<div id='moonrockColorPickerName'> </div>";
  $output .= "<div id='moonrockColorPicker'></div>";
  $output .= "</div>";

  drupal_add_js(drupal_get_path('module', 'moonrock_color') . '/js/jquery-simple-color/jquery.simple-color_m.js');
  drupal_add_js(drupal_get_path('module', 'moonrock_color') . '/js/moonrockColorSelect.js');

  return $output;
}

function moonrock_color_nquire_display_as_link($node) {
  return moonrock_color_nquire_display_as_key_measure($node, true);
}

function moonrock_color_nquire_display_as_measure($node, $teaser = true) {
  return theme_moonrock_color($node, $teaser);
}

function moonrock_color_nquire_display_as_key_measure($node, $teaser = true) {
  return check_plain($node->title);
}

function moonrock_color_nquire_measure_choose_explanation() {
  return t("Choose from the list one relevant color identified in a sample");
}

function moonrock_color_nquire_data_form_after_build($form_element, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'moonrock_color') . '/js/jquery-simple-color/jquery.simple-color_m.js');
  drupal_add_js(drupal_get_path('module', 'moonrock_color') . '/js/moonrockColorSelect.js');
  return $form_element;
}

function moonrock_color_nquire_data_get_color_value($nid) {
  $node = node_load($nid);
  if ($node && $node->type == 'moonrock_color') {
    $values = _moonrock_color_html2rgb($node->color);
    return array("R" => $values[0], "G" => $values[1], "B" => $values[2], "Alpha" => 100);
  }

  return array("R" => 255, "G" => 255, "B" => 255, "Alpha" => 50);
}

function _moonrock_color_html2rgb($color) {
  if ($color[0] == '#') {
    $color = substr($color, 1);
  }

  if (strlen($color) == 6)
    list($r, $g, $b) = array($color[0] . $color[1],
        $color[2] . $color[3],
        $color[4] . $color[5]);
  elseif (strlen($color) == 3)
    list($r, $g, $b) = array($color[0] . $color[0], $color[1] . $color[1], $color[2] . $color[2]);
  else
    return false;

  $r = hexdec($r);
  $g = hexdec($g);
  $b = hexdec($b);

  return array($r, $g, $b);
}