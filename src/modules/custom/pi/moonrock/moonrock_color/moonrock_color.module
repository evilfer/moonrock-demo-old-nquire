<?php

// $Id: moonrock_color.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file
 * Module for creating "moonrock_color" node type
 */

/**
 * Implementation of hook_node_info().
 */
function moonrock_color_node_info() {

  return array(
      'moonrock_color' => array(
          'name' => t('Moonrock color'), // Required.
          'module' => 'moonrock_color', // Required.
          'description' => t('Moonrock colour'), // Required.
          'has_title' => TRUE,
          'title_label' => t('Moonrock colour'),
          'has_body' => TRUE,
          'body_label' => t('Moonrock colour'),
          'locked' => TRUE)
  );
}

function moonrock_color_menu() {
  $items = array();

  $items['admin/moonrock_colors'] = array(
      'title' => t('Import colors'),
      'page callback' => '_moonrock_color_import_colors',
      'access callback' => '_moonrock_color_import_colors_access',
      'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function moonrock_color_perm() {
  
}

/**
 * Implementation of hook_access().
 */
function moonrock_color_access($op, $node, $account) {
  global $user;

  if ($op == 'view') {
    return true;
  }

  $details = get_inquiry_details_from_current_path();

  if ($op == 'create') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'add');
  }

  if ($op == 'update' || $op == 'delete') {
    return check_node_function_of_activity($details->inquiry_id, $details->activity_id, $user->uid, 'edit');
  }
}

/**
 * Implementation of hook_form().
 */
function moonrock_color_form(&$node) {

  // Get metadata for this node type
  // (we use it for labeling title and body fields).
  // We defined this in pi_wiki_notes_node_info().
  $type = node_get_types('type', $node);
  global $user;

  $node_details = get_inquiry_details_from_current_path();
  if (is_numeric($node_details->activity_id)) {
    $current_activity = load_activity($node_details->activity_id);
  }

  if ($current_activity->name) {
    drupal_set_title(t($current_activity->name));
  }

  $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => FALSE,
      '#default_value' => $node->title,
      '#weight' => -5
  );

  $form['body_filter']['color'] = array(
      '#type' => 'textfield',
      '#title' => t('Color'),
      '#required' => TRUE,
      '#default_value' => $node->color,
      '#description' => t('Specify colour in format: #rgb'),
      '#weight' => -2
  );
  $form['body_filter']['row'] = array(
      '#type' => 'textfield',
      '#title' => t('Row'),
      '#required' => TRUE,
      '#default_value' => $node->row,
      '#description' => t('Specify the row for the position of this node'),
      '#weight' => -2
  );
  $form['body_filter']['col'] = array(
      '#type' => 'textfield',
      '#title' => t('Column'),
      '#required' => TRUE,
      '#default_value' => $node->col,
      '#description' => t('Specify the column for the position of this node'),
      '#weight' => -2
  );


  $prefix = "";
  if ($current_activity->description) {
    $prefix .= "<p>" . check_plain($current_activity->description) . "</p>";
  }

  $form['#prefix'] = $prefix;

  return $form;
}

/**
 * Implementation of hook_insert().
 */
function moonrock_color_insert($node) {
  db_query("INSERT INTO {moonrock_color} (nid, vid, color, row, col) VALUES ('%d', '%d', '%s', '%d', '%d')", $node->nid, $node->vid, $node->color, $node->row, $node->col);
}

/**
 * Implementation of hook_update().
 */
function moonrock_color_update($node) {
  if ($node->revision) {
    moonrock_color_insert($node);
  } else {
    db_query("UPDATE {moonrock_color} SET color = '%s', row = %d, col = %d WHERE vid = %d", $node->color, $node->row, $node->col, $node->vid);
  }
}

/**
 * Implementation of hook_delete().
 */
function moonrock_color_delete(&$node) {
  // Delete the related information we were saving for this node.
  db_query('DELETE FROM {moonrock_color} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_load().
 */
function moonrock_color_load($node) {
  return db_fetch_object(db_query('SELECT * FROM {moonrock_color} WHERE vid = %d', $node->vid));
}

function moonrock_color_link_alter(&$links, $node) {
  // remove attachment links from upload.module
  unset($links['upload_attachments']);
}

/**
 * Implementation of hook_view().
 */
function moonrock_color_view($node, $teaser = FALSE, $page = FALSE) {
  // Use Drupal's default node view.
  $node = node_prepare($node, $teaser);

  $node->content['moonrock_color'] = array(
      '#value' => theme('moonrock_color', $node, $teaser),
      '#weight' => 2
  );

  return $node;
}

/**
 * MISSING
 *
 * @return multitype:multitype:multitype:string
 */
function moonrock_color_theme() {
  return array(
      'moonrock_color' => array(
          'arguments' => array('node', 'teaser'),
      ),
      'moonrock_color_options_form' => array(
          'arguments' => array('form'),
      ),
  );
}

/**
 * MISSING
 *
 * @param unknown_type $node
 * @return string
 */
function theme_moonrock_color($node, $teaser) {
  $size = 10;
  $small = $size - 2;
  $style1 = "display: inline-block; width: {$size}px; height: {$size}px; border: 1px solid #aaa;";
  $style2 = "display: block; width: {$small}px; height:{$small}px; background-color: {$node->color}; border: 1px solid #ccc;";

  $output = "<div style='$style1'><div style='$style2'></div></div><span style='padding-left:5px;'>{$node->title}</span>";
  return $output;
}

function moonrock_color_nquire_data_form_prefix($measure) {
  $measure_text = check_plain($measure->title) . moonrock_sample_utils_add_info_tooltip($measure->title, $measure->body);
  $output = '<div class="form-item">'
          . "<div class='moonrock-measure'>"
          . "<div class='moonrock-measure-title'>$measure_text:</div>"
          . "<div class='moonrock-measure-fixedvalue' id='moonrock-measure-fixedvalue-sample'></div>"
          . "</div>";

  $output .= "<div id='moonrockColorPickerSelection'>";
  $output .= "<div id='moonrockColorPickerSelectionColor' class='moonrockColorPickerSelectionNoColor'> </div>";
  $output .= "<div id='moonrockColorPickerSelectionName'> </div>";
  $output .= "<div id='moonrockColorPickerSelectionNoName'>" . t('No color selected.') . "</div>";
  $output .= "</div>";
  $output .= "<div id='moonrockColorPickerButtons'>";
  $output .= "<button type='button' id='moonrockColorPickerOpen'>" . t("Open") . "</button>";
  $output .= "<button type='button' id='moonrockColorPickerClose' style='display: none;'>" . t("Close") . "</button>";
  $output .= "<button type='button' id='moonrockColorPickerClear'>" . t("Clear") . "</button>";
  $output .= "</div>";
  $output .= '<small>' . t('Use the mouse to move and zoom the colour chart.') . '</small>';
  $output .= "</div>";

  $output .= _moonrock_color_create_color_picker_image();

  _moonrock_color_load_form_resources();

  return $output;
}

function _moonrock_color_create_color_picker_image() {

  $colors = array();
  $result = db_query("SELECT DISTINCT nid FROM {node} where {node}.type='moonrock_color'");
  $maxrow = 0;
  $maxcol = 0;
  while ($obj = db_fetch_object($result)) {
    $color = node_load($obj->nid);
    $maxcol = max($maxcol, $color->col);
    $maxrow = max($maxrow, $color->row);
    $colors[] = $color;
  }

  $chipWidth = 30;
  $chipHeight = 40;
  $chipVGap = 20;
  $chipHGap = 10;
  $margin = 40;
  $selection_gap = 3;

  $holeRadius = .5 * $chipWidth;
  $halfVGap = .5 * $chipVGap;
  $chipArcRadius = $holeRadius - 1;

  $borderCenterVDistance = .5 * $chipVGap;
  $borderCenterHDistance = sqrt($chipArcRadius * $chipArcRadius - $borderCenterVDistance * $borderCenterVDistance);
  $borderArcLength = 2 * $borderCenterHDistance;
  $borderCircleCrossX = .5 * $chipWidth - $borderCenterHDistance;

  $bottomArcPath = "a $chipArcRadius,$chipArcRadius 0 0,1 $borderArcLength,0";
  $topArcPath = "a $chipArcRadius,$chipArcRadius 0 0,1 -$borderArcLength,0";

  $topChipPath = "v $chipHeight h $borderCircleCrossX $bottomArcPath  h $borderCircleCrossX v -$chipHeight z";
  $bottomChipPath = "v $chipHeight h $chipWidth v -$chipHeight h -$borderCircleCrossX $topArcPath z";
  $middleChipPath = "v $chipHeight h $borderCircleCrossX $bottomArcPath  h $borderCircleCrossX v -$chipHeight h -$borderCircleCrossX $topArcPath z";

  $topChipPathNoArc = "m $borderCircleCrossX,$chipHeight h -$borderCircleCrossX v -$chipHeight h $chipWidth v $chipHeight h -$borderCircleCrossX";
  $bottomChipPathNoArc = "m $borderCircleCrossX,0 h -$borderCircleCrossX v $chipHeight h $chipWidth v -$chipHeight h -$borderCircleCrossX";
  $middleChipPathNoArc = "m $borderCircleCrossX,0 h -$borderCircleCrossX v $chipHeight h $borderCircleCrossX m $borderArcLength,0  h $borderCircleCrossX v -$chipHeight h -$borderCircleCrossX";

  $selectionHeight = $chipHeight + 2 * $selection_gap;
  $selectionWidth = $chipWidth + 2 * $selection_gap;
  $selectionBorderArcLength = $borderArcLength + 2 * $selection_gap;

  $topChipPathSelection = "m -$selection_gap,-$selection_gap m $borderCircleCrossX,$selectionHeight h -$borderCircleCrossX v -$selectionHeight h $selectionWidth v $selectionHeight h -$borderCircleCrossX";
  $bottomChipPathSelection = "m -$selection_gap,-$selection_gap m $borderCircleCrossX,0 h -$borderCircleCrossX v $selectionHeight h $selectionWidth v -$selectionHeight h -$borderCircleCrossX";
  $middleChipPathSelection = "m -$selection_gap,-$selection_gap m $borderCircleCrossX,0 h -$borderCircleCrossX v $selectionHeight h $borderCircleCrossX m $selectionBorderArcLength,0  h $borderCircleCrossX v -$selectionHeight h -$borderCircleCrossX";

  $width = 2 * $margin + $maxcol * ($chipWidth + $chipHGap) + $chipWidth;
  $height = 2 * $margin + $maxrow * ($chipHeight + $chipVGap) + $chipHeight;

  $output = '';
  $output .= "<div id='rock-color-picker-container' style='width: {$width}px; height: {$height}px;'>";
  $output .= "<svg id='rock-color-picker-svg' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 $width $height'>";
  $output .= '<g id="rock-color-picker-svg-group" fill-rule="evenodd" style="font-size: 18px; text-anchor: middle; font-family: serif;">';

  $holesPath = '';
  $chipElements = '';
  $holePath = "a $holeRadius,$holeRadius 0 0,0 $chipWidth,0 a $holeRadius,$holeRadius 0 0,0 -$chipWidth,0 z";

  foreach ($colors as $color) {
    $path = $color->row == 0 ? $topChipPath : ($color->row < $maxrow ? $middleChipPath : $bottomChipPath);
    $border = $color->row == 0 ? $topChipPathNoArc : ($color->row < $maxrow ? $middleChipPathNoArc : $bottomChipPathNoArc);
    $selectionBorder = $color->row == 0 ? $topChipPathSelection : ($color->row < $maxrow ? $middleChipPathSelection : $bottomChipPathSelection);

    $x = $margin + $color->col * ($chipWidth + $chipHGap);
    $y = $margin + $color->row * ($chipHeight + $chipVGap);

    $chipElements .= "<g color-value='{$color->nid}' color-html='{$color->color}' title='{$color->title}' class='rock-color-picker-chip'>";
    $chipElements .= "<path d='M $x,$y $path' fill='{$color->color}'/>";
    $chipElements .= "<path class='rock-color-picker-border' d='M $x,$y $border' fill='none' />";
    $chipElements .= "<path class='rock-color-picker-selection-border' d='M $x,$y $selectionBorder' fill='none' />";
    $chipElements .= "</g>";
  }

  for ($j = 0, $y = $margin + $chipHeight + $halfVGap; $j < $maxrow; $j++, $y += $chipHeight + $chipVGap) {
    for ($i = 0, $x = $margin; $i <= $maxcol; $i++, $x += $chipWidth + $chipHGap) {
      $holesPath .= "M $x,$y $holePath ";
    }
  }

  $output .= "<path d='M 0,0 v $height h $width v -$height z $holesPath' fill='#fafafa' fill-opacity='0.85'></path>";
  $output .= "<rect x='0' y ='0' width='$width' height='$height' fill-opacity='0' stroke='black' stroke-width='1'></rect>";
  $output .= $chipElements;

  $output .= "</g>";
  $output .= "</svg>";
  $output .= "</div>"; // rock-color-picker-container

  return $output;
}

function moonrock_color_nquire_measure_choose_explanation() {
  return t("Choose from the list one relevant color identified in a sample");
}

function _moonrock_color_load_form_resources() {
  drupal_add_js(drupal_get_path('module', 'moonrock_color') . '/js/jquery.mousewheel.js');
  drupal_add_js(drupal_get_path('module', 'moonrock_color') . '/js/moonrockColorSelect.js');
  drupal_add_js(drupal_get_path('module', 'moonrock_color') . '/js/rockColorPicker.js');
  drupal_add_css(drupal_get_path('module', 'moonrock_color') . '/css/rockColorPicker.css');
}

function moonrock_color_nquire_data_form_after_build($form_element, &$form_state) {
  _moonrock_color_load_form_resources();
  return $form_element;
}

function moonrock_color_nquire_data_get_color_value($nid) {
  $node = node_load($nid);
  if ($node && $node->type == 'moonrock_color') {
    $values = _moonrock_color_html2rgb($node->color);
    return array("R" => $values[0], "G" => $values[1], "B" => $values[2], "Alpha" => 100);
  }

  return array("R" => 255, "G" => 255, "B" => 255, "Alpha" => 50);
}

function moonrock_color_nquire_data_get_text_value($nid) {
  $node = node_load($nid);
  if ($node && $node->type == 'moonrock_color') {
    return check_plain($node->title);
  }

  return $nid;
}

function moonrock_color_nquire_data_get_html_value($nid) {
  $node = node_load($nid);
  if ($node && $node->type == 'moonrock_color') {
    return "<div style='width: 20px; height: 20px; border: 1px solid black; background: {$node->color}; display: inline-block'></div><span style='padding-left: 10px;'>"
            . check_plain($node->title) . "</span>";
  }

  return $nid;
}

function _moonrock_color_html2rgb($color) {
  if ($color[0] == '#') {
    $color = substr($color, 1);
  }

  if (strlen($color) == 6)
    list($r, $g, $b) = array($color[0] . $color[1],
        $color[2] . $color[3],
        $color[4] . $color[5]);
  elseif (strlen($color) == 3)
    list($r, $g, $b) = array($color[0] . $color[0], $color[1] . $color[1], $color[2] . $color[2]);
  else
    return false;

  $r = hexdec($r);
  $g = hexdec($g);
  $b = hexdec($b);

  return array($r, $g, $b);
}

function _moonrock_color_import_colors_access() {
  return true;
}

function _moonrock_color_import_colors() {

  $current_colors = array();
  $result = db_query("SELECT DISTINCT nid FROM {node} where {node}.type='moonrock_color'");
  while ($obj = db_fetch_object($result)) {
    $color = node_load($obj->nid);
    node_delete($color);
    $current_colors[$color->color] = $color;
  }

  echo "Current colors:<br/>";
  echo _moonrock_color_displayTree($current_colors);

  $file = fopen(drupal_get_path('module', 'moonrock_color') . '/data/colors.csv', 'r');
  while (($data = fgetcsv($file)) !== FALSE) {
    $c = $data[3];
    if (isset($current_colors[$c])) {
      $node = $current_colors[$c];
      $node->title = $data[0];
      $node->row = $data[1];
      $node->col = $data[2];
      node_save($color);
      echo "<br/>Updated: " . _moonrock_color_displayTree($node);
    } else {
      $node = new stdClass();
      $node->type = 'moonrock_color';
      $node->title = $data[0];
      $node->row = $data[1];
      $node->col = $data[2];
      $node->color = $data[3];
      node_save($node);
      echo "<br/>Added: " . _moonrock_color_displayTree($node);
    }
  }

  fclose($file);
}

function _moonrock_color_displayTree($array) {
  $newline = "<br>";
  foreach ($array as $key => $value) {    //cycle through each item in the array as key => value pairs
    if (is_array($value) || is_object($value)) {        //if the VALUE is an array, then
      //call it out as such, surround with brackets, and recursively call displayTree.
      $value = "Array()" . $newline . "(<ul>" . _moonrock_color_displayTree($value) . "</ul>)" . $newline;
    }
    //if value isn't an array, it must be a string. output its' key and value.
    $output .= "[$key] => " . $value . $newline;
  }
  return $output;
}

function moonrock_color_nquire_data_suitable_for_graph_variable() {
  return FALSE;
}

