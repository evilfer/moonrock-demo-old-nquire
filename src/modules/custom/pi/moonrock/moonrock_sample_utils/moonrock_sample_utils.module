<?php

function _moonrock_sample_utils_sample_dialog_button($buttonClassSufix, $label) {
  return "<div class='moonrock-sample-dlg-menu-item moonrock-sample-dlg-menu-$buttonClassSufix'>"
          . "<div class='moonrock-sample-dlg-menu-item-buttom'></div><div class='moonrock-sample-dlg-menu-item-label'>$label</div></div>";
}

function moonrock_sample_utils_find_unique_seesamples_node() {
  global $user;
  $node_details = get_inquiry_details_from_current_path();
  $sample_view_nid = find_unique_node_type_for_uid_and_inquiry('moonrock_seesamples', $user->uid, $node_details->inquiry_id);
  if ($sample_view_nid) {
    return node_load($sample_view_nid);
  } else {
    return FALSE;
  }
}

function moonrock_sample_utils_find_unique_method_node() {
  global $user;
  $node_details = get_inquiry_details_from_current_path();
  $sample_view_nid = find_unique_node_type_for_uid_and_inquiry('moonrock_method', $user->uid, $node_details->inquiry_id);
  if ($sample_view_nid) {
    return node_load($sample_view_nid);
  } else {
    return FALSE;
  }
}

function moonrock_sample_utils_filter_visible_measures_for_question($measure_rows, $question_id) {
  return moonrock_sample_utils_filter_visible_measures($measure_rows, $question_id);
}


function moonrock_sample_utils_filter_visible_measures($measure_rows, $question_id = FALSE) {
  $use_measure = array();
  $method_node = moonrock_sample_utils_find_unique_method_node();
  if ($method_node) {
    $selected_measures = moonrock_method_selected_measures($method_node, $question_id);
  } else {
    $selected_measures = FALSE;
  }
  foreach ($measure_rows as $measure_info_nid => $measure_selection) {
    if ($measure_selection['#status'] == 'key' || $measure_selection['#status'] == 'selected') {
      if ($measure_selection['#status'] == 'key' || ($selected_measures && $selected_measures[$measure_info_nid])) {
        $use_measure[$measure_info_nid] = TRUE;
      } else {
        $measure_info = node_load($measure_info_nid);
        if ($measure_info->content_options) {
          $function = "{$measure_info->content_options}_nquire_data_suitable_for_method_planning";
          if (function_exists($function) && !$function()) {
            $use_measure[$measure_info_nid] = TRUE;
          }
        }
      }
    }
  }
  return $use_measure;
}

function moonrock_sample_utils_add_info_tooltip($title, $content) {
  $output = "<span class='qtip-link'>"
          . "<div class='qtip-header'>$title</div>"
          . "<div class='qtip-tooltip'>$content</div>"
          . "<div class='moonrock-measure-info'></div>"
          . "</span>";

  return $output;
}

function moonrock_sample_utils_prepare_sample($nid) {
  global $user;

  $sample = node_load($nid, NULL, TRUE);
  if ($sample->type != 'moonrock_sample') {
    return FALSE;
  }

  $output = array(
      "id" => $sample->nid,
      "title" => $sample->title,
      "sample" => array(
          "nid" => $sample->nid,
          "image" => 'moonrock_snapshots/' . $sample->snapshot,
      ),
      "vm" => $sample->vm,
      "metadata" => array(
          "location" => array(
              "title" => t("Location: "),
              "value" => $sample->location . ' <a href="' . $sample->map_url . '" target="_blank" class="external_link"><div></div></a>',
          ),
          "source" => array(
              "title" => t("Sample source: "),
              "value" => $sample->source,
          ),
          "info" => array(
              "title" => t("Further information:"),
              "value" => '<a href="' . $sample->info_url . '" target="_blank" class="external_link"><span>' . t('read more ') . '</span><div></div></a>',
          ),
      ),
  );
  return $output;
}

function moonrock_sample_utils_activity_link($type) {
  global $user;
  $details = get_inquiry_details_from_current_path();
  $activity_id = get_activity_ids_for_activity_type($details->inquiry_id, $type, $user->uid);
  $phase_id = get_phase_id_for_activity_id($activity_id);
  return build_activity_link($details->inquiry_id, $details->stage_id, $phase_id, $activity_id, $user->uid);
}

function moonrock_sample_utils_load_measure_format() {
  drupal_add_css(drupal_get_path('module', 'moonrock_sample_utils') . '/css/measures.css');
}

function moonrock_sample_utils_load_javascript_modules_support() {
  drupal_add_js(drupal_get_path('module', 'moonrock_sample_utils') . '/js/modules.js');
}

function moonrock_sample_utils_load_vmSample_format() {
  drupal_add_css(drupal_get_path('module', 'moonrock_sample_utils') . '/css/external_link.css');
  drupal_add_css(drupal_get_path('module', 'moonrock_sample_utils') . '/css/vmSample.css');
  drupal_add_js(drupal_get_path('module', 'moonrock_sample_utils') . '/js/vmSample.js');
}

function moonrock_sample_utils_theme() {
  return array(
      'moonrock_sample_utils_false_block' => array(
          'arguments' => array('title', 'content'),
      ),
      'moonrock_sample_utils_measure_info' => array(
          'arguments' => array('measure_info'),
      ),
      'moonrock_sample_utils_fuzzy_time_period' => array(
          'arguments' => array('time'),
      ),
  );
}

function theme_moonrock_sample_utils_false_block($title, $content) {
  drupal_add_css(drupal_get_path('module', 'moonrock_sample_utils') . '/css/falseblock.css');

  $output = '<div class="moonrock-block-column">'
          . '  <div class="moonrock-block">'
          . '    <h2 class="title">' . $title . '</h2>'
          . '    <div class="content">' . $content . '</div>'
          . '    <div class="overlay"></div>'
          . '  </div>'
          . '</div>';

  return $output;
}

/*
  function theme_moonrock_sample_utils_page_with_block($page, $blocks) {

  moonrock_sample_utils_load_falseblock_format();

  $output = '<div class="moonrock-sample-utils-pageblock-container">'
  . ' <div class="moonrock-sample-utils-pageblock-page">'
  . $page
  . ' </div>'
  . ' <div class="moonrock-sample-utils-pageblock-blocks">';
  foreach ($blocks as $block) {
  $output .= '  <div class="moonrock-sample-utils-pageblock-falseblock" id="' . $block['id'] . '">'
  . '   <h2 class="title">' . $block['title'] . '</h2>'
  . '   <div class="content">' . $block['content'] . '</div>'
  . '   <div class="overlay"></div>'
  . '  </div>';
  }
  $output .= ' </div>'
  . '</div>';

  return $output;
  }

 */

function theme_moonrock_sample_utils_measure_info($measure_info) {
  moonrock_sample_utils_load_measure_format();

  if (isset($measure_info->units_short) AND ($measure_info->units_short != '')) {
    $units = " (" . $measure_info->units_short . ")";
  } elseif (isset($measure_info->units) AND ($measure_info->units != '')) {
    $units = " (" . $measure_info->units . ")";
  } else {
    $units = "";
  };

  return '<div class="moonrock-measure-title">'
          . check_plain($measure_info->title . $units) . moonrock_sample_utils_add_info_tooltip($measure_info->title, $measure_info->body)
          . '</div>';
}

function moonrock_sample_utils_load_item_browser_resources() {
  moonrock_sample_utils_load_mouse_input();

  drupal_add_css(drupal_get_path('module', 'moonrock_sample_utils') . '/css/itemBrowser.css');
  drupal_add_js(drupal_get_path('module', 'moonrock_sample_utils') . '/js/jquery.itemBrowser.js');
  drupal_add_js(drupal_get_path('module', 'moonrock_sample_utils') . '/js/jquery.itemBrowserThrobber.js');
}

function moonrock_sample_utils_load_cookie_support() {
  drupal_add_js(drupal_get_path('module', 'moonrock_sample_utils') . '/js/jquery.cookie.js');
}

function moonrock_sample_utils_load_mouse_input() {
  jquery_ui_add();
  drupal_add_js(drupal_get_path('module', 'moonrock_sample_utils') . '/js/jquery.proxy.js');
  drupal_add_js(drupal_get_path('module', 'moonrock_sample_utils') . '/js/jquery.mousewheel.js');
  drupal_add_js(drupal_get_path('module', 'moonrock_sample_utils') . '/js/jquery.customMouseInput.js');
}

function theme_moonrock_sample_utils_fuzzy_time_period($time) {
  if ($time < 30) {
    return t('a few seconds ago');
  }

  $periods = array(
      array(
          'm' => 60,
          's' => t('a minute'),
          'p' => t('minutes'),
      ),
      array(
          'm' => 24,
          's' => t('an hour'),
          'p' => t('hours'),
      ),
      array(
          'm' => 7,
          's' => t('a day'),
          'p' => t('days'),
      ),
      array(
          'm' => 4,
          's' => t('a week'),
          'p' => t('days'),
      ),
      array(
          'm' => 12,
          's' => t('a month'),
          'p' => t('months'),
      ),
      array(
          'm' => -1,
          's' => t('a year'),
          'p' => t('years'),
      ),
  );

  $time = (int) ($time / 60);

  for ($i = 0; $i < count($periods); $i++) {
    if ($time < 2) {
      return $periods[$i]['s'] . t(' ago');
    }
    if (!isset($periods[$i]['m']) || $time < $periods[$i]['m']) {
      return $time . ' ' . $periods[$i]['p'] . t(' ago');
    }
    $time = (int) ($time / $periods[$i]['m']);
  }

  return 'unknown time!';
}
