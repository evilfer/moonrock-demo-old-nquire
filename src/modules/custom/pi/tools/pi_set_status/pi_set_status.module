<?php
// $Id: pi_set_status.module,v 1.2 2009/06/11 09:55:10 ou_mbg Exp $

/**
 * @file Module for "pi_set_status" node type
 */


/**
 * Implementation of hook_node_info().
 */
function pi_set_status_node_info() {
    return array(
	    'pi_set_status' => array(
	    'name' => t('Inquiry set activity status'), // Required.
	    'module' => 'pi_set_status',  // Required.
	    'description' => t('Set status for an activity'), // Required.
	    'has_title' => TRUE,
	    'title_label' => t('Set activity status'),
	    'has_body' => TRUE,
	    'body_label' => t('Set status'),
	    'locked' => TRUE)
    );
}


/**
 * Implementation of hook_perm().
 */
function pi_set_status_perm() {
    return array();
}

/**
 * Implementation of hook_access().
 */
function pi_set_status_access($op, $node) {
    global $user;

    if ($op == 'create') {
        return TRUE;
    }

    if ($op == 'update') {
        return TRUE;
    }
}

/**
 * Implementation of hook_form().
 */
function pi_set_status_form(&$node) {
  
  
	global $user;
  $type = node_get_types('type', $node);
  	
    $form['title'] = array(
        '#type' => 'hidden',
        '#title' => check_plain($type->title_label),
        '#required' => FALSE,
        '#default_value' => $type->title_label,
        '#weight' => -5
    );

    $activity_id = arg(1);

    $inquiry_id = get_inquiry_id_for_activity_id($activity_id);
    
    $node_details = new stdClass;
    $node_details->inquiry_id = $inquiry_id;
    $node_details->activity_id = $activity_id;

    $form_data = array();
      if (is_numeric($activity_id))
      {
        $ap_result = get_activity_participants($node_details);
        $audience = $ap_result["audience"];
        $activity_participants = $ap_result["activity_participants"];
        $activity_name = $ap_result["name"];
          
        /*get the status for each actual audience*/
        //use activity status
        $form_data = generate_status_form($activity_participants, $node_details, $audience);
      }
    
    //sort the form data list in name alphabetical order
    uasort($form_data,pi_compare_form_name);
      
    //the current value for each participant
    $default_values = array();
    
    //remove this to just leave the actual values keyed by group or user id
    unset($form_data['default_values']);
    
    $loaded_activity = load_activity($node_details->activity_id);
    drupal_set_title('Change status: '.$loaded_activity->name);
 
    $form['status_list'] = array(
        '#tree'   => TRUE,
    );
  
    $tree = &$form['status_list'];
   
    foreach($form_data as $key => $form_item) {
      $default_values[$key] = $form_item["default_value"];
      $tree[$key] = array(
        '#type' => 'select',
        '#options' => $form_item["options"],
        '#default_value' => $form_item["default_value"],
        '#title' => $form_item["activity_participant"],
      );
    }

    $form['default_list'] = array(
       '#tree'   => TRUE,
    );
    $default_tree = &$form['default_list'];
    
    foreach($default_values as $participant => $value) {
      $default_tree[$participant] = array (
        '#type' => 'hidden',
        '#value' => $value,
      );
    }
    
    //$form['default_list'] = $default_values;
    
    //$default_tree = &$form['default_list'];
    //$default_tree = $default_values;
    //foreach($default_values as $key => $data) {
    //  $default_tree[$key] = $data;
    //}

    $form['#prefix'] = $prefix;

    $form['audience'] = array(
      '#type' => 'hidden',
      '#value' => $audience,
    );
    
    $form['inquiry_id'] = array(
      '#type' => 'hidden',
      '#value' => $inquiry_id,
    );
    
    $form['activity_id'] = array(
      '#type' => 'hidden',
      '#value' => $activity_id,
    );
    
    return $form;

}

function pi_compare_form_name($x, $y){
  $xname = $x["activity_participant"];
  $yname = $y["activity_participant"];
  return strcmp($xname, $yname);
}

function generate_status_form($activity_participants, $node_details, $audience) {
  global $user;
  
  $image_path = drupal_get_path( 'module', 'pi' ) . '/images/';
  $status_image = array();
  $status_image["start"] = "creatable.png";
  $status_image["edit"] = "editable.png";
  $status_image["view"] = "viewable.png";
  $status_image["unavailable"] = "unavailable.png";

  $status_table = array();
  $loaded_activity = load_activity($node_details->activity_id);
  
  if ($audience == "individual") {
    foreach ($activity_participants as $activity_participant) {
      if ($activity_participant != 1) {
        $status_select_array =  array();
        
        $visible_status = get_visible_status_of_activity($node_details->inquiry_id, $node_details->activity_id, $activity_participant);
        $node_function = get_node_function_of_activity($node_details->inquiry_id, $node_details->activity_id, $activity_participant);
        $status_select_array[$visible_status.'-'.$node_function] = $visible_status;
        $new_status_leave = find_new_status($loaded_activity->activity_type, $node_details->activity_id, $node_details->inquiry_id, $node_function, $visible_status, "pi_activity_leave_focus");
        $new_status_enter = find_new_status($loaded_activity->activity_type, $node_details->activity_id, $node_details->inquiry_id, $node_function, $visible_status, "pi_activity_enter_focus");
        $status_select_array[$new_status_leave->visible_status.'-'.$new_status_leave->node_function] = $new_status_leave->visible_status;
        $status_select_array[$new_status_enter->visible_status .'-'.$new_status_enter->node_function] = $new_status_enter->visible_status;
        $default_value = $visible_status.'-'.$node_function;
        $form_entry = array('options' => $status_select_array, 'default_value' => $default_value, 'activity_participant' => get_user_name($activity_participant));
                
        $status_table[$activity_participant] = $form_entry;
      }
    }
  }

  else {
    foreach ($activity_participants as $activity_participant) {
      $members_of_group = get_members_of_group($activity_participant);
      $group_member = db_fetch_object($members_of_group);
      //I need this because uid 1 is admin and a member of every group
      //I get a group member from which to get the status
      if ($group_member->uid == 1) {
        $group_member = db_fetch_object($members_of_group);
      }
      $status_select_array =  array();
      $visible_status = get_visible_status_of_activity($node_details->inquiry_id, $node_details->activity_id, $group_member->uid);
      $node_function = get_node_function_of_activity($node_details->inquiry_id, $node_details->activity_id, $group_member->uid);
      $status_select_array[$visible_status.'-'.$node_function] = $visible_status;
      $new_status_leave = find_new_status($loaded_activity->activity_type, $node_details->activity_id, $node_details->inquiry_id, $node_function, $visible_status, "pi_activity_leave_focus");
      $new_status_enter = find_new_status($loaded_activity->activity_type, $node_details->activity_id, $node_details->inquiry_id, $node_function, $visible_status, "pi_activity_enter_focus");
      $status_select_array[$new_status_leave->visible_status.'-'.$new_status_leave->node_function] = $new_status_leave->visible_status;
      $status_select_array[$new_status_enter->visible_status .'-'.$new_status_enter->node_function] = $new_status_enter->visible_status;
      $default_value = $visible_status.'-'.$node_function;

      $form_entry = array('options' => $status_select_array, 'default_value' => $default_value, 'activity_participant' => get_group_name($activity_participant));
      
      $status_table[$activity_participant] = $form_entry;

    }
  }
  //$content .= theme('table', $headings, $table);
  return $status_table;
}

/**
 * Implementation of hook_insert().
 */
function pi_set_status_insert($node) {
  pi_set_status_update($node);
}

/**
 * Implementation of hook_update().
 */
function pi_set_status_update($node) {
  $status_list = $node->status_list;
  
  $default_list = $node->default_list;
  
  $changes = array();
  
  foreach($status_list as $participant => $status_item) {
    if($default_list[$participant] != $status_item) {
      $changes[$participant] = $status_item;
    }
  }
  
  if($node->audience == 'individual') {
    foreach($changes as $participant => $status_item) {
     $loaded_status = load_activity_status($node->inquiry_id, $node->activity_id, $participant);
     if($loaded_status->uid != $participant) {
        $loaded_status->uid = $participant;
        unset($loaded_status->gid);
        unset($loaded_status->pas_id);
      }
    
     $hypen_position =  strpos($status_item, "-");
     $loaded_status->visible_status = substr($status_item, 0, $hypen_position);
     $loaded_status->node_function = substr($status_item,  ++$hypen_position);
     
     save_activity_status($loaded_status);
    }
  }
  else {
    foreach($changes as $participant => $status_item) {
      $pas_id = db_result(db_query("SELECT pas_id FROM {pi_activity_status} WHERE inquiry_id = %d AND activity_id = %d AND gid = %d ORDER BY pas_id DESC", $node->inquiry_id, $node->activity_id, $participant));
      $new_status = new stdClass();
      
      if($pas_id) {
      //save with the retrieved pas_id
        $new_status->pas_id = $pas_id;
      }

      $new_status->inquiry_id = $node->inquiry_id;
      $new_status->activity_id = $node->activity_id;
      $new_status->gid = $participant;
        
      $hypen_position =  strpos($status_item, "-");
      $new_status->visible_status = substr($status_item, 0, $hypen_position);
      $new_status->node_function = substr($status_item,  ++$hypen_position);
      
      save_activity_status($new_status);
    }
  }

}

