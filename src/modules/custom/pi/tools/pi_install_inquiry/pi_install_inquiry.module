<?php

/**
 * @file
 * Module...
 */


/**
 * MISSING
 * 
 * @param unknown_type $section
 * @return string
 */
function pi_install_inquiry_help($section='') {

	$output = '';

	switch ($section) {
		case "admin/help#pi_install_inquiry":
			$output = '<p>'.  t("Install Inquiry"). '</p>';
			break;
	}

	return $output;
}

/**
 * MISSING
 * 
 * @return multitype:string 
 */
function pi_install_inquiry_perm() {
	return array('access install inquiry content');
}

/**
 * MISSING
 * 
 * @return multitype:string number multitype:string  NULL 
 */
function pi_install_inquiry_menu() {
	$items = array();

	$items['install'] = array(
	//'path' => 'piauthoring',
      'title' => t('Install Inquiry'),
  	  'page callback' => 'pi_install_inquiry_view',
  	  'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('access student import content'),
	);

	$items['install/installmodules'] = array(
	//'path' => 'piauthoring',
      'title' => t('1. Install Modules'),
  	  'page callback' => 'pi_install_inquiry_modules',
  	  'type' => MENU_NORMAL_ITEM,
	  'weight' => 1,
      'access arguments' => array('access install inquiry content'),
	);

	$items['install/copyinquiry'] = array(
	//'path' => 'piauthoring',
      'title' => t('2. Copy Inquiry'),
  	  'page callback' => 'pi_install_inquiry_copy',
  	  'type' => MENU_NORMAL_ITEM,
	  'weight' => 2,
      'access arguments' => array('access install inquiry content'),
	);

	$items['install/updateog'] = array(
	//'path' => 'piauthoring',
      'title' => t('3. Create OG Groups'),
  	  'page callback' => 'pi_install_inquiry_createog',
  	  'type' => MENU_NORMAL_ITEM,
	  'weight' => 3,
      'access arguments' => array('access install inquiry content'),
	);

	$items['install/sync'] = array(
	//'path' => 'piauthoring',
      'title' => t('4. Sync Inquiry'),
  	  'page callback' => 'pi_install_inquiry_sync',
  	  'type' => MENU_NORMAL_ITEM,
	  'weight' => 4,
      'access arguments' => array('access install inquiry content'),
	);

	$items['install/synctoserver'] = array(
	//'path' => 'piauthoring',
      'title' => t("5. Test Sync'ing Inquiry From Local Machine To Server"),
  	  'page callback' => 'pi_install_inquiry_sync_to_server',
  	  'type' => MENU_NORMAL_ITEM,
	  'weight' => 5,
      'access arguments' => array('access install inquiry content'),
	);

	return $items;
}

/**
 * MISSING
 * 
 * @return string
 */
function pi_install_inquiry_view(){
	//global variable
	global $db_url;

	$content = "<p>This allow you to install an inquiry set up on one machine to another.</p>";

	//information about the db servers
	$content .= "<p><strong>Database Info:</strong></p>";
	$content .= "<p><strong>This Machine</strong> - " . $db_url['default'] . "</p>";
	$content .= "<p><strong>Server</strong> - " . $db_url['server'] . "</p>";
	return $content;
}

//------------------------------------------------------------------------------------------------------------------
//--------------------------------------1. Install Modules----------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_install_inquiry_modules(){
	//module information that needs cheking by the user
	$content = "<p>First we need to install the right modules.  Below is a list of modules that are not ";
	$content .= "installed on the local machine but are on the server.  Check to make sure they are what ";
	$content .= "you expect and uncheck any that you <strong>know</strong> you do not need.  Generally ";
	$content .= "the modules listed below should all be installed on your local machine.</p>";
	$content .= drupal_get_form('pi_install_inquiry_modules_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_install_inquiry_modules_form($form_state){
	global $db_url;
	//what modules are installed and active on the server and not on the local machine?
	$query = "SELECT * FROM system WHERE type = 'module' AND status = 1";

	//modules on server?
	db_set_active('server');
	$server = db_query($query);
	//put the names of the modules from the server results in an array
	$server_modules = get_modules_as_array($server);

	//modules on local machine?
	db_set_active('default');
	$local = db_query($query);
	//put the names of the modules from the server results in an array
	$local_modules = get_modules_as_array($local);

	//compare
	$difference = array_diff($server_modules,$local_modules);

	$form['install'] = array(
		'#type' => 'fieldset',
		'#title' => t('Install Missing Modules'),
		'#tree' => TRUE,
	);

	$form['install']['modules'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Modules Installed on Server BUT NOT ON Local Machine'),
		'#default_value' => $difference,
		'#options' => $difference,
	);

	$form['install']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Install'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_install_inquiry_modules_form_submit($form, &$form_state){
	//array of modules to enable and install
	//$modules = array_filter($form_state['install']['modules']);
	$modules = array();
	$report = "";
	$array = $form_state['values']['install']['modules'];
	$form_modules = array_filter($array);
	foreach($array as $fm){
		$modules[] = $fm;
		$report .= $fm . "<br>";
	}
	install_modules($modules);
	node_access_needs_rebuild();
	drupal_set_message(t($report));
}

/**
 * MISSING
 * 
 * @param unknown_type $modules
 * @return multitype:string 
 */
function install_modules($modules){
	include_once './includes/install.inc';
	/*code from http://www.nicklewis.org/node/959 */
	$ret = array();
	// You must rebuild the module cache for the system table to see the modules
	module_rebuild_cache();
	// enable modules first
	//testing modules
	//$modules = array('og', 'pi');
	module_enable($modules);
	// now run their install files
	drupal_install_modules($modules);
	// other magic functions that are only called when admin/build/modules form is submitted
	menu_rebuild();
	node_types_rebuild();
	drupal_clear_css_cache();
	// just a report for the install page -- otherwise this update will show up as "FAILED"
	$ret[] = array('success' => true, 'query' => "enabled some module, and some other module");
	return $ret;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return multitype:
 */
function get_modules_as_array($object){
	$array = array();
	while($modules = db_fetch_object($object)){
		$array[$modules->name] = $modules->name;
	}
	return $array;
}

//------------------------------------------------------------------------------------------------------------------
//--------------------------------------2. Copy Inquiry-------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------

	/*
	 * In the Before Start Inquiry Install all we will be doing is taking the information in the pi_ tables that relate
	 * to the architecture e.g. pi_stage, pi_activity, pi_stage_phase_activity from the server database and then save
	 * them to the local database.  Easy!
	 * Note Users and their roles and permissions are copied over as well!
	 */


/**
 * MISSING
 * 
 * @return string
 */
function pi_install_inquiry_copy(){
	//global variable
	global $db_url;

	$content = "<p><strong>Installing an Inquiry Before the Start of the Inquiry</strong>";
	$content .= "This will fetch the inquiry data from the server and put it on this machine</p>";

	//information about the db servers
	$content .= "<p><strong>Database Info:</strong></p>";
	$content .= "<p><strong>This Machine</strong> - " . $db_url['default'] . "</p>";
	$content .= "<p><strong>Server</strong> - " . $db_url['server'] . "</p>";
	//make sure you are not tring to sync the same machine with itself!
	if($db_url['default'] != $db_url['server']){
		$content .= drupal_get_form('pi_install_inquiry_copy_form', $node);
	}
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_install_inquiry_copy_form($form_state){

	$form['go'] = array(
		'#type' => 'fieldset',
		'#title' => t('Click To Install'),
		'#tree' => TRUE,
	);

	$form['go']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Install'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_install_inquiry_copy_form_submit($form, &$form_state){
	$messages = copy_pi_tables();
	drupal_set_message(t($messages));
}

//COPY FUNCTIONS

/*
 * copy tables from server to local machine
 * this is done by specifying the query to be exectued and the exists test functions
 */

//NOTE ON copy_pi_tables()- WHEN WE PULL DOWN TABLES WE WILL END UP PULLING DOWN A LOT OF INFO NOT REVEVANT TO A USER
//NEED TO MAYBE FILTER BASED ON USER ID. MAYBE NOT SUCH A PROBLEM FOR _author TABLES BUT MIGHT BE FOR pi_activity_status

/**
 * MISSING
 * 
 * @return string
 */
function copy_pi_tables(){
	$messages = '';
	//array of tables to install
	$tables = array(0=>'pi_inquiry', 1=>'pi_inquiry_actor', 2=>'pi_inquiry_stage',
	3=> 'pi_inquiry_phase', 4=>'pi_stage', 5=>'pi_stage_actor',
	6=>'pi_phase', 7=>'pi_phase_actor', 8=>'pi_stage_phase',
	9=>'pi_activity', 10=>'pi_activity_actor', 11=>'pi_stage_phase_activity',
	12=>'pi_activity_status', 13=>'pi_grouping', 14=>'pi_grouping_group',
	15=>'pi_inquiry_grouping', 16=>'pi_group_hierarchy', 17=>'pi_group_type',
	18=>'role', 19=> 'permission', 20=>'users', 21=>'users_roles', 22=>'pi_current_stage');
	//install the inquiry as below (pi_ tables)
	$count = 0;
	while($count < count($tables)){
		$table = $tables[$count];
		$messages .= copy_table($table);
		$count = $count + 1;
	}
	return $messages;
}

/**
 * MISSING
 * 
 * @return string
 */
function update_pi_tables(){
	$messages = '';
	//array of tables to install
	$tables = array(0=>'pi_inquiry', 1=>'pi_inquiry_stage', 2=> 'pi_inquiry_phase',
	3=>'pi_stage', 4=>'pi_phase', 5=>'pi_stage_phase', 6=>'pi_activity',
	7=>'pi_stage_phase_activity', 8=>'pi_activity_status', 9=>'pi_grouping',
	10=>'pi_inquiry_grouping', 11=>'pi_group_type',
	12=>'role', 13=> 'permission', 14=>'users', 15=>'users_roles', 16=>'pi_current_stage');
	//install the inquiry as below (pi_ tables)
	$count = 0;
	while($count < count($tables)){
		$table = $tables[$count];
		$messages .= update_table($table);
		$count = $count + 1;
	}
	return $messages;
}

/**
 * MISSING
 * 
 * @param unknown_type $table
 * @return string
 */
function copy_table($table){
	$message = "Installing " . $table . "....<br>";
	//get pi_ table from the server
	db_set_active('server');
	$query = "SELECT * FROM " . $table;
	$result = db_query($query);
	while($object = db_fetch_object($result)){
		//set db to this machine
		db_set_active('default');
		//does values already exist?
		$exists = does_value_exist($table, $object);
		if($exists != false){
			//values exists so we dont add it but report it as an error to the user
			$message .= "....ignored -> value exists";
			$message .= "<br>";
		}
		else{
			//uncomment below to get more detail when the tables are installed
			//$message .= insert_into_db($table, $object);
			//$message .= "<br>";
			insert_into_db($table, $object);
		}
		//set db back to server
		db_set_active('server');
	}
	//at the end set the db back to being this machine
	db_set_active('default');

	//return message
	$message .= "....done<br>";
	return $message;
}

/**
 * MISSING
 * 
 * @param unknown_type $table
 * @return string
 */
function update_table($table){
	$message = "Updating " . $table . "....<br>";
	//get pi_ table from the server
	db_set_active('server');
	$query = "SELECT * FROM " . $table;
	$result = db_query($query);
	while($object = db_fetch_object($result)){
		//set db to this machine
		db_set_active('default');
		//does values already exist?
		$exists = does_value_exist($table, $object);
		if($exists){
			//uncomment below to get more detail when the tables are installed
			$message .= update_db($table, $object);
			$message .= "<br>";
			//insert_into_db($table, $object);
		}
		//set db back to server
		db_set_active('server');
	}
	//at the end set the db back to being this machine
	db_set_active('default');

	//return message
	$message .= "....done<br>";
	return $message;
}

/**
 * MISSING
 * 
 * @param unknown_type $table
 * @return string
 */
function update_table_server($table){
	$message = "Updating " . $table . "....<br>";
	//get pi_ table from the server
	db_set_active('default');
	$query = "SELECT * FROM " . $table;
	$result = db_query($query);
	while($object = db_fetch_object($result)){
		//set db to the server
		db_set_active('server');
		//does values already exist?
		$exists = does_value_exist($table, $object);
		if($exists){
			//uncomment below to get more detail when the tables are installed
			$message .= update_db($table, $object);
			$message .= "<br>";
			//insert_into_db($table, $object);
		}
		//set db back to local
		db_set_active('default');
	}
	//at the end set the db back to being this machine just to make sure
	db_set_active('default');

	//return message
	$message .= "....done<br>";
	return $message;
}

/**
 * Function to test if a value exists
 * 
 * @param $table
 * @param $object
 * @return unknown_type
 */
function does_value_exist($table, $object){
	if($table == 'pi_inquiry'){
		return does_it_exist($table, 'inquiry_id', $object->inquiry_id);
	}
	else if($table == 'pi_inquiry_actor'){
		return does_it_exist($table, 'pia_id', $object->pia_id);
	}
	else if($table == 'pi_inquiry_stage'){
		return does_it_exist($table, 'pis_id', $object->pis_id);
	}
	else if($table == 'pi_inquiry_phase'){
		return does_it_exist($table, 'pip_id', $object->pip_id);
	}
	else if($table == 'pi_stage'){
		return does_it_exist($table, 'stage_id', $object->stage_id);
	}
	else if($table == 'pi_stage_actor'){
		return does_it_exist($table, 'psa_id', $object->psa_id);
	}
	else if($table == 'pi_phase'){
		return does_it_exist($table, 'phase_id', $object->phase_id);
	}
	else if($table == 'pi_phase_actor'){
		return does_it_exist($table, 'ppa_id', $object->ppa_id);
	}
	else if($table == 'pi_stage_phase'){
		return does_it_exist($table, 'psp_id', $object->psp_id);
	}
	else if($table == 'pi_activity'){
		return does_it_exist($table, 'activity_id', $object->activity_id);
	}
	else if($table == 'pi_activity_actor'){
		return does_it_exist($table, 'paa_id', $object->paa_id);
	}
	else if($table == 'pi_stage_phase_activity'){
		return does_it_exist($table, 'pspa_id', $object->pspa_id);
	}
	else if($table == 'pi_activity_status'){
		return does_it_exist($table, 'pas_id', $object->pas_id);
	}
	else if($table == 'pi_grouping'){
		return does_it_exist($table, 'grouping_id', $object->grouping_id);
	}
	else if($table == 'pi_grouping_group'){
		return does_it_exist($table, 'pgg_id', $object->pgg_id);
	}
	else if($table == 'pi_inquiry_grouping'){
		return does_it_exist($table, 'pig_id', $object->pig_id);
	}
	else if($table == 'pi_group_hierarchy'){
		return does_it_exist($table, 'pgh_id', $object->pgh_id);
	}
	else if($table == 'pi_group_type'){
		return does_it_exist($table, 'pgt_id', $object->pgt_id);
	}
	else if($table == 'role'){
		return does_it_exist($table, 'rid', $object->rid);
	}
	else if($table == 'permission'){
		return does_it_exist($table, 'pid', $object->pid);
	}
	else if($table == 'users'){
		return does_it_exist($table, 'uid', $object->uid);
	}
	else if($table == 'users_roles'){
		return does_it_exist_multiple_ids($table, array(0=>'uid',1=>'rid'),
		array(0=>$object->uid,1=>$object->rid));
	}
	else if($table == 'pi_current_stage'){
		return does_it_exist($table, 'pcs_id', $object->pcs_id);
	}
}

/**
 * MISSING
 * 
 * @param $table
 * @param $id_name
 * @param $id_value
 * @return unknown_type
 */
function does_it_exist($table, $id_name, $id_value){
	$query = "SELECT * FROM " . $table . " WHERE " . $id_name . " = '" . $id_value . "'";
	return db_fetch_object(db_query($query));
}

/**
 * MISSING
 * 
 * @param $table
 * @param $id_name
 * @param $id_value
 * @return unknown_type
 */
function does_it_exist_multiple_ids($table, $id_names, $id_values){
	$query = "SELECT * FROM " . $table . " WHERE ";
	$count = 0;
	while ($count < count($id_names)){
		if($count != 0){
			$query .= " AND ";
		}
		$query .= $id_names[$count] . " = '" . $id_values[$count] . "'";
		$count = $count + 1;
	}
	return db_fetch_object(db_query($query));
}

/**
 * Functions to build a table query to insert a value
 * 
 * @param $table
 * @param $object
 * @return unknown_type
 */
function insert_into_db($table, $object){
	if($table == 'pi_inquiry'){
		return execute_pi_inquiry_query($object);
	}
	else if($table == 'pi_inquiry_actor'){
		return execute_pi_inquiry_actor_query($object);
	}
	else if($table == 'pi_inquiry_stage'){
		return execute_pi_inquiry_stage_query($object);
	}
	else if($table == 'pi_inquiry_phase'){
		return execute_pi_inquiry_phase_query($object);
	}
	else if($table == 'pi_stage'){
		return execute_pi_stage_query($object);
	}
	else if($table == 'pi_stage_actor'){
		return execute_pi_stage_actor_query($object);
	}
	else if($table == 'pi_phase'){
		return execute_pi_phase_query($object);
	}
	else if($table == 'pi_phase_actor'){
		return execute_pi_phase_actor_query($object);
	}
	else if($table == 'pi_stage_phase'){
		return execute_pi_stage_phase_query($object);
	}
	else if($table == 'pi_activity'){
		return execute_pi_activity_query($object);
	}
	else if($table == 'pi_activity_actor'){
		return execute_pi_activity_actor_query($object);
	}
	else if($table == 'pi_stage_phase_activity'){
		return execute_pi_stage_phase_activity_query($object);
	}
	else if($table == 'pi_activity_status'){
		return execute_pi_activity_status_query($object);
	}
	else if($table == 'pi_grouping'){
		return execute_pi_grouping_query($object);
	}
	else if($table == 'pi_grouping_group'){
		return execute_pi_grouping_group_query($object);
	}
	else if($table == 'pi_inquiry_grouping'){
		return execute_pi_inquiry_grouping_query($object);
	}
	else if($table == 'pi_group_hierarchy'){
		return execute_pi_group_hierarchy_query($object);
	}
	else if($table == 'pi_group_type'){
		return execute_pi_group_type_query($object);
	}
	else if($table == 'role'){
		return execute_role_query($object);
	}
	else if($table == 'permission'){
		return execute_permission_query($object);
	}
	else if($table == 'users'){
		return execute_users_query($object);
	}
	else if($table == 'users_roles'){
		return execute_users_roles_query($object);
	}
	else if($table == 'pi_current_stage'){
		return execute_pi_current_stage_query($object);
	}
}

/**
 * MISSING
 * 
 * @param unknown_type $table
 * @param unknown_type $object
 * @return string|string|string|string|string|string|string|string|string|string|string|string|string|string|string|string|string|string|string|string|string|string|string
 */
function update_db($table, $object){
	if($table == 'pi_inquiry'){
		return execute_pi_inquiry_update_query($object);
	}
	else if($table == 'pi_inquiry_actor'){
		return execute_pi_inquiry_actor_update_query($object);
	}
	else if($table == 'pi_inquiry_stage'){
		return execute_pi_inquiry_stage_update_query($object);
	}
	else if($table == 'pi_inquiry_phase'){
		return execute_pi_inquiry_phase_update_query($object);
	}
	else if($table == 'pi_stage'){
		return execute_pi_stage_update_query($object);
	}
	else if($table == 'pi_stage_actor'){
		return execute_pi_stage_actor_update_query($object);
	}
	else if($table == 'pi_phase'){
		return execute_pi_phase_update_query($object);
	}
	else if($table == 'pi_phase_actor'){
		return execute_pi_phase_actor_update_query($object);
	}
	else if($table == 'pi_stage_phase'){
		return execute_pi_stage_phase_update_query($object);
	}
	else if($table == 'pi_activity'){
		return execute_pi_activity_update_query($object);
	}
	else if($table == 'pi_activity_actor'){
		return execute_pi_activity_actor_update_query($object);
	}
	else if($table == 'pi_stage_phase_activity'){
		return execute_pi_stage_phase_activity_update_query($object);
	}
	else if($table == 'pi_activity_status'){
		return execute_pi_activity_status_update_query($object);
	}
	else if($table == 'pi_grouping'){
		return execute_pi_grouping_update_query($object);
	}
	else if($table == 'pi_grouping_group'){
		return execute_pi_grouping_group_update_query($object);
	}
	else if($table == 'pi_inquiry_grouping'){
		return execute_pi_inquiry_grouping_update_query($object);
	}
	else if($table == 'pi_group_hierarchy'){
		return execute_pi_group_hierarchy_update_query($object);
	}
	else if($table == 'pi_group_type'){
		return execute_pi_group_type_update_query($object);
	}
	else if($table == 'role'){
		return execute_role_update_query($object);
	}
	else if($table == 'permission'){
		return execute_permission_update_query($object);
	}
	else if($table == 'users'){
		return execute_users_update_query($object);
	}
	else if($table == 'users_roles'){
		return execute_users_roles_update_query($object);
	}
	else if($table == 'pi_current_stage'){
		return execute_pi_current_stage_update_query($object);
	}
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_query($object){
	$insert = "INSERT INTO pi_inquiry SET";
	$insert .= " inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", name = '" . $object->name . "'";
	$insert .= ", description = '" . $object->description . "'";
	db_query($insert);
	return "....inserted inquiry " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_update_query($object){
	$update = "UPDATE pi_inquiry SET";
	$update .= " name = '" . $object->name . "'";
	$update .= ", description = '" . $object->description . "'";
	$update .= " WHERE inquiry_id = '" . $object->inquiry_id . "'";
	db_query($update);
	return "....updated inquiry " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_actor_query($object){
	$insert = "INSERT INTO pi_inquiry_actor SET";
	$insert .= " pia_id = '" . $object->pia_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", uid = '" . $object->uid . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	db_query($insert);
	return "....inserted inquiry_actor " . $object->pia_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_actor_update_query($object){
	$update = "UPDATE pi_inquiry_actor SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", uid = '" . $object->uid . "'";
	$update .= ", gid = '" . $object->gid . "'";
	$update .= " WHERE pia_id = '" . $object->pia_id . "'";
	db_query($update);
	return "....inserted inquiry_actor " . $object->pia_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_stage_query($object){
	$insert = "INSERT INTO pi_inquiry_stage SET";
	$insert .= " pis_id = '" . $object->pis_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", stage_id = '" . $object->stage_id . "'";
	$insert .= ", position = '" . $object->position . "'";
	db_query($insert);
	return "....inserted inquiry_stage " . $object->pis_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_stage_update_query($object){
	$update = "UPDATE pi_inquiry_stage SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", stage_id = '" . $object->stage_id . "'";
	$update .= ", position = '" . $object->position . "'";
	$update .= " WHERE pis_id = '" . $object->pis_id . "'";
	db_query($update);
	return "....updated inquiry_stage " . $object->pis_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_phase_query($object){
	$insert = "INSERT INTO pi_inquiry_phase SET";
	$insert .= " pip_id = '" . $object->pip_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", phase_id = '" . $object->phase_id . "'";
	$insert .= ", position = '" . $object->position . "'";
	db_query($insert);
	return "....inserted inquiry_phase " . $object->pip_id ;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_phase_update_query($object){
	$update = "UPDATE pi_inquiry_phase SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", phase_id = '" . $object->phase_id . "'";
	$update .= ", position = '" . $object->position . "'";
	$update .= " WHERE pip_id = '" . $object->pip_id . "'";
	db_query($update);
	return "....updated inquiry_phase " . $object->pip_id ;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_stage_query($object){
	$insert = "INSERT INTO pi_stage SET";
	$insert .= " stage_id = '" . $object->stage_id . "'";
	$insert .= ", name = '" . $object->name . "'";
	$insert .= ", description = '" . $object->description . "'";
	db_query($insert);
	return "....inserted stage " . $object->stage_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_stage_update_query($object){
	$update = "UPDATE pi_stage SET";
	$update .= " name = '" . $object->name . "'";
	$update .= ", description = '" . $object->description . "'";
	$update .= " WHERE stage_id = '" . $object->stage_id . "'";
	db_query($update);
	return "....updated stage " . $object->stage_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_stage_actor_query($object){
	$insert = "INSERT INTO pi_stage_actor SET";
	$insert .= " psa_id = '" . $object->psa_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", stage_id = '" . $object->stage_id . "'";
	$insert .= ", uid = '" . $object->uid . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	db_query($insert);
	return "....inserted stage_actor " . $object->psa_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_stage_actor_update_query($object){
	$update = "UPDATE pi_stage_actor SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", stage_id = '" . $object->stage_id . "'";
	$update .= ", uid = '" . $object->uid . "'";
	$update .= ", gid = '" . $object->gid . "'";
	$update .= " WHERE psa_id = '" . $object->psa_id . "'";
	db_query($update);
	return "....updated stage_actor " . $object->psa_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_phase_query($object){
	$insert = "INSERT INTO pi_phase SET";
	$insert .= " phase_id = '" . $object->phase_id . "'";
	$insert .= ", name = '" . $object->name . "'";
	$insert .= ", description = '" . $object->description . "'";
	db_query($insert);
	return "....inserted phase " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_phase_update_query($object){
	$update = "UPDATE pi_phase SET";
	$update .= " name = '" . $object->name . "'";
	$update .= ", description = '" . $object->description . "'";
	$update .= " WHERE phase_id = '" . $object->phase_id . "'";
	db_query($update);
	return "....updated phase " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_phase_actor_query($object){
	$insert = "INSERT INTO pi_phase_actor SET";
	$insert .= " ppa_id = '" . $object->ppa_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", phase_id = '" . $object->phase_id . "'";
	$insert .= ", uid = '" . $object->uid . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	db_query($insert);
	return "....inserted phase_actor " . $object->ppa_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_phase_actor_update_query($object){
	$update = "UPDATE pi_phase_actor SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", phase_id = '" . $object->phase_id . "'";
	$update .= ", uid = '" . $object->uid . "'";
	$update .= ", gid = '" . $object->gid . "'";
	$update .= " WHERE ppa_id = '" . $object->ppa_id . "'";
	db_query($update);
	return "....updated phase_actor " . $object->ppa_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_stage_phase_query($object){
	$insert = "INSERT INTO pi_stage_phase SET";
	$insert .= " psp_id = '" . $object->psp_id . "'";
	$insert .= ", stage_id = '" . $object->stage_id . "'";
	$insert .= ", phase_id = '" . $object->phase_id . "'";
	db_query($insert);
	return "....inserted stage_phase " . $object->psp_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_stage_phase_update_query($object){
	$update = "UPDATE pi_stage_phase SET";
	$update .= " stage_id = '" . $object->stage_id . "'";
	$update .= ", phase_id = '" . $object->phase_id . "'";
	$update .= " WHERE psp_id = '" . $object->psp_id . "'";
	db_query($update);
	return "....updated stage_phase " . $object->psp_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_activity_query($object){
	$insert = "INSERT INTO pi_activity SET";
	$insert .= " activity_id = '" . $object->activity_id . "'";
	$insert .= ", name = '" . $object->name . "'";
	$insert .= ", description = '" . $object->description . "'";
	$insert .= ", activity_type = '" . $object->activity_type . "'";
	$insert .= ", node_type = '" . $object->node_type . "'";
	$insert .= ", parameters = '" . $object->parameters . "'";
	$insert .= ", destination = '" . $object->destination . "'";
	$insert .= ", audience = '" . $object->audience . "'";
	db_query($insert);
	return "....inserted activity " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_activity_update_query($object){
	$update = "UPDATE pi_activity SET";
	$update .= " name = '" . $object->name . "'";
	$update .= ", description = '" . $object->description . "'";
	$update .= ", activity_type = '" . $object->activity_type . "'";
	$update .= ", node_type = '" . $object->node_type . "'";
	$update .= ", parameters = '" . $object->parameters . "'";
	$update .= ", destination = '" . $object->destination . "'";
	$update .= ", audience = '" . $object->audience . "'";
	$update .= " WHERE activity_id = '" . $object->activity_id . "'";
	db_query($update);
	return "....updated activity " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_activity_actor_query($object){
	$insert = "INSERT INTO pi_activity_actor SET";
	$insert .= " paa_id = '" . $object->paa_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", activity_id = '" . $object->activity_id . "'";
	$insert .= ", uid = '" . $object->uid . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	db_query($insert);
	return "....inserted activity_actor " . $object->paa_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_activity_actor_update_query($object){
	$update = "UPDATE pi_activity_actor SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", activity_id = '" . $object->activity_id . "'";
	$update .= ", uid = '" . $object->uid . "'";
	$update .= ", gid = '" . $object->gid . "'";
	$update .= " WHERE paa_id = '" . $object->paa_id . "'";
	db_query($update);
	return "....updated activity_actor " . $object->paa_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_stage_phase_activity_query($object){
	$insert = "INSERT INTO pi_stage_phase_activity SET";
	$insert .= " pspa_id = '" . $object->pspa_id . "'";
	$insert .= ", psp_id = '" . $object->psp_id . "'";
	$insert .= ", activity_id = '" . $object->activity_id . "'";
	$insert .= ", position = '" . $object->position . "'";
	db_query($insert);
	return "....inserted stage_phase_activity " . $object->pspa_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_stage_phase_activity_update_query($object){
	$update = "UPDATE pi_stage_phase_activity SET";
	$update .= " psp_id = '" . $object->psp_id . "'";
	$update .= ", activity_id = '" . $object->activity_id . "'";
	$update .= ", position = '" . $object->position . "'";
	$update .= " WHERE pspa_id = '" . $object->pspa_id . "'";
	db_query($update);
	return "....updated stage_phase_activity " . $object->pspa_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_activity_status_query($object){
	$insert = "INSERT INTO pi_activity_status SET";
	$insert .= " pas_id = '" . $object->pas_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", activity_id = '" . $object->activity_id . "'";
	$insert .= ", uid = '" . $object->uid . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	$insert .= ", node_function = '" . $object->node_function . "'";
	$insert .= ", visible_status = '" . $object->visible_status . "'";
	db_query($insert);
	return "....inserted activity_status " . $object->pas_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_activity_status_update_query($object){
	//NB Does not update the gid as it will break the system (gid is specific to where the inquir is installed)
	$update = "UPDATE pi_activity_status SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", activity_id = '" . $object->activity_id . "'";
	$update .= ", node_function = '" . $object->node_function . "'";
	$update .= ", visible_status = '" . $object->visible_status . "'";
	$update .= " WHERE pas_id = '" . $object->pas_id . "'";
	db_query($update);
	return "....updated activity_status " . $object->pas_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_grouping_query($object){
	$insert = "INSERT INTO pi_grouping SET";
	$insert .= " grouping_id = '" . $object->grouping_id . "'";
	$insert .= ", name = '" . $object->name . "'";
	$insert .= ", description = '" . $object->description . "'";
	db_query($insert);
	return "....inserted grouping " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_grouping_update_query($object){
	$update = "UPDATE pi_grouping SET";
	$update .= " name = '" . $object->name . "'";
	$update .= ", description = '" . $object->description . "'";
	$update .= " WHERE grouping_id = '" . $object->grouping_id . "'";
	db_query($update);
	return "....updated grouping " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_grouping_group_query($object){
	$insert = "INSERT INTO pi_grouping_group SET";
	$insert .= " pgg_id = '" . $object->pgg_id . "'";
	$insert .= ", grouping_id = '" . $object->grouping_id . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	db_query($insert);
	return "....inserted grouping_group " . $object->pgg_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_grouping_group_update_query($object){
	$update = "UPDATE pi_grouping_group SET";
	$update .= " grouping_id = '" . $object->grouping_id . "'";
	$update .= ", gid = '" . $object->gid . "'";
	$update .= " WHERE pgg_id = '" . $object->pgg_id . "'";
	db_query($update);
	return "....updated grouping_group " . $object->pgg_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_grouping_query($object){
	$insert = "INSERT INTO pi_inquiry_grouping SET";
	$insert .= " pig_id = '" . $object->pig_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", stage_id = '" . $object->stage_id . "'";
	$insert .= ", phase_id = '" . $object->phase_id . "'";
	$insert .= ", activity_id = '" . $object->activity_id . "'";
	$insert .= ", grouping_id = '" . $object->grouping_id . "'";
	db_query($insert);
	return "....inserted inquiry_grouping " . $object->pig_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_inquiry_grouping_update_query($object){
	$update = "UPDATE pi_inquiry_grouping SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", stage_id = '" . $object->stage_id . "'";
	$update .= ", phase_id = '" . $object->phase_id . "'";
	$update .= ", activity_id = '" . $object->activity_id . "'";
	$update .= ", grouping_id = '" . $object->grouping_id . "'";
	$update .= " WHERE pig_id = '" . $object->pig_id . "'";
	db_query($update);
	return "....updated inquiry_grouping " . $object->pig_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_group_hierarchy_query($object){
	$insert = "INSERT INTO pi_group_hierarchy SET";
	$insert .= " pgh_id = '" . $object->pgm_id . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	$insert .= ", parent_gid = '" . $object->parent_gid . "'";
	db_query($insert);
	return "....inserted group_hierarchy " . $object->pgm_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_group_hierarchy_update_query($object){
	$update = "UPDATE pi_group_hierarchy SET";
	$update .= " gid = '" . $object->gid . "'";
	$update .= ", parent_gid = '" . $object->parent_gid . "'";
	$update .= " WHERE pgh_id = '" . $object->pgm_id . "'";
	db_query($update);
	return "....updated group_hierarchy " . $object->pgm_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_group_type_query($object){
	$insert = "INSERT INTO pi_group_type SET";
	$insert .= " pgt_id = '" . $object->pgt_id . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	$insert .= ", type = '" . $object->type . "'";
	db_query($insert);
	return "....inserted group_type " . $object->pgt_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_group_type_update_query($object){
	//NB Does not update the gid as it will break the system (gid is specific to where the inquiry is installed)
	$update = "UPDATE pi_group_type SET";
	$update .= " type = '" . $object->type . "'";
	$update .= " WHERE pgt_id = '" . $object->pgt_id . "'";
	db_query($update);
	return "....updated group_type " . $object->pgt_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_role_query($object){
	$insert = "INSERT INTO role SET";
	$insert .= " rid = '" . $object->rid . "'";
	$insert .= ", name = '" . $object->name . "'";
	db_query($insert);
	return "....inserted role " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_role_update_query($object){
	$update = "UPDATE role SET";
	$update .= " name = '" . $object->name . "'";
	$update .= " WHERE rid = '" . $object->rid . "'";
	db_query($update);
	return "....updated role " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_permission_query($object){
	$insert = "INSERT INTO permission SET";
	$insert .= " pid = '" . $object->pid . "'";
	$insert .= ", rid = '" . $object->rid . "'";
	$insert .= ", perm = '" . $object->perm . "'";
	$insert .= ", tid = '" . $object->tid . "'";
	db_query($insert);
	return "....inserted permission " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_permission_update_query($object){
	$update = "UPDATE permission SET";
	$update .= " rid = '" . $object->rid . "'";
	$update .= ", perm = '" . $object->perm . "'";
	$update .= ", tid = '" . $object->tid . "'";
	$update .= " WHERE pid = '" . $object->pid . "'";
	db_query($update);
	return "....updated permission " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_users_query($object){
	$insert = "INSERT INTO users SET";
	$insert .= " uid = '" . $object->uid . "'";
	$insert .= ", name = '" . $object->name . "'";
	$insert .= ", pass = '" . $object->pass . "'";
	$insert .= ", mail = '" . $object->mail . "'";
	$insert .= ", mode = '" . $object->mode . "'";
	$insert .= ", sort = '" . $object->sort . "'";
	$insert .= ", threshold = '" . $object->threshold . "'";
	$insert .= ", theme = '" . $object->theme . "'";
	$insert .= ", signature = '" . $object->signature . "'";
	$insert .= ", created = '" . $object->created . "'";
	$insert .= ", access = '" . $object->access . "'";
	$insert .= ", login = '" . $object->login . "'";
	$insert .= ", status = '" . $object->status . "'";
	$insert .= ", timezone = '" . $object->timezone . "'";
	$insert .= ", language = '" . $object->language . "'";
	$insert .= ", picture = '" . $object->picture . "'";
	$insert .= ", init = '" . $object->init . "'";
	$insert .= ", data = '" . $object->data . "'";
	db_query($insert);
	return "....inserted user " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_users_update_query($object){
	$update = "UPDATE users SET";
	$update .= " name = '" . $object->name . "'";
	$update .= ", pass = '" . $object->pass . "'";
	$update .= ", mail = '" . $object->mail . "'";
	$update .= ", mode = '" . $object->mode . "'";
	$update .= ", sort = '" . $object->sort . "'";
	$update .= ", threshold = '" . $object->threshold . "'";
	$update .= ", theme = '" . $object->theme . "'";
	$update .= ", signature = '" . $object->signature . "'";
	$update .= ", created = '" . $object->created . "'";
	$update .= ", access = '" . $object->access . "'";
	$update .= ", login = '" . $object->login . "'";
	$update .= ", status = '" . $object->status . "'";
	$update .= ", timezone = '" . $object->timezone . "'";
	$update .= ", language = '" . $object->language . "'";
	$update .= ", picture = '" . $object->picture . "'";
	$update .= ", init = '" . $object->init . "'";
	$update .= ", data = '" . $object->data . "'";
	$update .= " WHERE uid = '" . $object->uid . "'";
	db_query($update);
	return "....updated user " . $object->name . ",";
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_users_roles_query($object){
	$insert = "INSERT INTO users_roles SET";
	$insert .= " uid = '" . $object->uid . "'";
	$insert .= ", rid = '" . $object->rid . "'";
	db_query($insert);
	return "....inserted user role uid = " . $object->uid ." rid = " . $object->rid;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_users_roles_update_query($object){
	$update = "UPDATE users_roles SET";
	$update .= " rid = '" . $object->rid . "'";
	$update .= " WHERE uid = '" . $object->uid . "'";
	db_query($update);
	return "....updated user role uid = " . $object->uid ." rid = " . $object->rid;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_current_stage_query($object){
	$insert = "INSERT INTO pi_current_stage SET";
	$insert .= " pcs_id = '" . $object->pcs_id . "'";
	$insert .= ", inquiry_id = '" . $object->inquiry_id . "'";
	$insert .= ", uid = '" . $object->uid . "'";
	$insert .= ", gid = '" . $object->gid . "'";
	$insert .= ", stage_id = '" . $object->stage_id . "'";
	db_query($insert);
	return "....inserted current stage = " . $object->stage_id;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @return string
 */
function execute_pi_current_stage_update_query($object){
	//NB does not update the uid or gid as this will break the system (gid is specific to where the inquiry is installed)
	$update = "UPDATE pi_current_stage SET";
	$update .= " inquiry_id = '" . $object->inquiry_id . "'";
	$update .= ", stage_id = '" . $object->stage_id . "'";
	$update .= " WHERE pcs_id = '" . $object->pcs_id . "'";
	db_query($update);
	return "....updated current stage = " . $object->stage_id;
}

//------------------------------------------------------------------------------------------------------------------
//--------------------------------------3. Update OG Groups---------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_install_inquiry_createog(){
	$content = "<p>Now you will need to create our Organic Groups.  Below shows you the OG groups that are present on";
	$content .= " the server.  Use these as a guide.  You do not need to use the same names but it will help as After";
	$content .= "you have created the groups you will need to specify which of these new groups corresponds to the";
	$content .= "group present on the server.</p>";
	$content .= "<p>NB: This is needed as it is not possible as yet to properly copy over OG groups from the server to the";
	$content .= " local machine with out it breaking the drupal installation.  This will be looked at later and hopefully";
	$content .= " will be made part of step 2.</p>";
	//show og groups on server
	$content .= "<p><strong>OG Groups on Server</strong></p>";
	$content .= get_og_on_server();
	//local machine groups with a form to select the groups which are the same on the local and server
	//to alter the pi_x_author tables i.e. updating the gid fields
	$content .= "<p><strong>OG Groups You Have Created On This Machine</strong></p>";
	$content .= get_og_on_local();
	$content .= "<p><strong>use the form below to select which group on the server your group corresponds with</strong></p>";
	$content .= drupal_get_form('update_author_tables_with_new_og_group_info_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @return string
 */
function get_og_on_server(){
	db_set_active('server');
	$content .= get_og_info();
	db_set_active('default');
	return $content;
}

/**
 * MISSING
 * 
 * @return string
 */
function get_og_on_local(){
	db_set_active('default');
	$content .= get_og_info();
	return $content;
}

/**
 * MISSING
 * 
 * @return string
 */
function get_og_info(){
	//query
	$query = "SELECT * FROM og";
	$result = db_query($query);
	//layout results in a table
	$content = "<table>";
	$content .= "<tr bgcolor='#eeeeee'><td><strong>Organic Groups</strong></td><td></td></tr>";
	$count = 1;
	while($og = db_fetch_object($result)){
		$content .= "<tr>";
		$content .= "<td>" . $og->og_description . "</td>";
		//get node_type and print that as extra info
		$temp_node = node_load($og->nid);
		$content .= "<td>" . $temp_node->type . "</td>";
		$content .= "</tr>";
	}

	$content .= "</table>";
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function update_author_tables_with_new_og_group_info_form($form_state){
	$form['update'] = array(
		'#type' => 'fieldset',
		'#title' => t('Select the Corresponding LOCAL OG Group For Each of These SERVER OG Groups'),
		'#tree' => TRUE,
	);

	$query = "SELECT * FROM og";
	//create an array of the local og groups as options for the drop down boxes
	$local_results = db_query($query);
	$local_og = array();
	while($object = db_fetch_object($local_results)){
		$local_og[$object->nid] = $object->nid . " : " . $object->og_description;
	}
	//for each of the server OG groups add a drop down box with local OG groups to select
	db_set_active('server');
	$server_results = db_query($query);
	while($server_og = db_fetch_object($server_results)){
		$form['update'][$server_og->nid]['with'] = array(
			'#type' => 'select',
			'#title' => t("Server OG Group - " . $server_og->nid . " : " . $server_og->og_description),
			'#options' => $local_og,
		);
	}
	db_set_active('default');

	$form['update']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Update'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function update_author_tables_with_new_og_group_info_form_submit($form, &$form_state){
	$query = "SELECT * FROM og";
	db_set_active('server');
	$result = db_query($query);
	while($object = db_fetch_object($result)){
		db_set_active('default');
		$value = $form_state['values']['update'][$object->nid]['with'];
		update_pi_tables_with_gid_values($object->nid,$value);
		db_set_active('server');
	}
	db_set_active('default');
	$text = "Updated OG Groups on Local Machine...";
	drupal_set_message(t($text));
}

/**
 * MISSING
 * 
 * @param unknown_type $old_nid
 * @param unknown_type $new_nid
 * @return string
 */
function update_pi_tables_with_gid_values($old_nid, $new_nid){
	$message = "Updating pi_ tables to reflect the new OG nodes....<br>";
	$to_update = array(0=>'pi_inquiry_actor', 1=>'pi_stage_actor', 2=>'pi_phase_actor',
	3=>'pi_activity_actor', 4=>'pi_group_type', 5=>'pi_activity_status',
	6=>'pi_grouping_group', 7=>'pi_group_hierarchy', 8=>'pi_current_stage');
	$count = 0;
	while($count < count($to_update)){
		$table = $to_update[$count];
		$messages .= update_pi_table_nid($table,$old_nid,$new_nid);
		$count = $count + 1;
	}

	//update the parent_gid of pi_group_hierarchy
	$message .= update_pi_group_hierarchy_parent_gid($old_nid, $new_nid);

	//done
	return $message;
}

/**
 * MISSING
 * 
 * @param unknown_type $table
 * @param unknown_type $old_nid
 * @param unknown_type $new_nid
 * @return string
 */
function update_pi_table_nid($table, $old_nid, $new_nid){
	$update = "UPDATE " . $table . " SET";
	$update .= " gid = '" . $new_nid . "'";
	$update .= " WHERE gid = '" . $old_nid . "'";
	db_query($update);
	$message = "........updated " . $table . ", replacing gid (" . $old_nid . ") with new_nid (" . $new_nid . ")";
	return $message;
}

/**
 * MISSING
 * 
 * @param unknown_type $old_nid
 * @param unknown_type $new_nid
 * @return string
 */
function update_pi_group_hierarchy_parent_gid($old_nid, $new_nid){
	$update = "UPDATE pi_group_hierarchy SET";
	$update .= " parent_gid = '" . $new_nid . "'";
	$update .= " WHERE parent_gid = '" . $old_nid . "'";
	db_query($update);
	$message = "........updated pi_group_hierarchy parent_gid, replacing gid (";
	$message .= $old_nid . ") with new_nid (" . $new_nid . ")";
	return $message;
}

//------------------------------------------------------------------------------------------------------------------
//--------------------------------------4. Sync Install-------------------------------------------------------------
//------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_install_inquiry_sync(){
	//the install is a sync from the server onto the local
	$content = "<p>Sync:  This part allows you to sync the local machine with the server for a particular user.";
	$content .= " Select the user this machine belongs to and press go.</p>";
	$content .= drupal_get_form('pi_install_inquiry_sync_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_install_inquiry_sync_form($form_state){

	$form['go'] = array(
		'#type' => 'fieldset',
		'#title' => t('Click To Sync'),
		'#tree' => TRUE,
	);

	$query = "SELECT * FROM users";
	$results = db_query($query);
	$options = array();
	while ($object = db_fetch_object($results)) {
		$options[$object->uid] = $object->uid . " : " . $object->name;
	}

	$form['go']['uid'] = array(
		'#type' => 'select',
		'#title' => t('User To Sync For'),
		'#options' => $options,
	);

	$form['go']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Sync'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_install_inquiry_sync_form_submit($form, &$form_state){
	$messages = sync_from_server_to_local($form['values']['go']['uid']);
	drupal_set_message(t($messages));
}

//------------------------------------------------------------------------------------------------------------------
//--------------------------------------5. Testing Sync'ing Install From Local Macing to Server---------------------
//------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @return unknown
 */
function pi_install_inquiry_sync_to_server(){
	//the install is a sync from the server onto the local
	$content = "<p>Test Sync'ing From Local Machine To Server:  This  allows you to test the sync'ing from the local";
	$content .= " machine to the server for a particular user. Select the user this machine belongs to and press go.</p>";
	$content .= drupal_get_form('pi_install_inquiry_sync_to_server_form', $node);
	return $content;
}

/**
 * MISSING
 * 
 * @param unknown_type $form_state
 * @return multitype:string NULL 
 */
function pi_install_inquiry_sync_to_server_form($form_state){

	$form['go'] = array(
		'#type' => 'fieldset',
		'#title' => t('Click To Sync'),
		'#tree' => TRUE,
	);

	$query = "SELECT * FROM users";
	$results = db_query($query);
	$options = array();
	while ($object = db_fetch_object($results)) {
		$options[$object->uid] = $object->uid . " : " . $object->name;
	}

	$form['go']['uid'] = array(
		'#type' => 'select',
		'#title' => t('User To Sync For'),
		'#options' => $options,
	);

	$form['go']['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Test Sync'),
	);

	return $form;
}

/**
 * MISSING
 * 
 * @param unknown_type $form
 * @param unknown_type $form_state
 * @return unknown_type
 */
function pi_install_inquiry_sync_to_server_form_submit($form, &$form_state){
	$messages = sync_from_local_to_server($form['values']['go']['uid']);
	drupal_set_message(t($messages));
}

//------------------------------------------------------------------------------------------------------------------
//--------------------------------------END 5. Testing Sync'ing Install From Local Macing to Server-----------------
//------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------
//--------------------------------------SYNC CODE: FUNCTIONS THAT DO THE SYNC'ING-----------------------------------
//------------------------------------------------------------------------------------------------------------------

/**
 * MISSING
 * 
 * @param unknown_type $uid
 * @return string
 */
function sync_from_server_to_local($uid){
	$text = "Syncing from server to local machine...<br>";
	//make sure the basic pi_tables and user info is up to date and anything new is added to pi_ and users
	//update the pi_activity and pi_activity_status tables to make sure that
	//nothing has been changes e.g. audience of activity or the visible_status
	copy_pi_tables();
	update_pi_tables();
	$text .= "<br>....Updated pi_ and user tables on Local Machine...<br>";

	/**sync the activities (i.e. nodes) on the server with the local machine
	 *
	 * for each pi_activity_node -> load node
	 * 	1. check to see if the node loaded from the server is 'older' than the equivelant on the local machine
	 *
	 *  2. if it is newer then sync the node
	 *
	 * 	if the uid of node == $uid -> save
	 *  else find the pi_activity record and what is the audience of the activity
	 *    if individual -> dont save
	 *    if class or multiclass -> save
	 *    if group
	 *    does $uid belong to the same group as node->uid?
	 *      if yes -> save
	 *      else -> dont save
	 *
	 ***NB not sure but I dont think this works with groupings!! This might not be a problem though?***
	 **/
	$query = "SELECT * FROM pi_activity_node";
	db_set_active('server');
	$query_result = db_query($query);
	while($object = db_fetch_object($query_result)){
		//sync node
		$node = node_load($object->nid);
		//is this user the same as the owner of the node?
		if($node->uid == $uid){
			//save node
			db_set_active('default');
			$text .= save_node_from_server_if_newer_than_local_copy($node, $object);
		}
		else{
			//if not then look at the audience of the activity
			$activity_query = "SELECT * FROM pi_activity WHERE activity_id = '" . $object->activity_id . "'";
			$activity_object = db_fetch_object(db_query($activity_query));
			$audience = $activity_object->audience;
			if($audience == 'individual'){
				//if it is an individual then save the node
				db_set_active('default');
				$text .= save_node_from_server_if_newer_than_local_copy($node, $object);
			}
			else if($audience == 'class' || $audience == 'multiclass'){
				//if it is a class or multiclass then save the node
				db_set_active('default');
				$text .= save_node_from_server_if_newer_than_local_copy($node, $object);
			}
			else if($audience == 'group'){
				//is the user a member of the group for that activity?
				$group = get_group_of_activity_from_server($activity_id);
				foreach($group as $g){
					db_set_active('server');
					//not going to work!
					if(check_member_of_group ($g, $uid)){
						//the user is a member of the group for the activity
						db_set_active('default');
						$text .= save_node_from_server_if_newer_than_local_copy($node, $object);
					}
				}
			}
			else{
				$text .= "...Cant update " . $object->activity_id . " unknown audience? -> " . $audience;
			}
		}
		//set active db connection back to server
		db_set_active('server');
	}
	db_set_active('default');
	$text .= "....Done! updated pi_activity_node on Local Machine...<br>";

	//update the pi_current_stage table
	//!!!NB - same error as pi_activity could occur here as if another user logs in there will be no
	//record of what state the are on.
	$text .= update_pi_current_stage_from_server($uid);
	//flush cache
	drupal_flush_all_caches();
	//done
	return $text;
}

/**
 * MISSING
 * 
 * @param unknown_type $uid
 * @return string
 */
function sync_from_local_to_server($uid){
	$text = "Syncing from local machine to server...<br>";
	//update the pi_activity tables on the server from the local machine that are relevant to this user
	//inc. pi_current_stage, pi_activity_status and pi_activity_node.
	//array of tables to update
	$text .= "Updating pi_activity_status and pi_current_stage tables...<br>";
	$tables = array(0=>'pi_activity_status',1=>'pi_current_stage');
	$count = 0;
	while($count < count($tables)){
		$table = $tables[$count];
		$text .= update_table_server($table);
		$count = $count + 1;
	}
	//for each node in the pi_activity_node table save it to the server from the local machine
	//if the node is in the pi_install_inquiry table then update it on the server else add it as new
	$query = "SELECT * FROM pi_activity_node";
	db_set_active('default');
	$query_result = db_query($query);
	while($object = db_fetch_object($query_result)){
		$local_nid = $object->nid;
		$node = node_load($object->nid);
		if($node->type != 'quiz'){
			$server_nid = get_server_nid_from_local_nid($local_nid);
			if($server_nid == 0){
				//node is new
				db_set_active('server');
				unset($node -> nid);
				unset($node -> vid);
				//save the node object
				node_save($node);
				$text .= "...Node Saved... (" . $local_nid . ")<br>";
			}
			else{
				//node is to be updated
				db_set_active('server');
				$node->nid = $server_nid;
				$node->vid = get_next_nid_on_server(); //unset($node -> vid);
				//save the node object
				node_save($node);
				$text .= "...Node Updated... (L=" . $local_nid . ",S=" . $server_nid . ")<br>";
			}
		}
		db_set_active('default');
	}
	//maybe we need node dependenceies??

	return $text;
}


/**
 * Helper functions for the sync methods
 * 
 * @param unknown_type $node
 * @param unknown_type $object
 * @return string
 */
function save_node_from_server_if_newer_than_local_copy($node, $object){
	$text = "";
	//has the node on ther server new to this local machine?
	$local_nid_of_node = get_local_nid_from_server_nid($node->nid);
	if($local_nid_of_node == 0){
		//new node - save it
		$old_nid = $node->nid;
		unset($node -> nid);
		unset($node -> vid);
		//save the node object
		node_save($node);
		$text .= "...Node Saved..." . $node->title . "<br>";
		//get new nid
		$new_nid = db_result(db_query("SELECT max(nid) from node"));
		//update local machine pi_activity_node table
		$text .= update_pi_activity_node_table($object, $old_nid, $new_nid);
	}
	else{
		//not new to local machine - so update it
		$node->nid = $local_nid_of_node;
		$node->vid = get_next_nid_on_local(); // unset($node -> vid); //
		//save the node object
		node_save($node);
		$text .= "...Node Updated..." . $node->title . "<br>";
	}

	//are there any other node types that are used by the saved node type e.g. Quiz uses long_answer, multichoise etc.
	//if there is then we need to save or update these as well - lets hope this works!
	$type = $node->type;
	$nodes_with_dependencies = array('quiz'=>array(1=>'long_answer', 2=>'multichoice',
	3=>'short_answer', 4=>'true_false')
	);
	$count = count($nodes_with_dependencies[$type]);
	while($count != 0){
		//get the nodes from the server
		$query = "SELECT * FROM node WHERE type = '" . $nodes_with_dependencies[$type][$count] . "'";
		db_set_active('server');
		$result = db_query($query);
		while($obj = db_fetch_object($result)){
			//does it exist on this local machine
			db_set_active('server');
			$server_node = node_load($obj->nid);
			db_set_active('default');
			$exists = get_local_nid_from_server_nid($server_node->nid);
			if($exists != 0){
				//if yes then update the node
				$server_node->nid = $exists;
				$server_node->vid = get_next_nid_on_local(); // unset($server_node -> vid); // 
				node_save($server_node);
				$text .= "...Node Dependency Updated..." . $server_node->title . "<br>";
			}
			else{
				//else add it as a new node and add the new and old nids to pi_install_inquiry
				db_set_active('default');
				$old_nid = $server_node->nid;
				unset($server_node -> nid);
				unset($server_node -> vid);
				//save the node object
				node_save($server_node);
				$text .= "...Node Dependency Saved..." . $server_node->title . "<br>";
				//get new nid
				$new_nid = db_result(db_query("SELECT max(nid) from node"));
				//update local machine pi_activity_node table
				$record = "INSERT INTO pi_install_inquiry SET";
				$record .= " server_nid = '" . $old_nid . "'";
				$record .= ", local_nid = '" . $new_nid . "'";
				db_query($record);
			}
			db_set_active('server');
		}
		$count = $count - 1;
	}
	//special requirements
	if($type == 'quiz'){
		$text .= include_special_quiz_requirements();
	}

	db_set_active('default');
	return $text;
}
/**
 * MISSING
 * 
 * @param unknown_type $server_nid
 * @return unknown_type
 */
function get_local_nid_from_server_nid($server_nid){
	$query = "SELECT * FROM pi_install_inquiry WHERE server_nid = '" . $server_nid . "'";
	$object = db_fetch_object(db_query($query));
	if($object){
		return $object->local_nid;
	}
	else{
		return 0;
	}
}

/**
 * MISSING
 * 
 * @return number|number
 */
function get_next_nid_on_local(){
	db_set_active('default');
	$query = "SELECT MAX(node.vid) FROM node";
	$result = db_result(db_query($query));
	$query2 = "SELECT MAX(node.nid) FROM node";
	$result2 = db_result(db_query($query2));
	if($result >= $result2){
		return ($result+1);
	}
	else{
		return ($result2+1);
	}
}

/**
 * MISSING
 * 
 * @param $local_nid
 * @return unknown_type
 */
function get_server_nid_from_local_nid($local_nid){
	$query = "SELECT * FROM pi_install_inquiry WHERE local_nid = '" . $local_nid . "'";
	$object = db_fetch_object(db_query($query));
	if($object){
		return $object->server_nid;
	}
	else{
		return 0;
	}
}

/**
 * MISSING
 * 
 * @return number
 */
function get_next_nid_on_server(){
	db_set_active('server');
	$query = "SELECT MAX(node.vid) FROM node";
	$result = db_result(db_query($query));
	$query2 = "SELECT MAX(node.nid) FROM node";
	$result2 = db_result(db_query($query2));
	$to_return = 0;
	if($result >= $result2){
		$to_return = ($result+1);
	}
	else{
		$to_return = ($result2+1);
	}
	db_set_active('default');
	return $to_return;
}

/**
 * MISSING
 * 
 * @param unknown_type $activity_id
 * @return unknown_type
 */
function get_activity_audience($activity_id){
	$query = "SELECT * FROM pi_activity WHERE activity_id = '" . $activity_id . "'";
	$result = db_fetch_object(db_query($query));
	return $result->audience;
}

/**
 * MISSING
 * 
 * @param unknown_type $activity_id
 * @return multitype:
 */
function get_group_of_activity_from_server($activity_id){
	//get inquiry_id on local machine -> assumption is that the toolkit is running one and only one inquiry!!
	db_set_active('default');
	$query = "SELECT * FROM pi_inquiry";
	$inquiry = db_fetch_object(db_query($query));
	db_set_active('server');
	$query2 = "SELECT * FROM pi_activity_status WHERE";
	$query2 .= " activity_id = '" . $activity_id . "'";
	$query2 .= " AND inquiry_id = '" . $inquiry->inquiry_id . "'";
	$result2 = db_query($query2);
	$array = array();
	while($object = db_fetch_object($result2)){
		$array[] = $object->gid;
	}
	db_set_active('default');
	return $array;
}

/**
 * MISSING
 * 
 * @param unknown_type $object
 * @param unknown_type $old_nid
 * @param unknown_type $new_nid
 * @return string
 */
function update_pi_activity_node_table($object, $old_nid, $new_nid){
	//does the node exist in pi_activity_node?
	$exists_query = "SELECT * FROM pi_activity_node WHERE pan_id = '" . $object->pan_id . "'";
	$exists = db_fetch_object(db_query($exists_query));
	$query = "";
	$query2 = "";
	if($exists){
		$query .= "UPDATE pi_activity_node SET nid = '" . $new_nid . "' WHERE pan_id = '" . $object->pan_id . "'";
		$query2 .= "UPDATE pi_install_inquiry SET local_nid = '" . $new_nid . "' WHERE server_nid = '" . $old_nid . "'";
	}
	else{
		$query .= "INSERT INTO pi_activity_node SET";
		$query .= " inquiry_id = '" . $object->inquiry_id . "'";
		$query .= ", activity_id = '" . $object->activity_id . "'";
		$query .= ", nid = '" . $new_nid . "'";
		//save to db info about corresponding nids of the nodes on the server and local machine
		$query2 = "INSERT INTO pi_install_inquiry SET";
		$query2 .= " server_nid = '" . $old_nid . "'";
		$query2 .= ", local_nid = '" . $new_nid . "'";
	}
	db_query($query);
	db_query($query2);
	return "...Updated pi_activity_node table with new nid: " . $new_nid . "<br>";
}

/**
 * MISSING
 * 
 * @param unknown_type $uid
 * @return string
 */
function update_pi_current_stage_from_server($uid){
	//get inquiry_id on local machine -> assumption is that the toolkit is running one and only one inquiry!!
	db_set_active('default');
	$query = "SELECT * FROM pi_inquiry";
	$inquiry = db_fetch_object(db_query($query));
	db_set_active('server');
	$query2 = "SELECT * FROM pi_current_stage";
	$current_stage = db_fetch_object(db_query($query2));
	db_set_active('default');
	$update = "UPDATE pi_current_stage SET stage_id = '". $current_stage->stage_id . "'";
	$update .= " WHERE pcs_id = '" . $current_stage->pcs_id . "'";
	db_query($update);
	return "....Updated pi_current_stage table on Local Machine...<br>";
}

/**
 * MISSING
 * 
 * @return string
 */
function include_special_quiz_requirements(){
	$text = "...Including Special Quiz Relationships<br>";
	//inc quiz_node_relationship table
	$text .= include_quiz_node_relationship();
	//inc quiz_long_answer_user_answers table
	$text .= include_quiz_long_answer_user_answers();
	//inc quiz_multichoise_user_answers table
	$text .= include_quiz_multichoise_user_answers();
	//inc quiz_truefalse_user_answers table
	$text .= include_quiz_truefalse_user_answers();
	//ic quiz_node_results table
	$text .= include_quiz_node_results();
	//inc quiz_node_results_answers table
	$text .= include_quiz_node_results_answers();
	return $text;
}

/**
 * MISSING
 * 
 * @return string
 */
function include_quiz_node_relationship(){
	//for each record in the quiz_node_relationship table on the server
	$text = "quiz_node_relationship<br>";
	$query = "SELECT * FROM quiz_node_relationship";
	db_set_active('server');
	$result = db_query($query);
	while($object = db_fetch_object($result)){
		db_set_active('default');
		$execute = TRUE;
		//add this to the local machine but replace the server_nid with local_nid
		$parent_nid = get_local_nid_from_server_nid($object->parent_nid);
		$child_nid = get_local_nid_from_server_nid($object->child_nid);
		if($parent_nid == 0 | $child_nid == 0){
			$execute = FALSE;
		}
		if($execute){
			//load nodes from local machine
			$local_parent_node = node_load($parent_nid);
			$local_child_node = node_load($child_nid);
			//does this record exist?
			$exists_query = "SELECT * FROM quiz_node_relationship WHERE";
			$exists_query .=  " parent_nid = '" . $local_parent_node->nid . "'";
			$exists_query .= " AND parent_vid = '" . $local_parent_node->vid . "'";
			$exists_query .= " AND child_nid = '" . $local_child_node->nid . "'";
			$exists_query .= " AND child_vid = '" . $local_child_node->vid . "'";
			$exists_object = db_fetch_object(db_query($exists_query));
			if($exists_object){
				//update entry
				$update_query = "UPDATE quiz_node_relationship SET";
				$update_query .= " question_status = '" . $object->question_status . "'";
				$update_query .= ", weight = '" . $object->weight . "'";
				$update_query .=  " WHERE parent_nid = '" . $local_parent_node->nid . "'";
				$update_query .= " AND parent_vid = '" . $local_parent_node->vid . "'";
				$update_query .= " AND child_nid = '" . $local_child_node->nid . "'";
				$update_query .= " AND child_vid = '" . $local_child_node->vid . "'";
				db_query($update_query);
				$text .= "Updated quiz_node_relationship<br>";
			}
			else{
				//add new entry
				$insert_query = "INSERT INTO quiz_node_relationship SET";
				$insert_query .= " parent_nid = '" . $local_parent_node->nid . "'";
				$insert_query .= ", parent_vid = '" . $local_parent_node->vid . "'";
				$insert_query .= ", child_nid = '" . $local_child_node->nid . "'";
				$insert_query .= ", child_vid = '" . $local_child_node->vid . "'";
				$insert_query .= ", question_status = '" . $object->question_status . "'";
				$insert_query .= ", weight = '" . $object->weight . "'";
				db_query($insert_query);
				$text .= "Inserted quiz_node_relationship<br>";
			}
		}
		db_set_active('server');
	}
	db_set_active('default');
	return $text;
}

/**
 * MISSING
 * 
 * @return string
 */
function include_quiz_long_answer_user_answers(){
	$text = "quiz_long_answer_user_answers<br>";
	db_set_active('default');
	//do we have a long_answer node type?
	$type = 'long_answer';
	$query = "SELECT * FROM node_type WHERE type = '" . $type ."'";
	$object = db_fetch_object(db_query($query));
	if($object){
		$text .= "Exists long_answer type...<br>";
		//get all the quiz_long_answer_user_answers
		$query2 = "SELECT * FROM quiz_long_answer_user_answers";
		db_set_active('server');
		$results2 = db_query($query2);
		while($object2 = db_fetch_object($results2)){
			//do we update or insert? is there an answer on the local machine?
			db_set_active('default');
			$test_query = "SELECT * FROM quiz_long_answer_user_answers WHERE answer_id = '" . $object2->answer_id . "'";
			$test_object = db_fetch_object(db_query($test_query));
			if($test_object){
				//update
				$update = "UPDATE quiz_long_answer_user_answers SET";
				$update .= " score = '" . $object2->score . "'";
				$update .= ", is_evaluated = '" . $object2->is_evaluated . "'";
				$update .= ", answer = '" . $object2->answer . "'";
				$update .= " WHERE result_id = '" . $object2->result_id . "'";
				db_query($update);
				$text .= "Updated quiz_long_answer_user_answer<br>";
			}
			else{
				//insert
				$local_nid = get_local_nid_from_server_nid($object2->question_nid);
				$insert = "INSERT INTO quiz_long_answer_user_answers SET";
				$insert .= " answer_id = '" . $object2->answer_id . "'";
				$insert .= ", question_nid = '" . $local_nid . "'";
				$insert .= ", question_vid = '" . get_next_nid_on_local . "'";
				$insert .= ", result_id = '" . $object2->result_id . "'";
				$insert .= ", score = '" . $object2->score . "'";
				$insert .= ", is_evaluated = '" . $object2->is_evaluated . "'";
				$insert .= ", answer = '" . $object2->answer . "'";
				db_query($insert);
				$text .= "Inserted quiz_long_answer_user_answer<br>";
			}
			db_set_active('server');
		}
	}
	else{
		$text .= "No long_answer type...<br>";
	}
	db_set_active('default');
	return $text;
}

/**
 * MISSING
 * 
 * @return unknown_type
 */
function include_quiz_multichoise_user_answers(){
	$text = "include_quiz_multichoise_user_answers<br>";
	db_set_active('default');
	//do we have a multichoice node type?
	$type = 'multichoice';
	$query = "SELECT * FROM node_type WHERE type = '" . $type ."'";
	$object = db_fetch_object(db_query($query));
	if($object){
		$text .= "Exists multichoice type...<br>";
		//get all the quiz_long_answer_user_answers
		$query2 = "SELECT * FROM quiz_multichoice_user_answers";
		db_set_active('server');
		$results2 = db_query($query2);
		while($object2 = db_fetch_object($results2)){
			//do we update or insert? is there an answer on the local machine?
			db_set_active('default');
			$test_query = "SELECT * FROM quiz_multichoice_user_answers WHERE";
			$test_query .= " answer_id = '" . $object2->answer_id . "'";
			$test_query .= " AND result_id = '" . $object2->result_id . "'";
			$test_object = db_fetch_object(db_query($test_query));
			if($test_object){
				//update
				$update = "UPDATE quiz_multichoice_user_answers SET";
				$update .= " answer = '" . $object2->answer . "'";
				$update .= " WHERE result_id = '" . $object2->result_id . "'";
				db_query($update);
				$text .= "Updated quiz_multichoise_user_answers<br>";
			}
			else{
				//insert
				$local_nid = get_local_nid_from_server_nid($object2->question_nid);
				$insert = "INSERT INTO quiz_multichoice_user_answers SET";
				$insert .= " question_nid = '" . $local_nid . "'";
				$insert .= ", question_vid = '" . get_next_nid_on_local() . "'"; 
				$insert .= ", result_id = '" . $object2->result_id . "'";
				$insert .= ", answer_id = '" . $object2->answer_id . "'";
				db_query($insert);
				$text .= "Inserted quiz_multichoise_user_answers<br>";
			}
			db_set_active('server');
		}
	}
	else{
		$text .= "No multichoice type...<br>";
	}
	db_set_active('default');
	return $text;
}

/**
 * MISSING
 * 
 * @return string
 */
function include_quiz_truefalse_user_answers(){
	$text = "include_quiz_truefalse_user_answers<br>";
	db_set_active('default');
	//do we have a multichoice node type?
	$type = 'true_false';
	$query = "SELECT * FROM node_type WHERE type = '" . $type ."'";
	$object = db_fetch_object(db_query($query));
	if($object){
		$text .= "Exists truefalse type...<br>";
		//get all the quiz_long_answer_user_answers
		$query2 = "SELECT * FROM quiz_truefalse_user_answers";
		db_set_active('server');
		$results2 = db_query($query2);
		while($object2 = db_fetch_object($results2)){
			//do we update or insert? is there an answer on the local machine?
			db_set_active('default');
			$test_query = "SELECT * FROM quiz_truefalse_user_answers WHERE result_id = '" . $object2->result_id . "'";
			$test_object = db_fetch_object(db_query($test_query));
			if($test_object){
				//update
				$update = "UPDATE quiz_truefalse_user_answers SET";
				$update .= " answer = '" . $object2->answer . "'";
				$update .= ", score = '" . $object2->score . "'";
				$update .= " WHERE result_id = '" . $object2->result_id . "'";
				db_query($update);
				$text .= "Updated quiz_truefalse_user_answers<br>";
			}
			else{
				//insert
				$local_nid = get_local_nid_from_server_nid($object2->question_nid);
				$insert = "INSERT INTO quiz_truefalse_user_answers SET";
				$insert .= " question_nid = '" . $local_nid . "'";
				$insert .= ", question_vid = '" . get_next_nid_on_local() . "'";
				$insert .= ", result_id = '" . $object2->result_id . "'";
				$insert .= ", answer = '" . $object2->answer . "'";
				$insert .= ", score = '" . $object2->score . "'";
				db_query($insert);
				$text .= "Inserted quiz_truefalse_user_answers<br>";
			}
			db_set_active('server');
		}
	}
	else{
		$text .= "No truefalse type...<br>";
	}
	db_set_active('default');
	return $text;
}

/**
 * MISSING
 * 
 * @return string
 */
function include_quiz_node_results(){
	$text .= "include_quiz_node_results...<br>";
	//get all the quiz_node_results
	$query = "SELECT * FROM quiz_node_results";
	db_set_active('server');
	$results = db_query($query);
	while($object = db_fetch_object($results)){
		//do we update or insert? is there an answer on the local machine?
		db_set_active('default');
		$test_query = "SELECT * FROM quiz_node_results WHERE result_id = '" . $object->result_id . "'";
		$test_object = db_fetch_object(db_query($test_query));
		if($test_object){
			//update
			$update = "UPDATE quiz_node_results SET";
			$update .= " time_start = '" . $object->time_start . "'";
			$update .= ", time_end = '" . $object->time_end . "'";
			$update .= ", released = '" . $object->released . "'";
			$update .= ", score = '" . $object->score . "'";
			$update .= ", is_invalid = '" . $object->is_invalid . "'";
			$update .= " WHERE result_id = '" . $object->result_id . "'";
			db_query($update);
			$text .= "Updated quiz_node_results<br>";
		}
		else{
			//insert
			$local_nid = get_local_nid_from_server_nid($object->nid);
			$insert = "INSERT INTO quiz_node_results SET";
			$insert .= " result_id = '" . $object->result_id . "'";
			$insert .= ", nid = '" . $local_nid . "'";
			$insert .= ", vid = '" . get_next_nid_on_local() . "'";
			$insert .= ", uid = '" . $object->uid . "'";
			$insert .= ", time_start = '" . $object->time_start . "'";
			$insert .= ", time_end = '" . $object->time_end . "'";
			$insert .= ", released = '" . $object->released . "'";
			$insert .= ", score = '" . $object->score . "'";
			$insert .= ", is_invalid = '" . $object->is_invalid . "'";
			db_query($insert);
			$text .= "Inserted quiz_node_results<br>";
		}
		db_set_active('server');
	}
	return $text;
}

/**
 * MISSING
 * 
 * @return string
 */
function include_quiz_node_results_answers(){
	$text .= "quiz_node_results_answers...<br>";
	//get all the quiz_node_results
	$query = "SELECT * FROM quiz_node_results_answers";
	db_set_active('server');
	$results = db_query($query);
	while($object = db_fetch_object($results)){
		//do we update or insert? is there an answer on the local machine?
		db_set_active('default');
		$test_query = "SELECT * FROM quiz_node_results_answers WHERE result_id = '" . $object->result_id . "'";
		$test_object = db_fetch_object(db_query($test_query));
		if($test_object){
			//update
			$update = "UPDATE quiz_node_results_answers SET";
			$update .= " is_correct = '" . $object->is_correct . "'";
			$update .= ", is_skipped = '" . $object->is_skipped . "'";
			$update .= ", points_awarded = '" . $object->points_awarded . "'";
			$update .= ", answer_timestamp = '" . $object->answer_timestamp . "'";
			$update .= " WHERE result_id = '" . $object->result_id . "'";
			db_query($update);
			$text .= "Updated quiz_node_results_answers<br>";
		}
		else{
			//insert
			$local_nid = get_local_nid_from_server_nid($object->question_nid);
			$insert = "INSERT INTO quiz_node_results_answers SET";
			$insert .= " result_id = '" . $object->result_id . "'";
			$insert .= ", question_nid = '" . $local_nid . "'";
			$insert .= ", question_vid = '" . get_next_nid_on_local() . "'";
			$insert .= ", is_correct = '" . $object->is_correct . "'";
			$insert .= ", is_skipped = '" . $object->is_skipped . "'";
			$insert .= ", points_awarded = '" . $object->points_awarded . "'";
			$insert .= ", answer_timestamp = '" . $object->answer_timestamp . "'";
			db_query($insert);
			$text .= "Inserted quiz_node_results_answers<br>";
		}
		db_set_active('server');
	}
	return $text;
}

//------------------------------------------------------------------------------------------------------------------
//--------------------------------------SYNC CODE: FUNCTIONS THAT DO THE SYNC'ING-----------------------------------
//------------------------------------------------------------------------------------------------------------------